<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mysql学习之旅【七】主从搭建</title>
      <link href="2021/06/21/Mysql%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%B8%83%E3%80%91%E4%B8%BB%E4%BB%8E%E6%90%AD%E5%BB%BA/"/>
      <url>2021/06/21/Mysql%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%B8%83%E3%80%91%E4%B8%BB%E4%BB%8E%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>主从同步使得数据可以从一个数据库服务器复制到其他服务器上，在复制数据时，一个服务器充当主服务器（master），其余的服务器充当从服务器（slave）。因为复制是异步进行的，所以从服务器不需要一直连接着主服务器，从服务器甚至可以通过拨号断断续续地连接主服务器。通过配置文件，可以指定复制所有的数据库，某个数据库，甚至是某个数据库上的某个表。</p><h3 id="1-配置主库"><a href="#1-配置主库" class="headerlink" title="1.配置主库"></a>1.配置主库</h3><ol><li><p>修改my.cnf</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[mysqld]</span><span class="token comment">#主数据库端ID号</span><span class="token constant">server_id</span> <span class="token attr-value"><span class="token punctuation">=</span> 1           </span><span class="token comment"> #开启二进制日志                  </span><span class="token constant">log-bin</span> <span class="token attr-value"><span class="token punctuation">=</span> mysql-bin    </span><span class="token comment">#需要复制的数据库名，如果复制多个数据库，重复设置这个选项即可                  </span><span class="token constant">binlog-do-db</span> <span class="token attr-value"><span class="token punctuation">=</span> db        </span><span class="token comment">#将从服务器从主服务器收到的更新记入到从服务器自己的二进制日志文件中                 </span>log-slave-updates                        <span class="token comment">#控制binlog的写入频率。每执行多少次事务写入一次(这个参数性能消耗很大，但可减小MySQL崩溃造成的损失) </span><span class="token constant">sync_binlog</span> <span class="token attr-value"><span class="token punctuation">=</span> 1                    </span><span class="token comment">#这个参数一般用在主主同步中，用来错开自增值, 防止键值冲突</span><span class="token constant">auto_increment_offset</span> <span class="token attr-value"><span class="token punctuation">=</span> 1           </span><span class="token comment">#这个参数一般用在主主同步中，用来错开自增值, 防止键值冲突</span><span class="token constant">auto_increment_increment</span> <span class="token attr-value"><span class="token punctuation">=</span> 1            </span><span class="token comment">#二进制日志自动删除的天数，默认值为0,表示“没有自动删除”，启动时和二进制日志循环时可能删除  </span><span class="token constant">expire_logs_days</span> <span class="token attr-value"><span class="token punctuation">=</span> 7                    </span><span class="token comment">#将函数复制到slave  </span><span class="token constant">log_bin_trust_function_creators</span> <span class="token attr-value"><span class="token punctuation">=</span> 1   </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在主库创建角色,用于从库连接主库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'repl'</span><span class="token variable">@'*.55.*.12'</span> IDENTIFIED <span class="token keyword">WITH</span> <span class="token string">'mysql_native_password'</span> <span class="token keyword">BY</span> <span class="token string">'rootROOT1234!'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建<code>repl</code>用户,密码为<code>rootROOT1234!</code>,并且 这个用户只能指定的ip连接</p><p>注意: MySQL8.0默认指定使用需要SSL的身份验证插件caching_sha2_password，而我们在创建同步复制账号时候没有指定REQUIRE SSL。为了降低这件事情的复杂性，我们选择了社区的解决方法，选择绕过SSL插件的验证，改为mysql_native_password验证来做同步复制。</p><p>授予该角色权限</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">GRANT</span> <span class="token keyword">REPLICATION</span> SLAVE <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'repl'</span><span class="token variable">@'*.55.*.12'</span><span class="token punctuation">;</span>FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>查看二进制日志的信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> master <span class="token keyword">status</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------------------+----------+--------------+------------------+-------------------+</span><span class="token operator">|</span> <span class="token keyword">File</span>             <span class="token operator">|</span> Position <span class="token operator">|</span> Binlog_Do_DB <span class="token operator">|</span> Binlog_Ignore_DB <span class="token operator">|</span> Executed_Gtid_Set <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------------+----------+--------------+------------------+-------------------+</span><span class="token operator">|</span> mysql<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span>     <span class="token number">1937</span> <span class="token operator">|</span>              <span class="token operator">|</span> mysql            <span class="token operator">|</span>                   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------------+----------+--------------+------------------+-------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>File的值是当前使用的二进制日志的文件名，Position是该日志里面的位置信息（不需要纠结这个究竟代表什么），记住这两个值，会在下面配置从服务器时用到。</p></li></ol><h3 id="2-配置从库"><a href="#2-配置从库" class="headerlink" title="2. 配置从库"></a>2. 配置从库</h3><ol><li><p>配置my.cnf</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token constant">server_id</span> <span class="token attr-value"><span class="token punctuation">=</span> 2</span><span class="token constant">log-bin</span> <span class="token attr-value"><span class="token punctuation">=</span> mysql-bin</span>log-slave-updates<span class="token constant">sync_binlog</span> <span class="token attr-value"><span class="token punctuation">=</span> 0</span><span class="token comment">#log buffer将每秒一次地写入log file中，并且log file的flush(刷到磁盘)操作同时进行。该模式下在事务提交的时候，不会主动触发写入磁盘的操作</span><span class="token constant">innodb_flush_log_at_trx_commit</span> <span class="token attr-value"><span class="token punctuation">=</span> 0        </span><span class="token comment">#指定slave要复制哪个库</span><span class="token constant">replicate-do-db</span> <span class="token attr-value"><span class="token punctuation">=</span> db         </span><span class="token comment">#MySQL主从复制的时候，当Master和Slave之间的网络中断，但是Master和Slave无法察觉的情况下（比如防火墙或者路由问题）。Slave会等待slave_net_timeout设置的秒数后，才能认为网络出现故障，然后才会重连并且追赶这段时间主库的数据</span><span class="token constant">slave-net-timeout</span> <span class="token attr-value"><span class="token punctuation">=</span> 60                    </span><span class="token constant">log_bin_trust_function_creators</span> <span class="token attr-value"><span class="token punctuation">=</span> 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行同步命令</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">change master <span class="token keyword">to</span> MASTER_HOST<span class="token operator">=</span><span class="token string">'*.37.*.47'</span><span class="token punctuation">,</span>MASTER_PORT<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>MASTER_USER<span class="token operator">=</span><span class="token string">'repl'</span><span class="token punctuation">,</span>MASTER_PASSWORD<span class="token operator">=</span><span class="token string">'rootROOT1234!'</span><span class="token punctuation">,</span>MASTER_LOG_FILE<span class="token operator">=</span><span class="token string">'mysql-bin.000002'</span><span class="token punctuation">,</span>MASTER_LOG_POS<span class="token operator">=</span><span class="token number">1708</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>MASTER_HOST: 主库ip</p><p>MASTER_PORT: 主库端口</p><p>MASTER_USER: 主库创建的用户</p><p>MASTER_PASSWORD: 用户密码</p><p>MASTER_LOG_FILE: 在主数据库执行命令<code>show master status</code> 查询到的二进制日志文件名称</p><p>MASTER_LOG_POS: 在主数据库执行命令<code>show master status</code> 查询到的位置 Position的值</p></li><li><p>开启 主从复制功能</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">start</span> slave<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看详细状态</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> slave <span class="token keyword">status</span> \G<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>               Slave_IO_State: Waiting <span class="token keyword">for</span> master <span class="token keyword">to</span> send event                  Master_Host: <span class="token number">101.37</span><span class="token number">.79</span><span class="token number">.47</span>                  Master_User: repl                  Master_Port: <span class="token number">3306</span>                Connect_Retry: <span class="token number">60</span>              Master_Log_File: mysql<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span>          Read_Master_Log_Pos: <span class="token number">1937</span>               Relay_Log_File: zlx<span class="token operator">-</span>relay<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span>                Relay_Log_Pos: <span class="token number">553</span>        Relay_Master_Log_File: mysql<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span>             Slave_IO_Running: Yes            Slave_SQL_Running: Yes              Replicate_Do_DB:           Replicate_Ignore_DB:            Replicate_Do_Table:        Replicate_Ignore_Table:       Replicate_Wild_Do_Table:   Replicate_Wild_Ignore_Table:                    Last_Errno: <span class="token number">0</span>                   Last_Error:                  Skip_Counter: <span class="token number">0</span>          Exec_Master_Log_Pos: <span class="token number">1937</span>              Relay_Log_Space: <span class="token number">760</span>              Until_Condition: None               Until_Log_File:                 Until_Log_Pos: <span class="token number">0</span>           Master_SSL_Allowed: <span class="token keyword">No</span>           Master_SSL_CA_File:            Master_SSL_CA_Path:               Master_SSL_Cert:             Master_SSL_Cipher:                Master_SSL_Key:         Seconds_Behind_Master: <span class="token number">0</span>Master_SSL_Verify_Server_Cert: <span class="token keyword">No</span>                Last_IO_Errno: <span class="token number">0</span>                Last_IO_Error:                Last_SQL_Errno: <span class="token number">0</span>               Last_SQL_Error:   Replicate_Ignore_Server_Ids:              Master_Server_Id: <span class="token number">1</span>                  Master_UUID: b8d3cf48<span class="token operator">-</span><span class="token number">1412</span><span class="token operator">-</span><span class="token number">11</span>eb<span class="token operator">-</span><span class="token number">9</span>e99<span class="token operator">-</span><span class="token number">00163</span>e169458             Master_Info_File: mysql<span class="token punctuation">.</span>slave_master_info                    SQL_Delay: <span class="token number">0</span>          SQL_Remaining_Delay: <span class="token boolean">NULL</span>      Slave_SQL_Running_State: Slave has <span class="token keyword">read</span> <span class="token keyword">all</span> relay log<span class="token punctuation">;</span> waiting <span class="token keyword">for</span> more updates           Master_Retry_Count: <span class="token number">86400</span>                  Master_Bind:       Last_IO_Error_Timestamp:      Last_SQL_Error_Timestamp:                Master_SSL_Crl:            Master_SSL_Crlpath:            Retrieved_Gtid_Set:             Executed_Gtid_Set:                 Auto_Position: <span class="token number">0</span>         Replicate_Rewrite_DB:                  Channel_Name:            Master_TLS_Version:        Master_public_key_path:         Get_master_public_key: <span class="token number">0</span>            Network_Namespace: <span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假如显示 <code>Slave_IO_Running</code> 和 <code>Slave_SQL_Running</code> 为 <code>Yes</code> ，以及<code>Slave_IO_State</code> 为 <code>Waiting for master to send event</code>，则证明主从复制成功！</p></li></ol><h3 id="3-从库Slave相关命令"><a href="#3-从库Slave相关命令" class="headerlink" title="3. 从库Slave相关命令"></a>3. 从库Slave相关命令</h3><p>启动主从复制</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">start</span> slave<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>停止同步操作</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">stop slave<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Mysql系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBA </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ</title>
      <link href="2021/06/17/RocketMQ/"/>
      <url>2021/06/17/RocketMQ/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p><strong>什么是MQ?</strong></p><p>MQ全称<strong>Message Queue</strong>(消息队列)，是在消息的传输过程中保存消息的容器。多用于分布式系统之间进行通信。队列:数据结构的一种，特征为“先进先出”</p><p><strong>为什么需要引入MQ?</strong></p><p>引入MQ后的优势</p><ol><li><p>应用解耦</p><p>多个应用间的数据传递,通过MQ后,将保有持久性,消费者应用挂掉后与生产者应用没有任何影响</p></li><li><p>异步提速</p><p>提升系统的体验性,增加系统吞吐量</p></li><li><p>流量削峰</p><p>提高系统的稳定性,防止被高流量打垮</p></li></ol><p>引入MQ的劣势</p><ol><li><p>系统可用性降低</p><p>一旦引入中间件,如果中间件垮掉,那么就会对业务造成影响,所以要<strong>保证MQ的高可用</strong></p></li><li><p>系统复杂度提高</p><p>通过MQ进行异步调用,<strong>如何保证消息不会重复消费,怎么处理消息丢失情况,如何保证消息传递的顺序性?</strong></p></li><li><p>一致性问题</p><p>如A系统处理完后,通过MQ通知B,C,D三个系统,如果D系统处理失败,如何保证<strong>消息数据处理的一致性</strong></p></li></ol><hr><h4 id="1-RocketMQ基础概念"><a href="#1-RocketMQ基础概念" class="headerlink" title="1. RocketMQ基础概念"></a>1. RocketMQ基础概念</h4><ol><li><p>Producer Cluster(消息生产者集群)</p><p>指我们编写的应用程序,发送消息端</p></li><li><p>Consumer Cluster(消息消费者集群)</p><p>指我们编写的应用程序,消费消息端</p></li><li><p>NameServer Cluster(消息服务器管理集群)</p><p>Broker Cluster的管理者,存储一些元数据信息,如Broker的集群机器IP等</p></li><li><p>Broker Cluster(消息服务器集群)</p><p>具体的消息服务器</p></li></ol><p><img src="https://movies-bucket.oss-cn-beijing.aliyuncs.com/45ec04f5ddf7463ca2b59e86cedf80b5.png"></p><p>RocketMQ提供两种消费模式</p><ul><li><p>拉取模式</p><p>循环请求MQ,浪费资源</p></li><li><p>推送模式(推荐)</p><p>长链接+监听器实现</p></li></ul><h4 id="2-RocketMQ安装"><a href="#2-RocketMQ安装" class="headerlink" title="2. RocketMQ安装"></a>2. RocketMQ安装</h4><p><a href="https://rocketmq.apache.org/dowloading/releases/">下载地址传送门</a></p><p>本次安装使用4.8.0版本 <a href="https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.8.0/rocketmq-all-4.8.0-bin-release.zip">https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.8.0/rocketmq-all-4.8.0-bin-release.zip</a></p><p>解压安装包即可使用</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">unzip rocketmq-all-4.8.0-bin-release.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入到bin目录下</p><p>启动 nameserver </p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">./mqnameserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">Create RAMDisk /Volumes/RAMDisk for gc logging on Darwin OS.OpenJDK 64-Bit Server VM warning: Using the DefNew young collector with the CMS collector is deprecated and will likely be removed in a future releaseOpenJDK 64-Bit Server VM warning: UseCMSCompactAtFullCollection is deprecated and will likely be removed in a future release.The Name Server boot success. serializeType=JSON<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>出现以上提示表示启动成功</p><p>接下来启动broker</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">./mqbroker -n 127.0.0.1:9876 autoCreateTopicEnable=true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>-n 表示broker要注册的nameserver 地址,我们刚启动的nameserver就是在本机上,默认端口为9876</p><p>autoCreateTopicEnable 表示自动创建topic</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">The broker[L.local, 192.168.0.102:10911] boot success. serializeType=JSON and name server is 127.0.0.1:9876<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上提示表示启动broker成功</p><h4 id="3-可视化工具安装"><a href="#3-可视化工具安装" class="headerlink" title="3. 可视化工具安装"></a>3. 可视化工具安装</h4><p>将项目克隆到本地</p><p>git clone <a href="https://github.com/apache/rocketmq-externals.git">https://github.com/apache/rocketmq-externals.git</a></p><p>这是一个Springboot项目,我们修改下配置文件即可,指定我们的nameserver</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#if this value is empty,use env value rocketmq.config.namesrvAddr  NAMESRV_ADDR | now, you can set it in ops page.default localhost:9876</span><span class="token attr-name">rocketmq.config.namesrvAddr</span><span class="token punctuation">=</span><span class="token attr-value">localhost:9876</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后通过mavnen进行打包,进入到console根目录</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">mvn clean package -Dmaven.test.skip=true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后启动jar包</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">java -jar rocketmq-console-ng-2.0.0.jar <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问localhost:8080 查看结果</p><h4 id="4-Code环境搭建"><a href="#4-Code环境搭建" class="headerlink" title="4. Code环境搭建"></a>4. Code环境搭建</h4><p>创建一个简单的maven项目,导入下依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.lxz.rocketmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>study-rocketmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.rocketmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>rocketmq-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-基础生产消费案例"><a href="#5-基础生产消费案例" class="headerlink" title="5. 基础生产消费案例"></a>5. 基础生产消费案例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 1.创建一个默认生产者,指定生产者组*/</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"defaultGroup"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token punctuation">{</span>  <span class="token comment">/** 2.设置nameserver*/</span>  producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"localhost:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-发送消息"><a href="#1-发送消息" class="headerlink" title="1. 发送消息"></a>1. 发送消息</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//开启客户端</span>  <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  message<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span><span class="token string">"defaultTopic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置消息要发送的topic</span>  message<span class="token punctuation">.</span><span class="token function">setTags</span><span class="token punctuation">(</span><span class="token string">"defaultTags"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置消息的tags</span>  message<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置要发送的消息内容</span>  <span class="token comment">//获取发送结果</span>  <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//关闭客户端</span>  producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">SendResult <span class="token punctuation">[</span>sendStatus=SEND_OK<span class="token punctuation">,</span> msgId=7F000001207418B4AAC255F236A80000<span class="token punctuation">,</span> offsetMsgId=C0A8006600002A9F0000000000000000<span class="token punctuation">,</span> messageQueue=MessageQueue <span class="token punctuation">[</span>topic=defaultTopic<span class="token punctuation">,</span> brokerName=L.local<span class="token punctuation">,</span> queueId=<span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> queueOffset=<span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-消费消息"><a href="#2-消费消息" class="headerlink" title="2. 消费消息"></a>2. 消费消息</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lxz<span class="token punctuation">.</span>consumer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StrUtil</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span></span><span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">;</span><span class="token comment">/** * 消费者 * @author lx Zhang. * @date 2021/6/17 4:38 下午 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span>    <span class="token comment">/** 创建默认消费者(推送模式)*/</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"defaultGroup"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment">/** 指定nameserver*/</span>        consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"localhost:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token function">consumerMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">consumerMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token comment">/** 指定要消费的topic，和tags,*表示全部 */</span>        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"defaultTopic"</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/** 注册监听器,处理消息*/</span>        consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>messageList<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            messageList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>message<span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"消费者接收到消息:topic-&gt; [{}] tags-&gt; [{}],body-&gt; 【{}】"</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//开启消费者</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者已开启..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">消费者已开启...消费者接收到消息<span class="token operator">:</span>topic-&gt; <span class="token punctuation">[</span>defaultTopic<span class="token punctuation">]</span> tags-&gt; <span class="token punctuation">[</span>defaultTags<span class="token punctuation">]</span><span class="token punctuation">,</span>body-&gt; 【hello world!】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="6-多消费者案例"><a href="#6-多消费者案例" class="headerlink" title="6. 多消费者案例"></a>6. 多消费者案例</h4><p>启用两个程序监听 <code>defaultTopic2</code> 主题</p><h5 id="1-相同消费组"><a href="#1-相同消费组" class="headerlink" title="1. 相同消费组"></a>1. 相同消费组</h5><p>然后循环向这个主题发送10条消息,注意是循环单次发送,不是<code>批量</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 循环发送 10条数据 * @throws Exception */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">forSendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span><span class="token string">"defaultTopic2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置消息要发送的topic</span>        message<span class="token punctuation">.</span><span class="token function">setTags</span><span class="token punctuation">(</span><span class="token string">"defaultTags2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置消息的tags</span>        message<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置要发送的消息内容</span>        <span class="token comment">//获取发送结果</span>        <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//关闭客户端</span>    producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><p>Consumer1</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">消费者接收到消息:topic-&gt; [defaultTopic2] tags-&gt; [defaultTags2],body-&gt; 【hello world!0】消费者接收到消息:topic-&gt; [defaultTopic2] tags-&gt; [defaultTags2],body-&gt; 【hello world!3】消费者接收到消息:topic-&gt; [defaultTopic2] tags-&gt; [defaultTags2],body-&gt; 【hello world!4】消费者接收到消息:topic-&gt; [defaultTopic2] tags-&gt; [defaultTags2],body-&gt; 【hello world!7】消费者接收到消息:topic-&gt; [defaultTopic2] tags-&gt; [defaultTags2],body-&gt; 【hello world!8】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Consumer2</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">消费者接收到消息<span class="token operator">:</span>topic<span class="token operator">-&gt;</span> <span class="token punctuation">[</span>defaultTopic2<span class="token punctuation">]</span> tags<span class="token operator">-&gt;</span> <span class="token punctuation">[</span>defaultTags2<span class="token punctuation">]</span><span class="token punctuation">,</span>body<span class="token operator">-&gt;</span> 【hello world<span class="token operator">!</span><span class="token number">1</span>】消费者接收到消息<span class="token operator">:</span>topic<span class="token operator">-&gt;</span> <span class="token punctuation">[</span>defaultTopic2<span class="token punctuation">]</span> tags<span class="token operator">-&gt;</span> <span class="token punctuation">[</span>defaultTags2<span class="token punctuation">]</span><span class="token punctuation">,</span>body<span class="token operator">-&gt;</span> 【hello world<span class="token operator">!</span><span class="token number">2</span>】消费者接收到消息<span class="token operator">:</span>topic<span class="token operator">-&gt;</span> <span class="token punctuation">[</span>defaultTopic2<span class="token punctuation">]</span> tags<span class="token operator">-&gt;</span> <span class="token punctuation">[</span>defaultTags2<span class="token punctuation">]</span><span class="token punctuation">,</span>body<span class="token operator">-&gt;</span> 【hello world<span class="token operator">!</span><span class="token number">5</span>】消费者接收到消息<span class="token operator">:</span>topic<span class="token operator">-&gt;</span> <span class="token punctuation">[</span>defaultTopic2<span class="token punctuation">]</span> tags<span class="token operator">-&gt;</span> <span class="token punctuation">[</span>defaultTags2<span class="token punctuation">]</span><span class="token punctuation">,</span>body<span class="token operator">-&gt;</span> 【hello world<span class="token operator">!</span><span class="token number">6</span>】消费者接收到消息<span class="token operator">:</span>topic<span class="token operator">-&gt;</span> <span class="token punctuation">[</span>defaultTopic2<span class="token punctuation">]</span> tags<span class="token operator">-&gt;</span> <span class="token punctuation">[</span>defaultTags2<span class="token punctuation">]</span><span class="token punctuation">,</span>body<span class="token operator">-&gt;</span> 【hello world<span class="token operator">!</span><span class="token number">9</span>】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>两个消费者是交替消费消息,因为我们两个消费者指定的消费组一样,组相同将会产生排斥效果,就能有效防止消息重复消费的情况</strong></p><p><u><strong>消费组一致的消费者,会负载均衡分开消费消息,防止消息的重复消费</strong></u></p><h5 id="2-不同消费组"><a href="#2-不同消费组" class="headerlink" title="2. 不同消费组"></a>2. <strong>不同消费组</strong></h5><p>Consumer 1</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">消费者接收到消息:topic-&gt; [defaultTopic2] tags-&gt; [defaultTags2],body-&gt; 【hello world!3】消费者接收到消息:topic-&gt; [defaultTopic2] tags-&gt; [defaultTags2],body-&gt; 【hello world!4】消费者接收到消息:topic-&gt; [defaultTopic2] tags-&gt; [defaultTags2],body-&gt; 【hello world!5】消费者接收到消息:topic-&gt; [defaultTopic2] tags-&gt; [defaultTags2],body-&gt; 【hello world!9】消费者接收到消息:topic-&gt; [defaultTopic2] tags-&gt; [defaultTags2],body-&gt; 【hello world!6】消费者接收到消息:topic-&gt; [defaultTopic2] tags-&gt; [defaultTags2],body-&gt; 【hello world!7】消费者接收到消息:topic-&gt; [defaultTopic2] tags-&gt; [defaultTags2],body-&gt; 【hello world!0】消费者接收到消息:topic-&gt; [defaultTopic2] tags-&gt; [defaultTags2],body-&gt; 【hello world!1】消费者接收到消息:topic-&gt; [defaultTopic2] tags-&gt; [defaultTags2],body-&gt; 【hello world!8】消费者接收到消息:topic-&gt; [defaultTopic2] tags-&gt; [defaultTags2],body-&gt; 【hello world!2】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Consumer 2</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">消费者接收到消息:topic-&gt; [defaultTopic2] tags-&gt; [defaultTags2],body-&gt; 【hello world!4】消费者接收到消息:topic-&gt; [defaultTopic2] tags-&gt; [defaultTags2],body-&gt; 【hello world!3】消费者接收到消息:topic-&gt; [defaultTopic2] tags-&gt; [defaultTags2],body-&gt; 【hello world!5】消费者接收到消息:topic-&gt; [defaultTopic2] tags-&gt; [defaultTags2],body-&gt; 【hello world!9】消费者接收到消息:topic-&gt; [defaultTopic2] tags-&gt; [defaultTags2],body-&gt; 【hello world!0】消费者接收到消息:topic-&gt; [defaultTopic2] tags-&gt; [defaultTags2],body-&gt; 【hello world!1】消费者接收到消息:topic-&gt; [defaultTopic2] tags-&gt; [defaultTags2],body-&gt; 【hello world!8】消费者接收到消息:topic-&gt; [defaultTopic2] tags-&gt; [defaultTags2],body-&gt; 【hello world!2】消费者接收到消息:topic-&gt; [defaultTopic2] tags-&gt; [defaultTags2],body-&gt; 【hello world!7】消费者接收到消息:topic-&gt; [defaultTopic2] tags-&gt; [defaultTags2],body-&gt; 【hello world!6】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><u><strong>消费组不同,会重复消费消息</strong></u></p><h5 id="3-复杂情况"><a href="#3-复杂情况" class="headerlink" title="3. 复杂情况"></a>3. 复杂情况</h5><p>假如 <code>defaultTopic4</code>主题,有两个消费组,groupA与groupB</p><p>groupA内有Consumer1 与 Consumer2消费者</p><p>groupB内有Consumer3 消费者</p><p>生产者向<code>defaultTopic4</code>发送10条消息</p><p>那么这么情况下消息会如何分配?</p><p><strong>首先,不同的topic都会接受到全部的消息,也就是groupA与groupB均会收到10条消息。然后每个组将自己得到的10条消息,均衡的转发给不同的消费者。结果就是groupA中的Consumer1和Consumer2各自消费5条消息,而groupB中的Consumer3由于组内只有自己,所以消费10条消息</strong></p><h5 id="4-消费组的模式设置"><a href="#4-消费组的模式设置" class="headerlink" title="4. 消费组的模式设置"></a>4. 消费组的模式设置</h5><p>通过以上的案例,得出结论:默认的一个消费组内,是进行负载均衡消费,但是如果硬要一个组内的所有消费者都能消费到所有数据,该如何去做呢？我们可以通过修改消费组的<strong>消费模式</strong>去做到,可以修改为广播模式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">consumer<span class="token punctuation">.</span><span class="token function">setMessageModel</span><span class="token punctuation">(</span><span class="token class-name">MessageModel</span><span class="token punctuation">.</span>CLUSTERING<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//默认的集群模式,负载均衡消费模式</span>consumer<span class="token punctuation">.</span><span class="token function">setMessageModel</span><span class="token punctuation">(</span><span class="token class-name">MessageModel</span><span class="token punctuation">.</span>BROADCASTING<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//广播模式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="7-同步消息"><a href="#7-同步消息" class="headerlink" title="7. 同步消息"></a>7. 同步消息</h4><p>特性：<strong>及时性</strong>、<strong>可靠性</strong>较强,发送后会等待响应,一般适用一些重要性消息,如涉及到金钱交易相关的消息</p><p>上面我们发送的<strong>基础消息</strong>就是同步消息,所以就不写案例了</p><h4 id="8-异步消息"><a href="#8-异步消息" class="headerlink" title="8. 异步消息"></a>8. 异步消息</h4><p>特性：<strong>效率快</strong>、不会立刻得到响应,但是会有<strong>异步的回调</strong>，通常适用一些 <strong>非特别重要,而且要求效率高</strong>的消息,<strong>异步消息可以大幅度提升系统的吞吐量</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token comment">/**     * 发送异步消息     * @throws Exception     */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">asyncSendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>  producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"asyncTopic"</span><span class="token punctuation">,</span> <span class="token string">"asyncTags"</span><span class="token punctuation">,</span> <span class="token string">"async message"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/** 指定要发送的消息和注册异步回调函数*/</span>  producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SendCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 发送成功后的回调函数     * @param sendResult     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token class-name">SendResult</span> sendResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异步消息发送结果: "</span> <span class="token operator">+</span> sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 发送失败后的回调函数     * @param e     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onException</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消息发送失败: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-单向消息"><a href="#9-单向消息" class="headerlink" title="9. 单向消息"></a>9. 单向消息</h4><p>类似于<strong>UDP</strong>,只负责消息的发送,不管是否发送成功。<strong>效率特别快</strong>,适用一些不重要的消息数据,如<strong>日志收集</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 发送单向消息 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">singleSendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">sendOneway</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"singleTopic"</span><span class="token punctuation">,</span><span class="token string">"单向消息"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-延时消息"><a href="#10-延时消息" class="headerlink" title="10. 延时消息"></a>10. 延时消息</h4><p>特性：消息发送到broker后,消费者无法立刻消费这条消息,在特定的时间间隔后才能消费到这个消息。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 发送延时消息 * RocketMQ支持固定的延时时间,分为1-18个等级 * 1s、5s、10s、30s、1m、2m、3、4、5、6、7、8、9、10、20、30m、1h、2h */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">delaySendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"delayTopic"</span><span class="token punctuation">,</span><span class="token string">"这是一条延时消息"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    message<span class="token punctuation">.</span><span class="token function">setDelayTimeLevel</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置延时等级</span>    <span class="token class-name">SendResult</span> result <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getSendStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">SendStatus</span><span class="token punctuation">.</span>SEND_OK<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"延时消息发送成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11-批量消息"><a href="#11-批量消息" class="headerlink" title="11. 批量消息"></a>11. 批量消息</h4><p>​    以异步消息为例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 批量发送异步消息 * @throws Exception */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">batchAsyncSendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/** 构造十条消息*/</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> messages <span class="token operator">=</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">mapToObj</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"asyncTopic"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"批量异步消息"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/** 发送消息,注册回调*/</span>    producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>messages<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SendCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token class-name">SendResult</span> sendResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sendResult<span class="token punctuation">.</span><span class="token function">getSendStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">SendStatus</span><span class="token punctuation">.</span>SEND_OK<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异步消息批量发送完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onException</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="12-消息过滤"><a href="#12-消息过滤" class="headerlink" title="12. 消息过滤"></a>12. 消息过滤</h4><h5 id="1-tag过滤"><a href="#1-tag过滤" class="headerlink" title="1. tag过滤"></a>1. tag过滤</h5><p><u>在消息发送时,设置不同的tag,在消费者方,就可以根据tag动态的过滤消息</u></p><p>如下案例,启动消费者,监听<code>orders</code>主题,并且指定tag为<code>vip</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">consumerMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>  <span class="token comment">/** 指定要消费的topic，和tags,*表示全部 */</span>  consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"orders"</span><span class="token punctuation">,</span><span class="token string">"vip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/** 注册监听器,处理消息*/</span>  consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>messageList<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    messageList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>message<span class="token operator">-&gt;</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"消费者接收到消息:topic-&gt; [{}] tags-&gt; [{}],body-&gt; 【{}】"</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//开启消费者</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者1号已开启..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先发送一条tag为<code>common</code>的普通消息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  message<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span><span class="token string">"orders"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置主题</span>  message<span class="token punctuation">.</span><span class="token function">setTags</span><span class="token punctuation">(</span><span class="token string">"common"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置tags</span>  message<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"这是一条普通消息"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置消息内容</span>  <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">消费者1号已开启.......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>显然,由于消费者指定的tag为<code>vip</code>,这条普通消息是无法消费到的。</p><hr><p>那么接下来我们发送一条tag为<code>vip</code>的消息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  message<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span><span class="token string">"orders"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置主题</span>  message<span class="token punctuation">.</span><span class="token function">setTags</span><span class="token punctuation">(</span><span class="token string">"vip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置tags</span>  message<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"这是一条Vip消息"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置消息内容</span>  <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">消费者1号已开启...消费者接收到消息:topic-&gt; [orders] tags-&gt; [vip],body-&gt; 【这是一条Vip消息】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一个消费者可以指定消费多个tag, 通过 <code>||</code>符合分割tag名称</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"orders"</span><span class="token punctuation">,</span><span class="token string">"vip || common"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-sql过滤"><a href="#2-sql过滤" class="headerlink" title="2. sql过滤"></a>2. sql过滤</h5><p><u>这种方式也称为语法过滤(属性过滤/语法过滤/SQL过滤)。在消息发送时,可以给消息设置一些K-V键值属性,如 <code>mtype</code> = <code>t1</code> ,在消费者就可以通过类似于SQL语法进行消息的过滤。</u></p><p>如下案例,消息携带 <code>age</code>字段,启用一个消费者,只消费<code>age</code>大于18的消息</p><p>消费者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"sqlFilterTopic"</span><span class="token punctuation">,</span> <span class="token class-name">MessageSelector</span><span class="token punctuation">.</span><span class="token function">bySql</span><span class="token punctuation">(</span><span class="token string">"age &gt; 18"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生产者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"sqlFilterTopic"</span><span class="token punctuation">,</span> <span class="token string">"sql过滤消息"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/** 设置消息属性*/</span>  message<span class="token punctuation">.</span><span class="token function">putUserProperty</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token string">"16"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先发送一条<code>age</code>为16的消息</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">消费者1号已开启......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果并未收到任何信息,接下来发送一条<code>age</code>为22的消息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">消费者<span class="token number">1</span>号已开启<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>额…好像也没有收到,这是为什么呢?</p><p>查阅相关资料后发现,RocketMQ默认是没有开启SQL过滤的功能,需要我们手动开启下</p><p>在 broker.conf【你使用的那个配置文件】配置文件,添加如下配置</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token constant">enablePropertyFilter</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后重启broker,在RocketMQ的console下可以看到更新后的值为true。</p><p><img src="https://movies-bucket.oss-cn-beijing.aliyuncs.com/996cfb61d21b4d65bbe7a5427bf87f13.png"></p><p>接下来再次发送消息</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">消费者接收到消息:topic-&gt; [sqlFilterTopic] tags-&gt; [null],body-&gt; 【sql过滤消息】<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到,消费者确实收到了消息</p><hr><h4 id="13-SpringBoot整合"><a href="#13-SpringBoot整合" class="headerlink" title="13. SpringBoot整合"></a>13. SpringBoot整合</h4><p>导入依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- RocketMQ与SpringBoot整合--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.rocketmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>rocketmq-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置文件</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># RocketMQ相关配置</span><span class="token key atrule">rocketmq</span><span class="token punctuation">:</span>  <span class="token key atrule">name-server</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">9876</span> <span class="token comment">#MQ地址 集群使用,分割</span>  <span class="token comment">#生产者配置</span>  <span class="token key atrule">producer</span><span class="token punctuation">:</span>    <span class="token key atrule">group</span><span class="token punctuation">:</span> group<span class="token punctuation">-</span>one <span class="token comment">#生产者分组</span>    <span class="token key atrule">send-message-timeout</span><span class="token punctuation">:</span> <span class="token number">3000</span> <span class="token comment">#发送消息超时时间 单位ms 默认3000</span>    <span class="token key atrule">compress-message-body-threshold</span><span class="token punctuation">:</span> <span class="token number">4096</span> <span class="token comment">#消息压缩阀值，当消息体的大小超过该阀值后，进行消息压缩。默认为 4 * 1024B</span>    <span class="token key atrule">max-message-size</span><span class="token punctuation">:</span> <span class="token number">4194304</span> <span class="token comment">#消息体最大值上限大小 默认为 4 * 1024 * 1024B</span>    <span class="token key atrule">retry-times-when-send-failed</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token comment"># 同步发送消息时，失败重试次数。默认为2次</span>    <span class="token key atrule">retry-times-when-send-async-failed</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token comment"># 异步发送消息时，失败重试次数 默认为2次</span>    <span class="token key atrule">retry-next-server</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 发送消息给 Broker 时，如果发送失败，是否重试另外一台 Broker 。默认为 false</span>    <span class="token key atrule">enable-msg-trace</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否开启消息轨迹功能</span>    <span class="token key atrule">customized-trace-topic</span><span class="token punctuation">:</span> RMQ_SYS_TRACE_TOPIC <span class="token comment"># 自定义消息轨迹的 Topic 。默认为 RMQ_SYS_TRACE_TOPIC</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生产者发送消息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lxz<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">DefaultMQProducer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RocketMQTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span></span><span class="token class-name">Message</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">MessageBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token comment">/** * @author lx Zhang. * @date 2021/6/18 4:46 下午 */</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/rocket"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendController</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 基础producer,为了方便习惯用于原生包的开发者     */</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">DefaultMQProducer</span> producer<span class="token punctuation">;</span>    <span class="token comment">/**     * SpringBoot基于原生包 提供的增强版client     */</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RocketMQTemplate</span> rocketMQTemplate<span class="token punctuation">;</span>    <span class="token comment">/**     * 发送消息     * @param message 消息内容     * @param topic   主题     * @return     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/send"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span><span class="token class-name">String</span> topic<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> payload <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rocketMQTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发送消息: <a href="http://localhost:8989/rocket/send?message=%E5%98%BF%E5%98%BF&amp;topic=springTopic">http://localhost:8989/rocket/send?message=%E5%98%BF%E5%98%BF&amp;topic=springTopic</a></p><p>消费者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lxz<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>listener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RocketMQMessageListener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RocketMQListener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token comment">/** * 消费者监听器 * @author lx Zhang. * @date 2021/6/18 5:12 下午 */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RocketMQMessageListener</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">"springTopic"</span><span class="token punctuation">,</span> consumerGroup <span class="token operator">=</span> <span class="token string">"defaultGroup"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">RocketMQListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到消息: "</span> <span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-发送各种消息"><a href="#1-发送各种消息" class="headerlink" title="1. 发送各种消息"></a>1. 发送各种消息</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zlx<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>zlx<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">MessageModel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">SendCallback</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">SendResult</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RocketMQTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span></span><span class="token class-name">Message</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">MessageBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span></span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token comment">/** * 发送消息业务 * @author L * @date 2020/9/24 */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendProducer</span> <span class="token punctuation">{</span>    <span class="token comment">/** MQ 工具模版类*/</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RocketMQTemplate</span> rocketMQTemplate<span class="token punctuation">;</span>    <span class="token comment">/***     * @apiNote 关于序列化     * 消息体如果是 String 则直接获其byte内容     * 消息体如果是 byte[] 则直接使用     * 消息体是复杂类型(object) 则使用MessageConverter 转换字符串,再获取byte[]数据     */</span>    <span class="token comment">/***     * 发送同步消息     * @author L     * @date 2020/9/24 15:05     * @param model 消息体     * @return org.apache.rocketmq.client.producer.SendResult     **/</span>    <span class="token keyword">public</span> <span class="token class-name">SendResult</span> <span class="token function">syncSendMessage</span><span class="token punctuation">(</span><span class="token class-name">MessageModel</span> model<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> rocketMQTemplate<span class="token punctuation">.</span><span class="token function">syncSend</span><span class="token punctuation">(</span><span class="token class-name">MessageModel</span><span class="token punctuation">.</span>TOPIC<span class="token punctuation">,</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 发送异步消息     * @author L     * @date 2020/9/24 15:38     * @param model, callback:异步回调通知     **/</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asyncSendMessage</span><span class="token punctuation">(</span><span class="token class-name">MessageModel</span> model<span class="token punctuation">,</span> <span class="token class-name">SendCallback</span> callback<span class="token punctuation">)</span><span class="token punctuation">{</span>        rocketMQTemplate<span class="token punctuation">.</span><span class="token function">asyncSend</span><span class="token punctuation">(</span><span class="token class-name">MessageModel</span><span class="token punctuation">.</span>TOPIC<span class="token punctuation">,</span>model<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 发送单向消息(只负责发送,可靠性较低)     * @author L     * @date 2020/9/24 15:39     * @param model 消息体     **/</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">oneWaySendMessage</span><span class="token punctuation">(</span><span class="token class-name">MessageModel</span> model<span class="token punctuation">)</span><span class="token punctuation">{</span>        rocketMQTemplate<span class="token punctuation">.</span><span class="token function">sendOneWay</span><span class="token punctuation">(</span><span class="token class-name">MessageModel</span><span class="token punctuation">.</span>TOPIC<span class="token punctuation">,</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 批量发送消息     * @apiNote 消息体必须是 org.springframework.messaging.Message定义的消息体     * @author L     * @date 2020/9/24 16:58     * @param ids     * @return org.apache.rocketmq.client.producer.SendResult     **/</span>    <span class="token keyword">public</span> <span class="token class-name">SendResult</span> <span class="token function">batchSend</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> ids<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">DateTimeFormatter</span> formatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> messageList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>ids<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> id <span class="token operator">:</span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">MessageModel</span> model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageModel</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将自定义消息包装为spring的Message</span>            messageList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//批量发送同步消息</span>        <span class="token keyword">return</span> rocketMQTemplate<span class="token punctuation">.</span><span class="token function">syncSend</span><span class="token punctuation">(</span><span class="token class-name">MessageModel</span><span class="token punctuation">.</span>TOPIC<span class="token punctuation">,</span>messageList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 发送延迟消息     * @author L     * @date 2020/9/25 15:49     * @param delayLevel 延迟时长 1-18个等级     *                   1s、5s、10s、30s、1m、2m、3、4、5、6、7、8、9、10、20、30m、1h、2h     * @return org.apache.rocketmq.client.producer.SendResult     **/</span>    <span class="token keyword">public</span> <span class="token class-name">SendResult</span> <span class="token function">delaySend</span><span class="token punctuation">(</span><span class="token class-name">MessageModel</span> model<span class="token punctuation">,</span><span class="token keyword">int</span> delayLevel<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageModel</span><span class="token punctuation">&gt;</span></span> message <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rocketMQTemplate<span class="token punctuation">.</span><span class="token function">syncSend</span><span class="token punctuation">(</span><span class="token class-name">MessageModel</span><span class="token punctuation">.</span>TOPIC<span class="token punctuation">,</span>message<span class="token punctuation">,</span><span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span>delayLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-消费者过滤"><a href="#2-消费者过滤" class="headerlink" title="2. 消费者过滤"></a>2. 消费者过滤</h5><p>tag过滤</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RocketMQMessageListener</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">"springTopic"</span><span class="token punctuation">,</span> selectorExpression <span class="token operator">=</span> <span class="token string">"vip || common"</span><span class="token punctuation">,</span>consumerGroup <span class="token operator">=</span> <span class="token string">"defaultGroup"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">RocketMQListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到消息: "</span> <span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sql过滤</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RocketMQMessageListener</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">"springTopic"</span><span class="token punctuation">,</span> selectorType <span class="token operator">=</span> <span class="token class-name">SelectorType</span><span class="token punctuation">.</span>SQL92<span class="token punctuation">,</span>selectorExpression <span class="token operator">=</span> <span class="token string">"age &gt; 18"</span><span class="token punctuation">,</span>consumerGroup <span class="token operator">=</span> <span class="token string">"defaultGroup"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">RocketMQListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到消息: "</span> <span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="14-如何保证消息的顺序性"><a href="#14-如何保证消息的顺序性" class="headerlink" title="14. 如何保证消息的顺序性"></a>14. 如何保证消息的顺序性</h4><p>RocketMQ的<code>Topic</code>主题包含多个<code>queue</code>,默认为4个,也就是说,往同一个<code>topic</code>中依次发送多条消息,不一定是有序执行,但是消息在<code>queue</code>中是有序的, 那么如何保证多条消息执行的有序性呢,很简单,只要保证这多条消息都发送同一个<code>topic</code>并且同一个<code>queue</code>中就能保证消息的有序性。</p><p>下面写个练习。发送三组相关联的订单消息要求相同的订单ID,消息要有序消费</p><p>order实体,只含有两个字段,id和desc</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lxz<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>model</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span><span class="token punctuation">;</span><span class="token comment">/** * 模拟订单表 * @author lx Zhang. * @date 2021/6/19 3:44 下午 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token keyword">long</span> orderId<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderId <span class="token operator">=</span> orderId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> orderId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> orderId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderId</span><span class="token punctuation">(</span><span class="token keyword">long</span> orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderId <span class="token operator">=</span> orderId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Order{"</span> <span class="token operator">+</span>                <span class="token string">"orderId="</span> <span class="token operator">+</span> orderId <span class="token operator">+</span>                <span class="token string">", desc='"</span> <span class="token operator">+</span> desc <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><u>首先通过RocketMQ的queue选择器,在消息发送时,通过订单ID,对queue的数量进行取模,将相同的ID消息发送到同一个queue中</u></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">orderlySendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> orderGroup <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">"创建订单"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token string">"创建订单"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span> <span class="token string">"创建订单"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span> <span class="token string">"支付订单"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token string">"支付订单"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">"支付订单"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">"发货"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token string">"发货"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token string">"完成订单"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span> <span class="token string">"发货"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">"完成订单"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span> <span class="token string">"完成订单"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Order</span> order <span class="token operator">:</span> orderGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"sortTopic"</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * RocketMQ queue选择器         * 根据订单ID,对queue的数量进行取模,来决定发送到哪个queue         * @param mqs queue 列表         * @param msg         * @param arg         * @return         */</span>        <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token punctuation">(</span>mqs<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> arg<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">Integer</span> orderId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> order<span class="token punctuation">.</span><span class="token function">getOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> mqs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderId <span class="token operator">%</span> mqs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><u>消费者这边也需要调整,启用顺序监听器,也就是一个线程只监听一个queue,串行化消费消息</u></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 消费者顺序性消费消息,一个线程只监听一个queue推送的消息     * @throws Exception     */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">consumerOrderMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>  <span class="token comment">/** 指定要消费的topic，和tags,*表示全部 */</span>  consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"sortTopic"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/** 注册监听器,处理消息*/</span>  consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MessageListenerOrderly</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>messageList<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    messageList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>message <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"消费者接收到消息:topic-&gt; [{}] tags-&gt; [{}],body-&gt; 【{}】"</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">ConsumeOrderlyStatus</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//开启消费者</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者1号已开启..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">消费者接收到消息:topic-&gt; [sortTopic] tags-&gt; [null],body-&gt; 【Order{orderId=1001, desc='创建订单'}】消费者接收到消息:topic-&gt; [sortTopic] tags-&gt; [null],body-&gt; 【Order{orderId=1002, desc='创建订单'}】消费者接收到消息:topic-&gt; [sortTopic] tags-&gt; [null],body-&gt; 【Order{orderId=1002, desc='支付订单'}】消费者接收到消息:topic-&gt; [sortTopic] tags-&gt; [null],body-&gt; 【Order{orderId=1003, desc='创建订单'}】消费者接收到消息:topic-&gt; [sortTopic] tags-&gt; [null],body-&gt; 【Order{orderId=1001, desc='支付订单'}】消费者接收到消息:topic-&gt; [sortTopic] tags-&gt; [null],body-&gt; 【Order{orderId=1003, desc='支付订单'}】消费者接收到消息:topic-&gt; [sortTopic] tags-&gt; [null],body-&gt; 【Order{orderId=1001, desc='发货'}】消费者接收到消息:topic-&gt; [sortTopic] tags-&gt; [null],body-&gt; 【Order{orderId=1002, desc='发货'}】消费者接收到消息:topic-&gt; [sortTopic] tags-&gt; [null],body-&gt; 【Order{orderId=1002, desc='完成订单'}】消费者接收到消息:topic-&gt; [sortTopic] tags-&gt; [null],body-&gt; 【Order{orderId=1003, desc='发货'}】消费者接收到消息:topic-&gt; [sortTopic] tags-&gt; [null],body-&gt; 【Order{orderId=1001, desc='完成订单'}】消费者接收到消息:topic-&gt; [sortTopic] tags-&gt; [null],body-&gt; 【Order{orderId=1003, desc='完成订单'}】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到,不同的订单ID,执行顺序都是 <code>创建订单</code>-&gt;<code>支付订单 </code>-&gt; <code>发货</code> -&gt; <code>完成订单</code></p><p>总结: 保证消息的顺序性,就是依靠生产者发送消息时,通过queue选择器,将关系相连的消息发送至同一个queue中,然后消费者这边通过每个线程都监听一个queue,进行串行化消费即可.</p><h4 id="15-事务消息"><a href="#15-事务消息" class="headerlink" title="15. 事务消息"></a>15. 事务消息</h4><p>执行流程</p><p><img src="https://movies-bucket.oss-cn-beijing.aliyuncs.com/99f695394e3346e4928874823a028d07.png"></p><p>RocketMQ事务消息执行流程简述</p><ol><li>生产者发送事务消息至Broker</li><li>Broker返回状态OK给生产者;(注意,此时事务消息还未真正 发送到Broker)</li><li>执行本地事务 <strong>executeLocalTransaction()</strong>,该方法返回三个状态<ol><li>COMMIT_MESSAGE 提交事务消息</li><li>ROLLBACK_MESSAGE 回滚事务消息</li><li>UNKNOW 未知状态</li></ol></li><li>如果本地事务响应了COMMIT状态,那么该条消息将会被真正发送至Broker,从而完成整个事务流程。</li><li>如果本地事务响应了ROLLBACK状态,那么Broker将会删除这条还未完成的事务消息,从而结束这个事务流程。</li><li>如果本地事务响应了UNKNOW状态,将会执行本地事务的二次回调检查 <strong>checkLocalTransaction()</strong></li><li>在二次回调检查中,会重新返回一个状态,一般在这里就决定这条消息的最终成功与失败.</li></ol><p>写一个简单的案例: </p><ol><li>向<code>txTopic</code>发送一条事务消息,携带一个<code>myId</code>属性</li><li>如果<code>myId</code> = 1,则执行 本地事务的二次检查,在二次检查中进行提交</li><li>如果 <code>myId</code> = 2 则直接回滚,抛出掉这条消息</li><li>如果 <code>myid</code> = 其他 则直接提交</li></ol><p>消费者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lxz<span class="token punctuation">.</span>consumer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StrUtil</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span></span><span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">;</span><span class="token comment">/** * 事务消息 消费者 * @author lx Zhang. * @date 2021/6/20 12:44 下午 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TxConsumer</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">txConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"defaultGroup"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"localhost:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"txTopic"</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>messageList<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>      messageList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>message<span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"消费者接收到消息:topic-&gt; [{}] tags-&gt; [{}],body-&gt; 【{}】"</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务消费者已启动...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token function">txConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生产者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lxz<span class="token punctuation">.</span>producer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StrUtil</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">Message</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">MessageExt</span><span class="token punctuation">;</span><span class="token comment">/** * 事务消息生产者 * @author lx Zhang. * @date 2021/6/20 12:24 下午 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TxProducer</span> <span class="token punctuation">{</span>  <span class="token comment">/**     * 发送事务消息     * @Author lx Zhang.     * @Date 2021/6/20 12:25 下午     **/</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sendTxMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token comment">/** 实例化一个事务生产者*/</span>    <span class="token class-name">TransactionMQProducer</span> txProducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionMQProducer</span><span class="token punctuation">(</span><span class="token string">"defaultGroup"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    txProducer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"localhost:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/** 注册事务消息的回调监听*/</span>    txProducer<span class="token punctuation">.</span><span class="token function">setTransactionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TransactionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">/**             * 事务消息发送至MQ后的回调函数             * 通常会执行一些消息持久化(本地事务),如存储到Mysql,存储成功才会响应COMMIT,否则就是回滚             *             * @apiNote 举例从消息头中`myId`获取数据 1=不做操作 2=回滚 其他提交             * @param msg 事务消息             * @param arg             * @return COMMIT_MESSAGE: 事务的提交 | ROLLBACK_MESSAGE 事务的回滚,MQ将会删除这条事务消息 | UNKNOW 执行事务回调检查             */</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token class-name">LocalTransactionState</span> <span class="token function">executeLocalTransaction</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">,</span> <span class="token class-name">Object</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> myId <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"myId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>myId<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment">//TODO 位置操作,将操作权转交至 本地事务二次检查中</span>          <span class="token keyword">return</span> <span class="token class-name">LocalTransactionState</span><span class="token punctuation">.</span>UNKNOW<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>myId<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment">//TODO 直接移除该条事务消息</span>          <span class="token keyword">return</span> <span class="token class-name">LocalTransactionState</span><span class="token punctuation">.</span>ROLLBACK_MESSAGE<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token comment">//TODO 执行消息的持久化,如持久化到 DB、Cache</span>          <span class="token keyword">return</span> <span class="token class-name">LocalTransactionState</span><span class="token punctuation">.</span>COMMIT_MESSAGE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment">/**             * 本地事务消息的二次检查,只有上面方法响应了LocalTransactionState.UNKNOW 状态的消息才会执行到这里.             * @param msg             * @return             */</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token class-name">LocalTransactionState</span> <span class="token function">checkLocalTransaction</span><span class="token punctuation">(</span><span class="token class-name">MessageExt</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"【{}】消息执行本地事务二次检查"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//TODO 查询本地事务,该条消息是否被持久化等操作,再继续返回状态</span>        <span class="token keyword">return</span> <span class="token class-name">LocalTransactionState</span><span class="token punctuation">.</span>COMMIT_MESSAGE<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/** 启动生产者*/</span>    txProducer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Message</span> txMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"txTopic"</span><span class="token punctuation">,</span> <span class="token string">"这是一条事务消息"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//消息携带一个 myId</span>    txMessage<span class="token punctuation">.</span><span class="token function">putUserProperty</span><span class="token punctuation">(</span><span class="token string">"myId"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TransactionSendResult</span> transactionSendResult <span class="token operator">=</span> txProducer<span class="token punctuation">.</span><span class="token function">sendMessageInTransaction</span><span class="token punctuation">(</span>txMessage<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>transactionSendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token function">sendTxMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果</p><p>发送 <code>myid</code> = 1的事务消息,会在事务回调中响应<code>UNKNOW</code>状态,随后进入 本地事务的二次回调,然后进行 <code>COMMIT</code>,然后就会被发送至Broker 被消费者所消费。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">发送消息<span class="token operator">:</span>这是一条事务消息 myId<span class="token operator">=</span><span class="token number">1</span><span class="token class-name">SendResult</span> <span class="token punctuation">[</span>sendStatus<span class="token operator">=</span>SEND_OK<span class="token punctuation">,</span> msgId<span class="token operator">=</span><span class="token number">7F</span><span class="token number">000001076</span>B18B4AAC264B71AA00000<span class="token punctuation">,</span> offsetMsgId<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span> messageQueue<span class="token operator">=</span><span class="token class-name">MessageQueue</span> <span class="token punctuation">[</span>topic<span class="token operator">=</span>txTopic<span class="token punctuation">,</span> brokerName<span class="token operator">=</span><span class="token class-name">L</span><span class="token punctuation">.</span>local<span class="token punctuation">,</span> queueId<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> queueOffset<span class="token operator">=</span><span class="token number">19</span><span class="token punctuation">]</span>【这是一条事务消息 myId<span class="token operator">=</span><span class="token number">1</span>】消息执行本地事务二次检查<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">消费者接收到消息<span class="token operator">:</span>topic<span class="token operator">-&gt;</span> <span class="token punctuation">[</span>txTopic<span class="token punctuation">]</span> tags<span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">,</span>body<span class="token operator">-&gt;</span> 【这是一条事务消息 myId<span class="token operator">=</span><span class="token number">1</span>】<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发送<code>myId</code> = 2 的事务消息,将会在回调中响应 <code>ROLLBACK</code>状态,消息就会直接被删除。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">发送消息<span class="token operator">:</span>这是一条事务消息 myId<span class="token operator">=</span><span class="token number">2</span><span class="token class-name">SendResult</span> <span class="token punctuation">[</span>sendStatus<span class="token operator">=</span>SEND_OK<span class="token punctuation">,</span> msgId<span class="token operator">=</span><span class="token number">7F</span><span class="token number">000001078818</span>B4AAC264B97B730000<span class="token punctuation">,</span> offsetMsgId<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span> messageQueue<span class="token operator">=</span><span class="token class-name">MessageQueue</span> <span class="token punctuation">[</span>topic<span class="token operator">=</span>txTopic<span class="token punctuation">,</span> brokerName<span class="token operator">=</span><span class="token class-name">L</span><span class="token punctuation">.</span>local<span class="token punctuation">,</span> queueId<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> queueOffset<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发送<code>myId</code> = 其他数据的事务消息,将会在回调中响应<code>COMMIT</code>状态,消息将会被直接发送至Broker,并且消费</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">发送消息<span class="token operator">:</span>这是一条事务消息 myId<span class="token operator">=</span><span class="token number">3</span><span class="token class-name">SendResult</span> <span class="token punctuation">[</span>sendStatus<span class="token operator">=</span>SEND_OK<span class="token punctuation">,</span> msgId<span class="token operator">=</span><span class="token number">7F</span><span class="token number">000001079818</span>B4AAC264BB1FD30000<span class="token punctuation">,</span> offsetMsgId<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span> messageQueue<span class="token operator">=</span><span class="token class-name">MessageQueue</span> <span class="token punctuation">[</span>topic<span class="token operator">=</span>txTopic<span class="token punctuation">,</span> brokerName<span class="token operator">=</span><span class="token class-name">L</span><span class="token punctuation">.</span>local<span class="token punctuation">,</span> queueId<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> queueOffset<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">消费者接收到消息<span class="token operator">:</span>topic<span class="token operator">-&gt;</span> <span class="token punctuation">[</span>txTopic<span class="token punctuation">]</span> tags<span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">,</span>body<span class="token operator">-&gt;</span> 【这是一条事务消息 myId<span class="token operator">=</span><span class="token number">3</span>】<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h4 id="16-集群搭建"><a href="#16-集群搭建" class="headerlink" title="16. 集群搭建"></a>16. 集群搭建</h4>]]></content>
      
      
      <categories>
          
          <category> RocketMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java【反射】</title>
      <link href="2021/06/03/Java%E3%80%90%E5%8F%8D%E5%B0%84%E3%80%91/"/>
      <url>2021/06/03/Java%E3%80%90%E5%8F%8D%E5%B0%84%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>反射机制在程序运行时，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性。这种 动态的获取信息 以及 动态调用对象的方法 的功能称为 java 的反射机制,<u>Java本身是静态语言,但是通过<code>反射</code>拥有了动态语言的特性</u>。</strong></p><hr><p>基础类准备</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 学生类 * @author lx Zhang. * @date 2021/6/3 1:15 下午 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Integer</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-传统方式"><a href="#1-传统方式" class="headerlink" title="1. 传统方式"></a>1. 传统方式</h3><p>一般情况下，我们使用某个类时必定知道它是什么类，是用来做什么的。于是我们直接对这个类进行实例化，之后使用这个类对象进行操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//直接初始化并且赋值</span>student<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-反射方法"><a href="#2-反射方法" class="headerlink" title="2. 反射方法"></a>2. 反射方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//通过反射方式,根据全类名进行创建其实例对象,&lt;?&gt;表示未知的类型</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.lxz.reflect.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建实例</span><span class="token class-name">Object</span> instance <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-反射常用API"><a href="#3-反射常用API" class="headerlink" title="3.反射常用API"></a>3.反射常用API</h3><p>在反射中，要获取一个类或调用一个类的方法，我们首先需要获取到该类的 Class 对象。</p><p>在 Java API 中，获取 Class 类对象有三种方法：</p><ol><li><p><strong>通过反射 Class.forName静态方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.lxz.reflect.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>数据类型.class</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringClass <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>通过类对象的getClass()方法获取</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> studentClass <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="1-通过反射创建对象"><a href="#1-通过反射创建对象" class="headerlink" title="1.通过反射创建对象"></a>1.通过反射创建对象</h4><p>第一种: 通过<code>Class</code>对象的<code>newInstance()</code>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.lxz.reflect.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> instance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clss <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token class-name">Student</span> instance1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> clss<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种: 通过<code>Constructor</code>对象的<code>newInstance()</code>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1. 通过Class的Constructor创建对象,这里使用的是无参构造</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.lxz.reflect.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> constructor <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> instance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-通过反射获取构造函数"><a href="#2-通过反射获取构造函数" class="headerlink" title="2.通过反射获取构造函数"></a>2.通过反射获取构造函数</h4><p>获取无参构造函数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.lxz.reflect.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> constructor <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> instance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>获取全参构造函数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1. 通过Class的Constructor创建对象</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.lxz.reflect.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.根据带参函数的参数列表 指定类型</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> constructor <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> instance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-通过反射获取属性和值"><a href="#3-通过反射获取属性和值" class="headerlink" title="3.通过反射获取属性和值"></a>3.通过反射获取属性和值</h4><p><u>通过反射默认情况无法获取<code>private</code>修饰的属性</u></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//在获取值之前设置</span>field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>调用<code>Field.setAccessible(true)</code>的意思是，别管这个字段是不是<code>public</code>，一律允许访问。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1. 通过Class的Constructor创建对象</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.lxz.reflect.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> instance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.获取属性Class</span><span class="token class-name">Field</span> field <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.通过属性获取对象的值</span><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-反射获取所有属性和值"><a href="#4-反射获取所有属性和值" class="headerlink" title="4.反射获取所有属性和值"></a>4.反射获取所有属性和值</h4><p><code>cls.getFields();</code>方法可以获取 Class 类的属性，但无法获取私有属性。</p><p>而如果使用 Class 对象的 <code>getDeclaredFields()</code> 方法则可以获取包括私有属性在内的所有属性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.lxz.reflect.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> constructor <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> instance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"小张"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"河北"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> f <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f <span class="token operator">+</span> <span class="token string">"---&gt;"</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">public java.lang.String com.lxz.reflect.Student.name---&gt;小张public java.lang.Integer com.lxz.reflect.Student.age---&gt;18public java.lang.String com.lxz.reflect.Student.address---&gt;河北<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="5-通过反射设置属性值"><a href="#5-通过反射设置属性值" class="headerlink" title="5. 通过反射设置属性值"></a>5. 通过反射设置属性值</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.lxz.reflect.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> o <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取name属性,并且设置Value</span><span class="token class-name">Field</span> field <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-通过反射调用方法"><a href="#6-通过反射调用方法" class="headerlink" title="6.通过反射调用方法"></a>6.通过反射调用方法</h4><p><strong>1. 调用无参数方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hi i name is "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1. 通过Class的Constructor创建对象</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.lxz.reflect.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2. 获取对象实例</span><span class="token class-name">Object</span> o <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.获取方法Class对象,没有参数</span><span class="token class-name">Method</span> method <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"sayHello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.执行获取到的method</span>method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. 调用带有参数方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hi i name is"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1. 通过Class的Constructor创建对象</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.lxz.reflect.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2. 获取对象实例</span><span class="token class-name">Object</span> o <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.获取方法Class对象,指定参数类型</span><span class="token class-name">Method</span> method <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"sayHi"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.执行获取到的method,携带参数</span>method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token string">"法外狂徒张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3. 调用带参数带返回值的方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">appendName</span><span class="token punctuation">(</span><span class="token class-name">String</span> str1<span class="token punctuation">,</span><span class="token class-name">String</span> str2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> str1 <span class="token operator">+</span> str2<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1. 通过Class的Constructor创建对象</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.lxz.reflect.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2. 获取对象实例</span><span class="token class-name">Object</span> o <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.获取方法Class对象,指定参数类型</span><span class="token class-name">Method</span> method <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"appendName"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.执行获取到的method,携带参数</span><span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4. 调用静态方法</strong></p><p>如果获取到的Method表示一个静态方法，调用静态方法时，由于无需指定实例对象，所以<code>invoke</code>方法传入的第一个参数永远为<code>null</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i now age is "</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1. 通过Class的Constructor创建对象</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.lxz.reflect.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2. 获取对象实例</span><span class="token class-name">Object</span> o <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.获取方法Class对象,指定参数类型</span><span class="token class-name">Method</span> method <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.执行获取到的method,携带参数</span>method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-通过反射获取继承关系"><a href="#7-通过反射获取继承关系" class="headerlink" title="7. 通过反射获取继承关系"></a>7. 通过反射获取继承关系</h4><p><strong>1. 获取父类<code>Class</code></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.lxz.reflect.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> superclass <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>2. 获取实现的接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.lxz.reflect.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> item <span class="token operator">:</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3. 获取注解</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.lxz.reflect.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> annotations <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Annotation</span> annotation <span class="token operator">:</span> annotations<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotation<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习之旅</title>
      <link href="2021/05/28/Redis%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/"/>
      <url>2021/05/28/Redis%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Redis是一种开放源代码（BSD许可）的内存中数据结构存储，用作数据库，缓存和消息代理。Redis提供数据结构，例如字符串，哈希，列表，集合，带范围查询的排序集合，位图，超日志，地理空间索引和流。Redis具有内置的复制，Lua脚本，LRU驱逐，事务和不同级别的磁盘持久性，并通过Redis Sentinel和Redis Cluster自动分区提供了高可用性。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget https://download.redis.io/releases/redis-6.0.8.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>gcc需要升级到高版本</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo yum install centos-release-sclsudo yum install devtoolset-7-gcc*scl enable devtoolset-7 bashwhich gccgcc --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入安装目录进行编译安装</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">makemake install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>默认会将可执行文件安装到 <code>/usr/local/bin</code>目录</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">-rwxr-xr-x 1 root root 4796344 5月  28 17:11 redis-benchmark-rwxr-xr-x 1 root root 9059720 5月  28 17:11 redis-check-aof-rwxr-xr-x 1 root root 9059720 5月  28 17:11 redis-check-rdb-rwxr-xr-x 1 root root 5047424 5月  28 17:11 redis-clilrwxrwxrwx 1 root root      12 5月  28 17:11 redis-sentinel -&gt; redis-server-rwxr-xr-x 1 root root 9059720 5月  28 17:11 redis-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>redis-benchmark : 性能测试工具,可以在自己计算机运行,测试性能如何</p><p>redis-check-aof: 修复aof文件</p><p>redis-check-rdb: 修复rdb文件</p><p>redis-sentinel : 集群使用</p><p>redis-server: 启动服务命令</p><p>redis-cli: 客户端</p><p><strong>后台启动服务端</strong></p><p>将配置文件拷贝到 etc目录</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cp redis.conf /etc/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改redis.conf文件</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">bind 0.0.0.0#支持后台启动daemonize yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>启动时指定配置文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">redis-server /etc/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>后续重写….</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 缓存中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法【排序算法】</title>
      <link href="2021/05/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E3%80%90%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E3%80%91/"/>
      <url>2021/05/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E3%80%90%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h4 id="1-什么是排序"><a href="#1-什么是排序" class="headerlink" title="1.什么是排序?"></a>1.什么是排序?</h4><p><u>排序是计算机内经常进行的一种操作，其目的是将一组“无序”的记录序列调整为“有序”的记录序列。分<a href="https://baike.baidu.com/item/%E5%86%85%E9%83%A8%E6%8E%92%E5%BA%8F">内部排序</a>和<a href="https://baike.baidu.com/item/%E5%A4%96%E9%83%A8%E6%8E%92%E5%BA%8F">外部排序</a>，若整个排序过程不需要访问外存便能完成，则称此类排序问题为内部排序。反之，若参加排序的记录数量很大，整个序列的排序过程不可能在<a href="https://baike.baidu.com/item/%E5%86%85%E5%AD%98/103614">内存</a>中完成，则称此类排序问题为外部排序。内部排序的过程是一个逐步扩大记录的有序序列长度的过程。</u></p><p><strong>将杂乱无章的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%85%83%E7%B4%A0">数据元素</a>，通过一定的方法按<a href="https://baike.baidu.com/item/%E5%85%B3%E9%94%AE%E5%AD%97">关键字</a>顺序排列的过程叫做排序</strong></p><p><strong>排序分类</strong></p><ul><li><p>稳定排序</p><p><u>假设在待排序的文件中，存在两个或两个以上的记录具有相同的关键字，在</u></p><p><u>用某种排序法排序后，若这些相同关键字的元素的相对次序仍然不变，则这种排序方法</u></p><p><u>是稳定的。其中冒泡，插入，基数，归并属于稳定排序，选择，快速，希尔，归属于不稳定排序。</u></p></li><li><p>就地排序</p><p><u>若<a href="https://baike.baidu.com/item/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95">排序算法</a>所需的辅助空间并不依赖于问题的规模n，即辅助空间为O（1），</u></p><p><u>则称为就地排序。</u></p></li></ul><h4 id="2-十大排序"><a href="#2-十大排序" class="headerlink" title="2.十大排序"></a>2.十大排序</h4><p><img src="https://movies-bucket.oss-cn-beijing.aliyuncs.com/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F.png"></p><p>冒泡、选择、插入、归并、快速、希尔、堆排序,属于<span style="color:red">比较排序(Comparsion Sort)</span></p><h5 id="1-冒泡排序-升序"><a href="#1-冒泡排序-升序" class="headerlink" title="1.冒泡排序(升序)"></a>1.冒泡排序(升序)</h5><p>从第一个元素开始,依次与后面相邻的元素进行比较,如果前者比后者大,就交换位置,反之无需操作,直至比较到最后一个元素,<strong>每一轮比较完成后,都会获取这轮中最大的元素,并且依次排到末尾</strong></p><p><strong>优化技巧</strong></p><ol><li><p>如果序列本身就是有序的,提前结束循环</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 冒泡排序 * @Author lx Zhang. * @Date 2021/5/25 9:12 下午 * @param  array 需要排序的数组 **/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">BubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//控制比较多少轮</span>        <span class="token keyword">boolean</span> isAsc <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//标记这一轮排序是否已经提前排列完成,默认是true,如果进行过比较,就表示还未排序完成</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//内层循环,比较元素</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//交换</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                isAsc <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isAsc<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//已经是有序的排列,提前结束循环</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果序列本身尾部部分元素已经是有序,可以记录最后一次交换的位置,减少比较次数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 冒泡排序优化二 * @Author lx Zhang. * @Date 2021/5/25 9:12 下午 * @param  array 需要排序的数组 **/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">BubbleSort2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//控制比较多少轮</span>           <span class="token comment">//标记位初始值为1,这个初始值1存在的价值,只是为了一种情况所准备,就是序列本身就是一个完全有序的序列,那么就会执行一轮比较</span>        <span class="token keyword">int</span> lastIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//内层循环,比较元素</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//交换</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                lastIndex <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">//记录这一轮最后一次交换的位置</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        j <span class="token operator">=</span> lastIndex<span class="token punctuation">;</span> <span class="token comment">//赋值到j,表示只需要遍历的轮数缩小到了lastIndex,无需比较到(序列长度-1)次,因为序列尾部已经是有序的</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><strong>冒泡排序属于稳定排序</strong></p><h5 id="2-选择排序-升序"><a href="#2-选择排序-升序" class="headerlink" title="2.选择排序(升序)"></a>2.选择排序(升序)</h5><p>每次遍历从序列中找出最大的元素,与最末尾的元素交换位置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 选择排序 * @Author lx Zhang. * @Date 2021/5/25 10:22 下午 * @param array 序列 **/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> end <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> end <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> end<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> maxIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//假定最大值索引</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> begin <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> begin<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//寻找该轮遍历最大值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>maxIndex<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> array<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                maxIndex <span class="token operator">=</span> begin<span class="token punctuation">;</span> <span class="token comment">//找到更大的元素</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//交换位置</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>maxIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>        array<span class="token punctuation">[</span>maxIndex<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>        array<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-堆排序-升序"><a href="#3-堆排序-升序" class="headerlink" title="3.堆排序(升序)"></a>3.堆排序(升序)</h5><p>堆排序可以说是对选择排序的一种优化</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>consul的安装与使用</title>
      <link href="2021/05/22/consul%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>2021/05/22/consul%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Consul 是 HashiCorp 公司推出的开源工具，用于实现分布式系统的服务发现与配置。与其他分布式服务注册与发现的方案，Consul的方案更“一站式”，内置了服务注册与发现框 架、分布一致性协议实现、健康检查、Key/Value存储、多数据中心方案，不再需要依赖其他工具（比如ZooKeeper等）。使用起来也较 为简单。Consul使用Go语言编写，因此具有天然可移植性(支持Linux、windows和Mac OS X)；安装包仅包含一个可执行文件，方便部署，与Docker等轻量级容器可无缝配合 。</p><p>下载地址:<a href="https://www.consul.io/downloads">https://www.consul.io/downloads</a></p><h4 id="安装-linux"><a href="#安装-linux" class="headerlink" title="安装(linux)"></a>安装(linux)</h4><p>安装包: <a href="https://releases.hashicorp.com/consul/1.9.5/consul_1.9.5_linux_amd64.zip">https://releases.hashicorp.com/consul/1.9.5/consul_1.9.5_linux_amd64.zip</a></p><p>解压</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">unzip consul_1.9.5_linux_amd64.zip <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解压后得到一个<code>consul</code>可执行文件</p><h4 id="Consul-常用命令"><a href="#Consul-常用命令" class="headerlink" title="Consul 常用命令"></a>Consul 常用命令</h4><ol><li><p>consul -help </p><p>查看consul所有命令帮助</p></li><li><p>consul agent –help</p><p>查看 agent 命令帮助</p></li><li><p>consul members</p><p>查看集群中的节点</p></li><li><p>consul info</p><p>查看当前consul 的IP信息</p></li><li><p>consul leave</p><p>优雅关闭consul</p></li><li><p>consul agent -dev</p><p>运行一个agent代理,表示开发者模式</p><ol><li>agent 命令选型详解</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-advertise=addr          Sets the advertise address to use-advertise-wan=addr      Sets address to advertise on wan instead of advertise addr-atlas=org/name          Sets the Atlas infrastructure name, enables SCADA.-atlas-join              Enables auto-joining the Atlas cluster-atlas-token=token       Provides the Atlas API token-atlas-endpoint=1.2.3.4  The address of the endpoint for Atlas integration.-bootstrap               Sets server to bootstrap mode-bind=0.0.0.0            Sets the bind address for cluster communication-http-port=8500          Sets the HTTP API port to listen on-bootstrap-expect=0      Sets server to expect bootstrap mode.-client=127.0.0.1        Sets the address to bind for client access.                         This includes RPC, DNS, HTTP and HTTPS (if configured)-config-file=foo         Path to a JSON file to read configuration from.                         This can be specified multiple times.-config-dir=foo          Path to a directory to read configuration files                         from. This will read every file ending in ".json"                         as configuration in this directory in alphabetical                         order. This can be specified multiple times.-data-dir=path           Path to a data directory to store agent state-dev                     Starts the agent in development mode.-recursor=1.2.3.4        Address of an upstream DNS server.                         Can be specified multiple times.-dc=east-aws             Datacenter of the agent (deprecated: use 'datacenter' instead).-datacenter=east-aws     Datacenter of the agent.-encrypt=key             Provides the gossip encryption key-join=1.2.3.4            Address of an agent to join at start time.                         Can be specified multiple times.-join-wan=1.2.3.4        Address of an agent to join -wan at start time.                         Can be specified multiple times.-retry-join=1.2.3.4      Address of an agent to join at start time with                         retries enabled. Can be specified multiple times.-retry-interval=30s      Time to wait between join attempts.-retry-max=0             Maximum number of join attempts. Defaults to 0, which                         will retry indefinitely.-retry-join-wan=1.2.3.4  Address of an agent to join -wan at start time with                         retries enabled. Can be specified multiple times.-retry-interval-wan=30s  Time to wait between join -wan attempts.-retry-max-wan=0         Maximum number of join -wan attempts. Defaults to 0, which                         will retry indefinitely.-log-level=info          Log level of the agent.-node=hostname           Name of this node. Must be unique in the cluster-protocol=N              Sets the protocol version. Defaults to latest.-rejoin                  Ignores a previous leave and attempts to rejoin the cluster.-server                  Switches agent to server mode.-syslog                  Enables logging to syslog-ui                      Enables the built-in static web UI server-ui-dir=path             Path to directory containing the Web UI resources-pid-file=path           Path to file to store agent PID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>-data-dir<ul><li>作用：指定agent储存状态的数据目录</li><li>这是所有agent都必须的</li><li>对于server尤其重要，因为他们必须持久化集群的状态</li></ul></li><li>-config-dir<ul><li>作用：指定service的配置文件和检查定义所在的位置</li><li>通常会指定为”某一个路径/consul.d”（通常情况下，.d表示一系列配置文件存放的目录）</li></ul></li><li>-config-file<ul><li>作用：指定一个要装载的配置文件</li><li>该选项可以配置多次，进而配置多个配置文件（后边的会合并前边的，相同的值覆盖）</li></ul></li><li>-dev<ul><li>作用：创建一个开发环境下的server节点</li><li>该参数配置下，不会有任何持久化操作，即不会有任何数据写入到磁盘</li><li>这种模式不能用于生产环境（因为第二条）</li></ul></li><li>-bootstrap-expect<ul><li>作用：该命令通知consul server我们现在准备加入的server节点个数，该参数是为了延迟日志复制的启动直到我们指定数量的server节点成功的加入后启动。</li></ul></li><li>-node<ul><li>作用：指定节点在集群中的名称</li><li>该名称在集群中必须是唯一的（默认采用机器的host）</li><li>推荐：直接采用机器的IP</li></ul></li><li>-bind<ul><li>consul所在服务器的IP地址,默认为0.0.0.0</li></ul></li><li>-http-port<ul><li>consul的端口</li></ul></li><li>-client<ul><li>表示哪些计算机可以访问该节点,0.0.0.0为所有机器可访问,默认为本机</li></ul></li><li>-server<ul><li>作用：指定节点为server模式,允许其他的consul连接到开启consul上,形成集群,默认以客户端的方式开启,非集群</li></ul></li><li>-join<ul><li>作用：将节点加入到集群</li></ul></li><li>ui<ul><li>可以使用web页面来管理consul</li></ul></li></ul><p>常用启动命令</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">./consul agent -server -bootstrap-expect 1 -data-dir ./data -node=node01 -bind=*.*.*.* -rejoin -config-dir=./configDir -client 0.0.0.0 -pid-file=./pidfile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h4><p>在consul的configDir下创建一个json文件,表示手动注册了一个服务</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>        <span class="token property">"service"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"user-service"</span><span class="token punctuation">,</span> <span class="token comment">//服务名</span>                <span class="token property">"tags"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"aliasName"</span><span class="token punctuation">,</span><span class="token string">"user"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//服务别名</span>                <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">8800</span>  <span class="token comment">//服务端口</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后重新加载配置文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">consul reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过命令查看注册的服务</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">curl -s 127.0.0.1:8500/v1/catalog/service/user-service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Go-micro-安装"><a href="#Go-micro-安装" class="headerlink" title="Go-micro 安装"></a>Go-micro 安装</h4><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">go get github.com/golang/protobuf/protoc-gen-gogo get github.com/micro/micro/v3/cmd/protoc-gen-microgo get github.com/micro/micro/v3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Go-micro-的使用"><a href="#Go-micro-的使用" class="headerlink" title="Go-micro 的使用"></a>Go-micro 的使用</h4><ul><li><p>创建项目 New</p><p>参数详解</p><ul><li>–namespace 命名空间 package名字</li><li>–type 微服务类型<ul><li>srv: 微服务</li><li>Web: 基于微服务的web网站</li></ul></li></ul></li><li><p>创建微服务</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">micro new first_micro_demo #first_micro_demo 服务名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成的项目结构</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">├── Dockerfile├── Makefile├── README.md├── generate.go├── go.mod├── handler│&nbsp;&nbsp; └── first_micro_demo.go├── main.go├── micro.mu└── proto    └── first_micro_demo.proto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>main.go 项目的入口文件</li><li>handler目录 处理grpc实现的接口,对应实现接口的子类,都放置在handler中</li></ul><p>执行 <code>make proto</code> 进行编译</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> 服务中心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode【链表】</title>
      <link href="2021/05/21/leetcode%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91/"/>
      <url>2021/05/21/leetcode%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h3 id="Leetcode刷题链表记录篇"><a href="#Leetcode刷题链表记录篇" class="headerlink" title="Leetcode刷题链表记录篇"></a>Leetcode刷题链表记录篇</h3><h4 id="ListNode"><a href="#ListNode" class="headerlink" title="ListNode"></a>ListNode</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> next<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"ListNode{"</span> <span class="token operator">+</span>                    <span class="token string">"val="</span> <span class="token operator">+</span> val <span class="token operator">+</span>                    <span class="token string">", next="</span> <span class="token operator">+</span> next <span class="token operator">+</span>                    <span class="token string">'}'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-链表节点删除"><a href="#1-链表节点删除" class="headerlink" title="1.链表节点删除"></a>1.链表节点删除</h4><p><u>给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。返回删除后的链表的头节点</u></p><p>Leetcode: <a href="https://leetcode-cn.com/problems/shan-chu-lian-biao-de-jie-dian-lcof">https://leetcode-cn.com/problems/shan-chu-lian-biao-de-jie-dian-lcof</a></p><p><strong>Code</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ListNode</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/** 如果头结点就是要删除的节点*/</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/** 临时节点存储*/</span>    <span class="token class-name">ListNode</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> prevNode <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> temp<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        prevNode <span class="token operator">=</span> temp<span class="token punctuation">;</span>        temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/** 如果找到了要删除的节点*/</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>prevNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> prevNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            prevNode<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            prevNode<span class="token punctuation">.</span>next <span class="token operator">=</span> prevNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Test</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ListNode</span> header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> node1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> node2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> node3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    header<span class="token punctuation">.</span>next <span class="token operator">=</span> node1<span class="token punctuation">;</span>    node1<span class="token punctuation">.</span>next <span class="token operator">=</span> node2<span class="token punctuation">;</span>    node2<span class="token punctuation">.</span>next <span class="token operator">=</span> node3<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>    header <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>header<span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-链表反转"><a href="#2-链表反转" class="headerlink" title="2.链表反转"></a>2.链表反转</h4><p><u>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</u></p><p>Leetcode: <a href="https://leetcode-cn.com/problems/reverse-linked-list/">https://leetcode-cn.com/problems/reverse-linked-list/</a></p><p><strong>Code</strong></p><p><strong>递归实现</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 递归实现*/</span><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> newHead <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newHead<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>非递归实现</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 非递归实现*/</span><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> newHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ListNode</span> temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> newHead<span class="token punctuation">;</span>        newHead <span class="token operator">=</span> head<span class="token punctuation">;</span>        head <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newHead<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-判断一个链表是否有环"><a href="#3-判断一个链表是否有环" class="headerlink" title="3.判断一个链表是否有环"></a>3.判断一个链表是否有环</h4><p><u>给定一个链表，判断链表中是否有环。如果链表中存在环，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。</u></p><p>Leetcode: <a href="https://leetcode-cn.com/problems/linked-list-cycle/">https://leetcode-cn.com/problems/linked-list-cycle/</a></p><p><strong>快慢指针实现,两个指针去遍历,每个指针的步长不同 ,如果重叠就表示是环形链表</strong></p><p><strong>Code</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment">//慢指针</span>    <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment">//快指针</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">==</span> fast<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//一旦两个指针重叠,就是环形链表</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法【链表】</title>
      <link href="2021/05/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91/"/>
      <url>2021/05/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><u>上章,我们实现了自定义动态数组,但是动态数组有个明显的缺点,由于它的内存分配是连续的,如果没有将整个动态数组使用,那么将会存在内存空间的浪费,并且元素之间的增加、移除操作都会产生大量的移位操作,性能较差,那么我们怎么解决这些问题呢?<strong>链表</strong>,就可以解决这些问题,链表的内存是非连续分配,可以做到使用多少内存就分配多少内存</u></p><p><strong>链表是一种链式存储线性表,所有元素的内存地址不一定是连续的</strong></p><h4 id="1-顶级接口"><a href="#1-顶级接口" class="headerlink" title="1.顶级接口"></a>1.顶级接口</h4><p><u>在Java中,接口是一种规范,或者说是一种约束,实现了该接口的类都将实现一系列指定的方法或者说操作,我们将链表、或者说动态数组公共的操作规范定义在接口中,对外提供</u></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 线性表顶级接口 * @author lx Zhang. * @date 2021/5/20 9:47 上午 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ListInterface</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">/** 不存在*/</span>    <span class="token class-name">Integer</span> ELEMENT_NOT_FOUND <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">/** 起始值 || 头节点索引*/</span>    <span class="token class-name">Integer</span> INDEX_ZERO <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 清空链表     */</span>    <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 获取元素数量     * @return 元素数量     */</span>    <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 是否为空     * @return true: 空     */</span>    <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 是否存在该元素     * @param element 判断的数据     * @return true:存在     */</span>    <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">E</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 添加元素到容器末尾     * @param element 要添加的元素     */</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 添加元素到指定的位置     * @param index 指定的位置     * @param element 要添加的元素     */</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token class-name">E</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 替换指定位置的元素,并且返回该位置替换前的元素     * @param index 索引     * @param element 新添加的元素     * @return     */</span>    <span class="token class-name">E</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token class-name">E</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 获取元素     * @param index 索引     * @return     */</span>    <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 移除元素     * @param index 索引     * @return     */</span>    <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 获取元素在容器中的索引     * @param element 元素     * @return     */</span>    <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">E</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-抽象父类"><a href="#2-抽象父类" class="headerlink" title="2.抽象父类"></a>2.抽象父类</h4><p><u>接口是不允许有实现,但是我们发现链表和动态数组还是有共同实现点,所以将公共的方法实现,抽离到抽象父类中</u></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 线性表抽象父类,实现顶级接口,抽取出公共可用的方法 * @author lx Zhang. * @date 2021/5/20 5:57 下午 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractLinked</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">ListInterface</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token comment">/** 容器元素的数量*/</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token comment">/**     * 获取元素数量     *     * @return 元素数量     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 是否为空     *     * @return true: 空     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 是否存在该元素     *     * @param element 判断的数据     * @return true:存在     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token operator">!=</span> ELEMENT_NOT_FOUND<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 添加元素到容器末尾     *     * @param element 要添加的元素     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/** 索引校验,获取数据时,index不能给定大于或等于size的值,会越界*/</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">verifyIndexByGet</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">throwsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/** 索引校验,添加数据时,index可以等于size,相当于在末尾添加数据,但是不能大于size*/</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">verifyIndexByAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">throwsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/** 抛出索引越界异常*/</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">throwsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"index is out max size..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-链表节点元素类"><a href="#3-链表节点元素类" class="headerlink" title="3.链表节点元素类"></a>3.链表节点元素类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 链表元素节点 * @author lx Zhang. * @date 2021/5/20 5:38 下午 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">/** 数据*/</span>    <span class="token class-name">E</span> element<span class="token punctuation">;</span>    <span class="token comment">/** 下一个节点*/</span>    <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LinkedNode</span><span class="token punctuation">(</span><span class="token class-name">E</span> element<span class="token punctuation">,</span> <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-链表实现"><a href="#4-链表实现" class="headerlink" title="4.链表实现"></a>4.链表实现</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 自定义实现链表,继承自线性表抽象父类,实现属于自己的业务方法 * @author lx Zhang. * @date 2021/5/20 9:29 上午 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedTable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractLinked</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token comment">/** 头节点*/</span>    <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> headNode<span class="token punctuation">;</span>    <span class="token comment">/**     * 清除链表的所有元素,这里直接将头结点赋值为NULL,会断掉所有节点的引用,随后就会被GC回收掉     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        headNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 添加元素到指定的位置     *     * @param index   指定的位置     * @param element 要添加的元素     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> INDEX_ZERO<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//添加到头结点情况要单独处理</span>            headNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>headNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> parentNode <span class="token operator">=</span> <span class="token function">findNodeByIndex</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取这个位置的父节点</span>            <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> parentNode<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建新节点,并且将父节点的子节点赋值到自身</span>            parentNode<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span> <span class="token comment">//将新节点连接到父节点上</span>        <span class="token punctuation">}</span>        size<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//容量+1</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 替换指定位置的元素,并且返回该位置替换前的元素     *     * @param index   索引     * @param element 新添加的元素     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> node <span class="token operator">=</span> <span class="token function">findNodeByIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">E</span> oldEl <span class="token operator">=</span> node<span class="token punctuation">.</span>element<span class="token punctuation">;</span> <span class="token comment">//获取旧元素</span>        node<span class="token punctuation">.</span>element <span class="token operator">=</span> element<span class="token punctuation">;</span> <span class="token comment">//赋值新元素</span>        <span class="token keyword">return</span> oldEl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取指定位置的元素     * @param index 索引     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">findNodeByIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>element<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 移除元素     *     * @param index 索引     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">E</span> element <span class="token operator">=</span> headNode<span class="token punctuation">.</span>element<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//移除头节点</span>            headNode <span class="token operator">=</span> headNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> parentNode <span class="token operator">=</span> <span class="token function">findNodeByIndex</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取要删除节点的父节点</span>            element <span class="token operator">=</span> parentNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>element<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> parentNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//移除末尾节点</span>                parentNode<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                parentNode<span class="token punctuation">.</span>next <span class="token operator">=</span> parentNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> element<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取元素在容器中的索引     *     * @param element 元素     * @return -1: 表示不存在     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> tempNode <span class="token operator">=</span> headNode<span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> INDEX_ZERO <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            tempNode <span class="token operator">=</span> tempNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//后移</span>        <span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> tempNode<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/** 如果找到最后一个节点,并且最后一个节点也不是所需要的节点, 返回-1*/</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> size <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>element<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span>  <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> index<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 根据index索引,获取对应的节点     * @Author lx Zhang.     * @Date 2021/5/20 6:27 下午     * @Param [index]     * @return com.lxz.链表.LinkedNode&lt;E&gt;     **/</span>    <span class="token keyword">private</span> <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">findNodeByIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">verifyIndexByGet</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//校验索引</span>        <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> tempNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>headNode<span class="token punctuation">;</span><span class="token comment">//获取头节点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tempNode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"index exist error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            tempNode <span class="token operator">=</span> tempNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//递归获取下一个节点,直到index次后</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> tempNode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token comment">/**     * 是否是环形链表,利用快慢指针实现     * @Author lx Zhang.     * @Date 2021/5/21 3:05 下午     * @return boolean     **/</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>headNode <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> headNode<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> temp <span class="token operator">=</span> headNode<span class="token punctuation">;</span>        <span class="token class-name">LinkedNode</span> slow <span class="token operator">=</span> temp<span class="token punctuation">;</span> <span class="token comment">//慢指针</span>        <span class="token class-name">LinkedNode</span> fast <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//快指针</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> slow<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//是环形链表</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"size:"</span> <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">",["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> tempNode <span class="token operator">=</span> headNode<span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tempNode <span class="token operator">=</span> tempNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> tempNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高并发编程【CompletableFuture】</title>
      <link href="2021/05/20/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%90CompletableFuture%E3%80%91/"/>
      <url>2021/05/20/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%90CompletableFuture%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用<code>Future</code>获得异步执行结果时，要么调用阻塞方法<code>get()</code>，要么轮询看<code>isDone()</code>是否为<code>true</code>，这两种方法都不是很好，因为主线程也会被迫等待。</p><p>从Java 8开始引入了<code>CompletableFuture</code>，它针对<code>Future</code>做了改进，可以传入回调对象，当异步任务完成或者发生异常时，自动调用回调对象的回调方法。</p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>工具类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmallTool</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleepMillis</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>millis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> tag<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringJoiner</span><span class="token punctuation">(</span><span class="token string">"\t|\t"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-supplyAsync"><a href="#1-supplyAsync" class="headerlink" title="1.supplyAsync"></a>1.supplyAsync</h4><p>开启一个异步线程执行任务</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFuture01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"小白进入餐厅"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"小白点了一碗米饭、一个番茄炒蛋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//开启异步任务执行</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> task  <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>           <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"厨师炒菜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">sleepMillis</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"厨师做饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">sleepMillis</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token string">"番茄炒蛋+ 米饭"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"小白点完餐后开始打王者..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"饭好了,小白开始吃饭:%s"</span><span class="token punctuation">,</span>task<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果:</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">1621467454160|1|main|小白进入餐厅1621467454162|1|main|小白点了一碗米饭、一个番茄炒蛋1621467454345|1|main|小白点完餐后开始打王者...1621467454346|11|ForkJoinPool.commonPool-worker-1|厨师炒菜1621467454551|11|ForkJoinPool.commonPool-worker-1|厨师做饭1621467454679|1|main|饭好了,小白开始吃饭:番茄炒蛋+ 米饭Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-thenCompose-串行"><a href="#2-thenCompose-串行" class="headerlink" title="2.thenCompose(串行)"></a>2.thenCompose(串行)</h4><p>连接多个异步任务,并且顺序执行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * CompletableFuture 入门Demo2 *  顺序执行多个异步任务 * @author lx Zhang. * @date 2021/3/26 10:28 下午 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFuture02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"小白进入餐厅"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"小白点了一碗米饭、一个番茄炒蛋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//开启异步任务执行 CompletableFuture.supplyAsync</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> task  <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>           <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"厨师炒菜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">sleepMillis</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token string">"番茄炒蛋"</span><span class="token punctuation">;</span>           <span class="token comment">//上一个任务结束后将结果传递给下一个异步任务</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenCompose</span><span class="token punctuation">(</span>dish<span class="token operator">-&gt;</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>            <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"服务员接过菜后去打饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">sleepMillis</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> dish <span class="token operator">+</span> <span class="token string">"米饭"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"小白点完餐后开始打王者..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"饭好了,小白开始吃饭:%s"</span><span class="token punctuation">,</span>task<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果:</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">1621467629810|1|main|小白进入餐厅1621467629811|1|main|小白点了一碗米饭、一个番茄炒蛋1621467629915|11|ForkJoinPool.commonPool-worker-1|厨师炒菜1621467629917|1|main|小白点完餐后开始打王者...1621467630122|11|ForkJoinPool.commonPool-worker-1|服务员接过菜后去打饭1621467630350|1|main|饭好了,小白开始吃饭:番茄炒蛋米饭<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-thenCombine-并行"><a href="#3-thenCombine-并行" class="headerlink" title="3.thenCombine(并行)"></a>3.thenCombine(并行)</h4><p>将两个异步任务并行,都执行完之后,合并结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * CompletableFuture 入门Demo3 *  将两个异步任务并行,都执行完之后,合并结果 * @author lx Zhang. * @date 2021/3/26 10:28 下午 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFuture03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"小白进入餐厅"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"小白点了一碗米饭、一个番茄炒蛋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建任务1: 厨师炒菜</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> job <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>           <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"厨师炒菜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">sleepMillis</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token string">"番茄炒蛋"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenCombine</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>            <span class="token comment">//通过thenCombine()函数 再开启一个异步任务,两个任务是并行的</span>            <span class="token comment">//需要传入两个参数,p1:要并行的任务,p2:任务都执行完后的回调函数</span>            <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"服务员蒸大米饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">sleepMillis</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"大米饭"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>dish<span class="token punctuation">,</span>rice<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>            <span class="token comment">//合并任务结果</span>            <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"服务员将菜盛到米饭上"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> dish <span class="token operator">+</span> rice<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"小白点完餐后开始打王者..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"饭好了,小白开始吃饭:%s"</span><span class="token punctuation">,</span>job<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果:</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">1621467753153|1|main|小白进入餐厅1621467753153|1|main|小白点了一碗米饭、一个番茄炒蛋1621467753263|11|ForkJoinPool.commonPool-worker-1|厨师炒菜1621467753264|12|ForkJoinPool.commonPool-worker-2|服务员蒸大米饭1621467753265|1|main|小白点完餐后开始打王者...1621467753469|12|ForkJoinPool.commonPool-worker-2|服务员将菜盛到米饭上1621467753492|1|main|饭好了,小白开始吃饭:番茄炒蛋大米饭Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-thenApplyAsync"><a href="#4-thenApplyAsync" class="headerlink" title="4.thenApplyAsync"></a>4.thenApplyAsync</h4><p>将两个异步任务串行化执行 最后完成的任务结果作为返回值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * CompletableFuture 入门Demo3 *  将两个异步任务串行化执行 最后完成的任务结果作为返回值 * @author lx Zhang. * @date 2021/3/26 10:28 下午 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFuture04</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"小白吃完了饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"小白要求开发票!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建任务1: 服务员收款</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> job <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>            <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"服务员1号收款500元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">sleepMillis</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"500"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenApplyAsync</span><span class="token punctuation">(</span>money<span class="token operator">-&gt;</span><span class="token punctuation">{</span>            <span class="token comment">//执行完上一个任务后,再执行该任务</span>            <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"服务员2号开发票 面额:"</span> <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">sleepMillis</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> money <span class="token operator">+</span> <span class="token string">"发票"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"小白接到朋友电话..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"小白拿到发票,回家"</span><span class="token punctuation">,</span>job<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-applyToEither"><a href="#5-applyToEither" class="headerlink" title="5.applyToEither"></a>5.applyToEither</h4><p>同时执行两个异步任务,哪个任务先执行完成,就把哪个任务的结果作为返回值,并且做异常处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * CompletableFuture 入门Demo3 *  场景: *      同时执行两个异步任务,哪个任务先执行完成,就把哪个任务的结果作为返回值 *      并且做异常处理 * @author lx Zhang. * @date 2021/3/26 10:28 下午 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFuture05</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"小白来到公交车站"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"等775 or 889路公交车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"等待中...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建异步任务1 775路车</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> job <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>            <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"775路车正在赶来的路上..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">sleepMillis</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"775"</span><span class="token punctuation">;</span>            <span class="token comment">//创建异步任务2 889路车</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">applyToEither</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>            <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"889路车正在赶来的路上..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">sleepMillis</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"889"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> firstResult<span class="token operator">-&gt;</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> firstResult<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"小白坐车回家:"</span><span class="token operator">+</span> job<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果: </p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">1621467964652|1|main|小白来到公交车站1621467964652|1|main|等775 or 889路公交车1621467964652|1|main|等待中....1621467964753|11|ForkJoinPool.commonPool-worker-1|775路车正在赶来的路上...1621467964754|12|ForkJoinPool.commonPool-worker-2|889路车正在赶来的路上...1621467965160|1|main|小白坐车回家:889<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果中途出了异常问题,我们需要对异常做处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFuture05</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"小白来到公交车站"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"等775 or 889路公交车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"等待中...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建异步任务1 775路车</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> job <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>            <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"775路车正在赶来的路上..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">sleepMillis</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"775"</span><span class="token punctuation">;</span>            <span class="token comment">//创建异步任务2 889路车</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">applyToEither</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>            <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"889路车正在赶来的路上..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">sleepMillis</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"889"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> firstResult<span class="token operator">-&gt;</span><span class="token punctuation">{</span>            <span class="token comment">//模拟异常出现</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>firstResult<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"889"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"出车祸了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> firstResult<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span>throwable <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span>throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"小白呼叫出租车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"出租车"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SmallTool</span><span class="token punctuation">.</span><span class="token function">printTimeAndThread</span><span class="token punctuation">(</span><span class="token string">"小白坐车回家:"</span><span class="token operator">+</span> job<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果:</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">1621468112225|1|main|小白来到公交车站1621468112225|1|main|等775 or 889路公交车1621468112225|1|main|等待中....1621468112331|11|ForkJoinPool.commonPool-worker-1|775路车正在赶来的路上...1621468112332|12|ForkJoinPool.commonPool-worker-2|889路车正在赶来的路上...1621468112738|12|ForkJoinPool.commonPool-worker-2|java.lang.RuntimeException: 出车祸了...1621468112738|12|ForkJoinPool.commonPool-worker-2|小白呼叫出租车1621468112738|1|main|小白坐车回家:出租车<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch【二】Java整合</title>
      <link href="2021/05/18/ElasticSearch%E3%80%90%E4%BA%8C%E3%80%91Java%E6%95%B4%E5%90%88/"/>
      <url>2021/05/18/ElasticSearch%E3%80%90%E4%BA%8C%E3%80%91Java%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h4 id="1-创建Java项目"><a href="#1-创建Java项目" class="headerlink" title="1.创建Java项目"></a>1.创建Java项目</h4><p>Pom.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--Es 依赖--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>7.6.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--高级客户端--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.elasticsearch.client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>elasticsearch-rest-high-level-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>7.6.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-声明并且初始化客户端"><a href="#2-声明并且初始化客户端" class="headerlink" title="2.声明并且初始化客户端"></a>2.声明并且初始化客户端</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">RestHighLevelClient</span> client <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token comment">/***    * 初始化客户端    * @Author lx Zhang.    * @Date 2021/5/18 2:05 下午    * @Param []    * @return org.elasticsearch.client.RestHighLevelClient    **/</span>   <span class="token annotation punctuation">@Before</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       client <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>               <span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"101.37.79.47"</span><span class="token punctuation">,</span><span class="token number">9200</span><span class="token punctuation">,</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-创建索引库"><a href="#3-创建索引库" class="headerlink" title="3. 创建索引库"></a>3. 创建索引库</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * JavaAPI 创建索引库 * @Author lx Zhang. * @Date 2021/5/18 2:09 下午 * @Param [] * @return void **/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">//创建 java_es索引库</span>    <span class="token class-name">CreateIndexResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CreateIndexRequest</span><span class="token punctuation">(</span><span class="token string">"java_es"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-删除索引库"><a href="#4-删除索引库" class="headerlink" title="4.删除索引库"></a>4.删除索引库</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 删除索引库 * @Author lx Zhang. * @Date 2021/5/18 2:16 下午 **/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    client<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeleteIndexRequest</span><span class="token punctuation">(</span><span class="token string">"java_es"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-查询索引库"><a href="#5-查询索引库" class="headerlink" title="5.查询索引库"></a>5.查询索引库</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 查询索引库 * @Author lx Zhang. * @Date 2021/5/18 2:19 下午 **/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">searchIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">GetIndexResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GetIndexRequest</span><span class="token punctuation">(</span><span class="token string">"java_es"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-准备测试数据"><a href="#6-准备测试数据" class="headerlink" title="6. 准备测试数据"></a>6. 准备测试数据</h4><h5 id="1-创建索引库"><a href="#1-创建索引库" class="headerlink" title="1.创建索引库"></a>1.创建索引库</h5><pre class="line-numbers language-json" data-language="json"><code class="language-json">PUT /users<span class="token punctuation">{</span>  <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"username"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span><span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"password"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"age"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"address"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span> <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"info"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span><span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-编写Java实体类"><a href="#2-编写Java实体类" class="headerlink" title="2. 编写Java实体类"></a>2. 编写Java实体类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> info<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-添加文档"><a href="#3-添加文档" class="headerlink" title="3.添加文档"></a>3.添加文档</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 向'users' 索引库中添加数据 * @Author lx Zhang. * @Date 2021/5/18 3:07 下午 **/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token class-name">IndexRequest</span> indexRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"法外狂徒张三"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"河北省邯郸市"</span><span class="token punctuation">,</span> <span class="token string">"今天天气真不错,看妞刚好合适!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    indexRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">IndexResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>indexRequest<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3-1批量添加文档"><a href="#3-1批量添加文档" class="headerlink" title="3.1批量添加文档"></a>3.1批量添加文档</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 批量新增文档 * @Author lx Zhang. * @Date 2021/5/18 3:40 下午 **/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">batchAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token class-name">BulkRequest</span> bulkRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BulkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"李晓明"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">"北京市"</span><span class="token punctuation">,</span><span class="token string">"今天下雨了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"王美丽"</span><span class="token punctuation">,</span><span class="token string">"admin123"</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token string">"南昌市"</span><span class="token punctuation">,</span><span class="token string">"今天下雪了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">IndexRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">IndexRequest</span> request1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>    bulkRequest<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BulkResponse</span> bulkResponse <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">bulk</span><span class="token punctuation">(</span>bulkRequest<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BulkItemResponse</span> item <span class="token operator">:</span> bulkResponse<span class="token punctuation">.</span><span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-修改文档"><a href="#4-修改文档" class="headerlink" title="4.修改文档"></a>4.修改文档</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 修改文档 * @Author lx Zhang. * @Date 2021/5/18 3:22 下午 **/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">UpdateRequest</span> updateRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    updateRequest<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1001"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span><span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">,</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"newUsername"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">UpdateResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>updateRequest<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-查询单个文档"><a href="#5-查询单个文档" class="headerlink" title="5.查询单个文档"></a>5.查询单个文档</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 查询单个文档 * @Author lx Zhang. * @Date 2021/5/18 3:28 下午 **/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">GetResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GetRequest</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span> <span class="token string">"1001"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果转为map</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果转为string</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果转为map</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-查询文档列表"><a href="#6-查询文档列表" class="headerlink" title="6. 查询文档列表"></a>6. 查询文档列表</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 查询一个索引库的所有文档 * @Author lx Zhang. * @Date 2021/5/18 3:27 下午 **/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findDocuments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">SearchRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//索引库名</span>    <span class="token comment">//构造查询条件,查询全部</span>    <span class="token class-name">SearchSourceBuilder</span> queryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">matchAllQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>queryBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SearchResponse</span> searchResponse <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/** 遍历打印*/</span>    <span class="token class-name">SearchHits</span> searchHits <span class="token operator">=</span> searchResponse<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SearchHit</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hits <span class="token operator">=</span> searchHits<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SearchHit</span> hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-删除文档"><a href="#7-删除文档" class="headerlink" title="7. 删除文档"></a>7. 删除文档</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 删除文档 * @Author lx Zhang. * @Date 2021/5/18 3:33 下午 **/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">DeleteResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeleteRequest</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span> <span class="token string">"1001"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8-复杂查询案例"><a href="#8-复杂查询案例" class="headerlink" title="8.复杂查询案例"></a>8.复杂查询案例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 复杂查询 * @Author lx Zhang. * @Date 2021/3/24 4:41 下午 * @query **/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">searchBookIndexWithNameAndPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> title <span class="token operator">=</span> <span class="token string">"服务"</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> max <span class="token operator">=</span> <span class="token number">100.0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> min <span class="token operator">=</span> <span class="token number">15.0</span><span class="token punctuation">;</span>    <span class="token class-name">SearchSourceBuilder</span> searchSourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//构建bool多条件  title 中分词包含有 '服务' and price &gt;19 and price &lt; 100</span>    <span class="token class-name">BoolQueryBuilder</span> boolQuery <span class="token operator">=</span> <span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">boolQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    boolQuery<span class="token punctuation">.</span><span class="token function">must</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">must</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">rangeQuery</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gte</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lte</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    searchSourceBuilder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>boolQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//构建查询对象</span>    <span class="token class-name">SearchRequest</span> searchRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token string">"book"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    searchRequest<span class="token punctuation">.</span><span class="token function">types</span><span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>searchSourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SearchResponse</span> result <span class="token operator">=</span> restHighLevelClient<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchRequest<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">SearchHit</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hits <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>hits<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>hit<span class="token operator">-&gt;</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="9-聚合查询"><a href="#9-聚合查询" class="headerlink" title="9. 聚合查询"></a>9. 聚合查询</h5><h6 id="1-求最大值-max"><a href="#1-求最大值-max" class="headerlink" title="1.求最大值 max"></a>1.求最大值 max</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 聚合查询 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">agg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">SearchRequest</span> searchRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SearchSourceBuilder</span> sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 构建聚合条件,聚合条件为 求price的最大值</span>    <span class="token class-name">MaxAggregationBuilder</span> aggregationBuilder <span class="token operator">=</span> <span class="token class-name">AggregationBuilders</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token string">"priceMax"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sourceBuilder<span class="token punctuation">.</span><span class="token function">aggregation</span><span class="token punctuation">(</span>aggregationBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置聚合条件</span>    searchRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchRequest<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getTook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SearchHits</span> hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SearchHit</span> hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2-分组查询"><a href="#2-分组查询" class="headerlink" title="2.分组查询"></a>2.分组查询</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 聚合查询 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">agg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">SearchRequest</span> searchRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SearchSourceBuilder</span> sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 构建聚合条件,聚合条件为 求price的最大值</span>    <span class="token class-name">TermsAggregationBuilder</span> termsAggregationBuilder <span class="token operator">=</span> <span class="token class-name">AggregationBuilders</span><span class="token punctuation">.</span><span class="token function">terms</span><span class="token punctuation">(</span><span class="token string">"priceGroup"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sourceBuilder<span class="token punctuation">.</span><span class="token function">aggregation</span><span class="token punctuation">(</span>termsAggregationBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置聚合条件</span>    searchRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchRequest<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getTook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SearchHits</span> hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SearchHit</span> hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="10-条件构造案例"><a href="#10-条件构造案例" class="headerlink" title="10. 条件构造案例"></a>10. 条件构造案例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Query 构建Demo * @Author lx Zhang. * @Date 2021/3/24 9:16 下午 * @Param [] * @return void **/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">SearchSourceBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//构建查询所有条件</span>    builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">matchAllQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//构建多条件</span>    builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">boolQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">must</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">matchAllQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">must</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"filed"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//分页 偏移量 -- 页容量</span>    builder<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//排序</span>    builder<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token string">"filed"</span><span class="token punctuation">,</span> <span class="token class-name">SortOrder</span><span class="token punctuation">.</span>DESC<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//filter 过滤器</span>    builder<span class="token punctuation">.</span><span class="token function">postFilter</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"filed"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//高亮</span>    builder<span class="token punctuation">.</span><span class="token function">highlighter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HighlightBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"field"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">requireFieldMatch</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">preTags</span><span class="token punctuation">(</span><span class="token string">"&lt;span&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">postTags</span><span class="token punctuation">(</span><span class="token string">"&lt;/span&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch【一】基础学习</title>
      <link href="2021/05/18/ElasticSearch%E3%80%90%E4%B8%80%E3%80%91%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>2021/05/18/ElasticSearch%E3%80%90%E4%B8%80%E3%80%91%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>什么是ElasticSeatch?</strong></p><p><u>ElasticSearch 简称ES,是目前非常主流的一款分布式开源搜索引擎,它基于Lucene 并且使用Java开发,提供了简单的Restful风格API;<br>ES主要以轻量级的JSON作为数据存储格式,这点与MongoDB有点类似,但是读写性能上优于mongo,它是一个接近实时的搜索平台</u></p><h3 id="1-什么是全文检索"><a href="#1-什么是全文检索" class="headerlink" title="1.什么是全文检索?"></a>1.什么是全文检索?</h3><p><u>全文检索是计算机程序通过扫描文章中的每一个词,对每一个词建立一个对应的索引,该索引指明该词在文章中出现的次数和位置,当用户查询词时,只要查找到建立好的索引即可</u></p><p><strong>检索分为两步:  索(先建立索引)  检(再根据索引去查找)</strong></p><h3 id="2-什么是Restful"><a href="#2-什么是Restful" class="headerlink" title="2.什么是Restful?"></a>2.什么是Restful?</h3><p><strong>定义</strong>: <u>资源的表现层状态转化  其实Restful是一种软甲架构风格</u></p><p>关键词详解:</p><ul><li><p>资源(Resource)</p><p><u>网络中的一切都称之为资源,如一首歌、一张图片、数据库中的一条数据,API响应的一段JSON数据等等,每一个资源都应该具有一个唯一的资源标识符;那就是对应它自己的 URL,拿WebAPI接口举例,我们想获取一个用户的信息</u></p><p>传统WebApi:    <a href="http://localhost:8080/user/findOne?id=1001">http://localhost:8080/user/findOne?id=1001</a></p><p><u>可以看出,传统WebAPi是通过’?’拼接携带参数id,其实这种情况下只有’?’前面的内容才是真正的URL,’?’之后的只是携带的参数并不属于URL内容,假如我们获取多个用户信息:</u></p><p><a href="http://localhost:8080/user/findOne?id=1001">http://localhost:8080/user/findOne?id=1001</a></p><p><a href="http://localhost:8080/user/findOne?id=1002">http://localhost:8080/user/findOne?id=1002</a></p><p><a href="http://localhost:8080/user/findOne?id=1003">http://localhost:8080/user/findOne?id=1003</a></p><p><u>以restful来看,这三种’资源’的唯一资源标识符其实是相同的(<a href="http://localhost:8080/user/findOne),%E4%BD%86%E6%98%AF%E4%BB%96%E4%BB%AC%E8%8E%B7%E5%8F%96%E5%88%B0%E7%9A%84%E8%B5%84%E6%BA%90%E5%8D%B4%E6%98%AF%E4%B8%8D%E5%90%8C%E7%9A%84,%E8%BF%9D%E8%83%8C%E7%9A%84restful%E7%9A%84%E6%84%8F%E6%84%BF.%E4%BD%86%E6%98%AF%E5%A6%82%E6%9E%9C%E6%8D%A2%E6%88%90Restful%E9%A3%8E%E6%A0%BC%E5%90%8E%E7%9A%84API%E5%91%A2">http://localhost:8080/user/findOne),但是他们获取到的资源却是不同的,违背的restful的意愿.但是如果换成Restful风格后的API呢</a>?</u></p><p>RestfulAPI:</p><p><a href="http://locahost:8080/user/findOne/1">http://locahost:8080/user/findOne/1</a></p><p><a href="http://locahost:8080/user/findOne/2">http://locahost:8080/user/findOne/2</a></p><p><a href="http://locahost:8080/user/findOne/3">http://locahost:8080/user/findOne/3</a></p><p><u>将携带的id参数作为<strong>URL</strong>的内容,从而达到资源标识符的<strong>唯一</strong>性!</u></p></li><li><p>状态转化(State Transfer)</p><p><u>通过不同的状态转化,传达不同的操作,Restful提出了四种新的请求动词: <strong>GET</strong>(查询)、<strong>POST</strong>(更新|添加)、<strong>PUT</strong>(添加|更新)、<strong>DELETE</strong>(删除)</u></p></li></ul><p><strong>总结:</strong>  </p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">Restful其实就是一种WebAPI接口的定义风格,它的原则就是一个URL只代表了一个唯一的资源,并且呢,通过http协议里面的四种动词去对应资源的基本操作(CRUD),GET用来获取资源、POST用来新增资源、PUT用来更新资源、DELETE用来删除资源。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-ElasticSearch的基本概念"><a href="#3-ElasticSearch的基本概念" class="headerlink" title="3.ElasticSearch的基本概念"></a>3.ElasticSearch的基本概念</h3><ul><li><p>索引(Index)</p><p><u>索引库,类似于关系型数据库的一个database,索引名称必须为小写</u></p></li><li><p>类型(Type)</p><p><u>一个索引可以有n个类型,类似于数据库中的表(7版本中已经移除)</u></p></li><li><p>映射(Mapping)</p><p><u>类型的结构信息</u></p></li></ul><h3 id="4-ES倒排索引原理"><a href="#4-ES倒排索引原理" class="headerlink" title="4.ES倒排索引原理"></a>4.ES倒排索引原理</h3><p>ES从插入数据到检索数据的流程原理:</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">首先获取到一条文档后,会在元数据区持久化该文档,并且生成一个DocID,可以根据该DocId直接命中该文档在元数据区的位置,然后对文档的所有数据进行分词建立索引,假如只有一个名为title的text类型数据,我们来模拟多条数据"title": "Running code open"  docID :1"title": "Running start first" docID :2"title": "test Running"docID :3首先会对title进行分词,然后es会在索引区创建以下矩形(概念模型)分词后的相同单词都会有一个唯一标识docID: 文档对应的唯一标识(可以理解为Doc地址)POS: 在文档中出现的位置(field index)TF: 在文档中出现的次数倒排项(概念模型)-------------------------------------------------单词ID单词内容倒排列表(docID,&lt;POS&gt;,TF)1Running(1,&lt;0&gt;,1), (2,&lt;0&gt;,1), (3,&lt;1&gt;,1)2code     (1,&lt;1&gt;,1)3open   (1,&lt;2&gt;,1)4start(2,&lt;1&gt;,1)5first(2,&lt;2&gt;,1)6test (3,&lt;0&gt;,1)--------------------------------------------------如以上结构,以单词1Running为例: 表示 'Running'单词在id为 '1' 的文档中 '&lt;0&gt;' 的位置出现了'1'次,在id为 '2' 的文档中 '&lt;0&gt;' 的位置出现了'1'次,在id为 '3' 的文档中 '&lt;1&gt;' 的位置出现了'1'次假如我们根据'Running'term查询,es会首先在列表中寻找该单词ID,然后在对应的倒排列表中获取它出现的DocID、位置、TF等数据,就可以直接命中该文档es中使用的数据结构: BKD Tree(自行扩展)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-ElasticSearch的安装"><a href="#5-ElasticSearch的安装" class="headerlink" title="5.ElasticSearch的安装"></a>5.ElasticSearch的安装</h3><ol><li><p>首先下载安装包  <a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></p><p>目前比较比较主流的版本为7.x以上</p></li><li><p>然后解压会有以下目录</p><p>bin、config、jdk、plugins、lib、modules、logs、data</p><ul><li>bin是可执行文件目录</li><li>config为配置目录</li><li>plugins为插件目录</li><li>data为数据存储目录</li><li>logs为日志目录</li><li>lib为依赖包目录</li></ul></li><li><p>环境配置</p><p>修改/etc/security/limits.conf,增加配置，用户退出后重新登录生效</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">*               soft    nofile            655350*               hard    nofile            655350<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改/etc/security/limits.conf,增加配置，用户退出后重新登录生效</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">*               hard    nproc           4096*               soft    nproc           4096<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改/etc/sysctl.conf，增加如下配置,保存后执行sysctl -p 生效</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">fs.file-max=655350<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改/etc/sysctl.conf，增加如下配置,保存后执行sysctl -p 生效</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">vm.max_map_count=262144<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>开启远程连接</p><p>修改elasticsearch.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">network.host</span><span class="token punctuation">:</span> 0.0.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动  -d 表示后台运行</p><p>bin/elasticsearch -d </p></li><li><p>如果启动失败可以调整jvm的大小,防止内存不够而导致无法使用</p><p>config/jvm.options</p></li></ol><h3 id="6-Es的常用数据类型"><a href="#6-Es的常用数据类型" class="headerlink" title="6. Es的常用数据类型"></a>6. Es的常用数据类型</h3><h4 id="1-文本类型"><a href="#1-文本类型" class="headerlink" title="1.文本类型"></a>1.文本类型</h4><ul><li>text</li><li>keyword</li></ul><h4 id="2-数字类型-8种"><a href="#2-数字类型-8种" class="headerlink" title="2.数字类型-8种"></a>2.数字类型-8种</h4><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>byte</td><td>有符号的8位整数, 范围: [-128 ~ 127]</td></tr><tr><td>short</td><td>有符号的16位整数, 范围: [-32768 ~ 32767]</td></tr><tr><td>integer</td><td>有符号的32位整数, 范围: [−231−231 ~ 231231-1]</td></tr><tr><td>long</td><td>有符号的64位整数, 范围: [−263−263 ~ 263263-1]</td></tr><tr><td>float</td><td>32位单精度浮点数</td></tr><tr><td>double</td><td>64位双精度浮点数</td></tr><tr><td>half_float</td><td>16位半精度IEEE 754浮点类型</td></tr><tr><td>scaled_float</td><td>缩放类型的的浮点数, 比如price字段只需精确到分, 57.34缩放因子为100, 存储结果为5734</td></tr></tbody></table><h4 id="3-日期类型"><a href="#3-日期类型" class="headerlink" title="3.日期类型"></a>3.日期类型</h4><ul><li>Date</li></ul><p>JSON没有日期数据类型, 所以在ES中, 日期可以是:</p><p>包含格式化日期的字符串, “2018-10-01”, 或”2018/10/01 12:10:30”.</p><p>代表时间毫秒数的长整型数字.</p><p>代表时间秒数的整数.</p><h4 id="4-布尔类型"><a href="#4-布尔类型" class="headerlink" title="4. 布尔类型"></a>4. 布尔类型</h4><ul><li>boolean</li></ul><h3 id="7-ES基础语句"><a href="#7-ES基础语句" class="headerlink" title="7.ES基础语句"></a>7.ES基础语句</h3><h4 id="1-查看所有索引库"><a href="#1-查看所有索引库" class="headerlink" title="1.查看所有索引库"></a>1.查看所有索引库</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /_cat/indices<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-创建索引库"><a href="#2-创建索引库" class="headerlink" title="2.创建索引库"></a>2.创建索引库</h4><p>books 为索引库名称</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">PUT /books<span class="token punctuation">{</span>  <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"title"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token property">"price"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"double"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token property">"content"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token property">"createTime"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"date"</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-插入数据"><a href="#3-插入数据" class="headerlink" title="3.插入数据"></a>3.插入数据</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json">POST /books/_doc/<span class="token number">1</span><span class="token punctuation">{</span>  <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Golang微服务"</span><span class="token punctuation">,</span>  <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">18.99</span><span class="token punctuation">,</span>  <span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"Golang微服务进阶..."</span><span class="token punctuation">,</span>  <span class="token property">"createTime"</span><span class="token operator">:</span> <span class="token string">"2020-08-20"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不指定ID,则会默认生成</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">POST /books/_doc<span class="token punctuation">{</span>  <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"gRPC"</span><span class="token punctuation">,</span>  <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">180.99</span><span class="token punctuation">,</span>  <span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"高性能RPC框架"</span><span class="token punctuation">,</span>  <span class="token property">"createTime"</span><span class="token operator">:</span> <span class="token string">"1999-02-20"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-查看索引库数据"><a href="#4-查看索引库数据" class="headerlink" title="4.查看索引库数据"></a>4.查看索引库数据</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /books/_search<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-查看索引库mapping信息"><a href="#5-查看索引库mapping信息" class="headerlink" title="5.查看索引库mapping信息"></a>5.查看索引库mapping信息</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /books/_mapping<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6-删除文档"><a href="#6-删除文档" class="headerlink" title="6. 删除文档"></a>6. 删除文档</h4><p>删除id为1的文档</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">DELETE /books/<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-更新文档"><a href="#7-更新文档" class="headerlink" title="7.更新文档"></a>7.更新文档</h4><p>更新id为1的文档,会覆盖掉原来的数据,只留下title字段</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">POST /books/_doc/<span class="token number">1</span><span class="token punctuation">{</span>  <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"新的title"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>更新指定的字段</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">POST /books/_doc/<span class="token number">1</span>/_update<span class="token punctuation">{</span>  <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"只更新了title"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-批量插入"><a href="#8-批量插入" class="headerlink" title="8.批量插入"></a>8.批量插入</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json">PUT /books/_bulk<span class="token punctuation">{</span><span class="token property">"index"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"_id"</span><span class="token operator">:</span> <span class="token number">1002</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"批量插入的书籍2"</span><span class="token punctuation">,</span><span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">10.9</span><span class="token punctuation">,</span><span class="token property">"content"</span><span class="token operator">:</span> <span class="token string">"内容2"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"index"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"_id"</span><span class="token operator">:</span> <span class="token number">1003</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"批量插入的书籍3"</span><span class="token punctuation">,</span><span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">10.9</span><span class="token punctuation">,</span><span class="token property">"content"</span><span class="token operator">:</span> <span class="token string">"内容3"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"index"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"_id"</span><span class="token operator">:</span> <span class="token number">1004</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"批量插入的书籍4"</span><span class="token punctuation">,</span><span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">10.9</span><span class="token punctuation">,</span><span class="token property">"content"</span><span class="token operator">:</span> <span class="token string">"内容4"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-批量操作-新增、修改、删除"><a href="#9-批量操作-新增、修改、删除" class="headerlink" title="9.批量操作(新增、修改、删除)"></a>9.批量操作(新增、修改、删除)</h4><p>“index”表示新增</p><p>“update”表示修改</p><p>“delete”表示删除</p><p>三者可以混合使用</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">PUT /books/_bulk<span class="token punctuation">{</span><span class="token property">"index"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"_id"</span><span class="token operator">:</span> <span class="token number">1005</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"批量插入的书籍5"</span><span class="token punctuation">,</span><span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">10.9</span><span class="token punctuation">,</span><span class="token property">"content"</span><span class="token operator">:</span> <span class="token string">"内容5"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"update"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"_id"</span><span class="token operator">:</span> <span class="token number">1001</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"doc"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"批量修改title"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"delete"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"_id"</span><span class="token operator">:</span> <span class="token number">1002</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-DSL查询语句"><a href="#8-DSL查询语句" class="headerlink" title="8.DSL查询语句"></a>8.DSL查询语句</h3><h4 id="1-match-all-查询全部数据"><a href="#1-match-all-查询全部数据" class="headerlink" title="1.match_all 查询全部数据"></a>1.match_all 查询全部数据</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /books/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Sort-排序查询"><a href="#2-Sort-排序查询" class="headerlink" title="2. Sort 排序查询"></a>2. Sort 排序查询</h4><ul><li>Desc 降序</li><li>Asc 升序</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /books/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"price"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"order"</span><span class="token operator">:</span> <span class="token string">"desc"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-分页查询"><a href="#3-分页查询" class="headerlink" title="3.分页查询"></a>3.分页查询</h4><ul><li>from 表示偏移量</li><li>size 表示页容量</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /books/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"from"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-查询只获取指定的字段"><a href="#4-查询只获取指定的字段" class="headerlink" title="4. 查询只获取指定的字段"></a>4. 查询只获取指定的字段</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /books/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-匹配查询"><a href="#5-匹配查询" class="headerlink" title="5. 匹配查询"></a>5. 匹配查询</h4><h4 id="5-1-match-模糊匹配查询"><a href="#5-1-match-模糊匹配查询" class="headerlink" title="5.1 match 模糊匹配查询"></a>5.1 match 模糊匹配查询</h4><p>只要包含关键字 就表示匹配成功</p><ul><li>text类型才会分词匹配</li><li>keyword类型 按照整体来匹配</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /users/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"name"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-12term-精确匹配查询"><a href="#5-12term-精确匹配查询" class="headerlink" title="5.12term 精确匹配查询"></a>5.12term 精确匹配查询</h4><ul><li>text类型才会分词匹配</li><li>keyword 类型 按照整体来匹配</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /books/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"content"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"1"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-范围查询"><a href="#6-范围查询" class="headerlink" title="6.范围查询"></a>6.范围查询</h4><ul><li>gte : &gt;</li><li>let : &lt;</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /books/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"price"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"gte"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token property">"lte"</span><span class="token operator">:</span> <span class="token number">20</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-匹配前缀查询"><a href="#7-匹配前缀查询" class="headerlink" title="7. 匹配前缀查询"></a>7. 匹配前缀查询</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /books/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"prefix"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"Go"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-通配符查询"><a href="#8-通配符查询" class="headerlink" title="8. 通配符查询"></a>8. 通配符查询</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /books/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"wildcard"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"北*"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-根据一组id查询"><a href="#9-根据一组id查询" class="headerlink" title="9. 根据一组id查询"></a>9. 根据一组id查询</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /books/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"ids"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"values"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token number">1003</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-布尔查询-组合查询"><a href="#10-布尔查询-组合查询" class="headerlink" title="10. 布尔查询(组合查询)"></a>10. 布尔查询(组合查询)</h4><ul><li>must: and</li><li>shoud: or</li><li>must_not: not</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json">#must使用<span class="token punctuation">,</span>查询price <span class="token number">10</span><span class="token number">-100</span>区间、并且createTime小于<span class="token number">2021</span>日期的数据GET /books/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"price"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"gte"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>              <span class="token property">"lte"</span><span class="token operator">:</span> <span class="token number">100</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"createTime"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"lte"</span><span class="token operator">:</span> <span class="token string">"2021-01-01"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span># should使用<span class="token punctuation">,</span>查询price大于<span class="token number">200</span> 或者小于<span class="token number">30</span>的数据GET /book/books/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"should"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"price"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"gte"</span><span class="token operator">:</span> <span class="token number">100</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"price"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"lte"</span><span class="token operator">:</span> <span class="token number">30</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span># must_not使用<span class="token punctuation">,</span>排除掉price为<span class="token number">180.99</span>的数据GET /book/books/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"must_not"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">180.99</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11-高亮查询"><a href="#11-高亮查询" class="headerlink" title="11. 高亮查询"></a>11. 高亮查询</h4><p>在  “1” 前后追加 span 标签</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /books/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"content"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"1"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"highlight"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"pre_tags"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;span style='color:red'&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token property">"post_tags"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;/span&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"content"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-多字段查询"><a href="#12-多字段查询" class="headerlink" title="12. 多字段查询"></a>12. 多字段查询</h4><p>根据<code>gRpc</code> 关键词在 title、content字段中匹配</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /books/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"multi_match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"query"</span><span class="token operator">:</span> <span class="token string">"gRpc"</span><span class="token punctuation">,</span>      <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">,</span><span class="token string">"content"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-filter过滤器"><a href="#13-filter过滤器" class="headerlink" title="13. filter过滤器"></a>13. filter过滤器</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json">#查询 '服务' 并且 price小于<span class="token number">20</span>的GET /book/books/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"title"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"服务"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"price"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"lte"</span><span class="token operator">:</span> <span class="token number">20</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="14-聚合查询"><a href="#14-聚合查询" class="headerlink" title="14. 聚合查询"></a>14. 聚合查询</h4><p>根据price 进行分组统计</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /books/_search<span class="token punctuation">{</span>  <span class="token property">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"price_group"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"terms"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"price"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-IK分词器"><a href="#9-IK分词器" class="headerlink" title="9. IK分词器"></a>9. IK分词器</h3><p><u>IK分词器提供了两种分词</u></p><ul><li><p>ik_max_word</p><p><u>最细粒度分词</u></p></li><li><p>Ik_smart</p><p><u>最粗粒度分词</u></p></li></ul><h4 id="1-创建索引库时-指定分词器"><a href="#1-创建索引库时-指定分词器" class="headerlink" title="1. 创建索引库时,指定分词器"></a>1. 创建索引库时,指定分词器</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json">PUT /users<span class="token punctuation">{</span>  <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"username"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>        <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_max_word"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"nikename"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>        <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_smart"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-插入数据"><a href="#2-插入数据" class="headerlink" title="2. 插入数据"></a>2. 插入数据</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json">POST /users/_doc/<span class="token number">1001</span><span class="token punctuation">{</span>  <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"i name is 管理员"</span><span class="token punctuation">,</span>  <span class="token property">"nikename"</span> <span class="token operator">:</span> <span class="token string">"管理员"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-分词查询"><a href="#3-分词查询" class="headerlink" title="3.分词查询"></a>3.分词查询</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /users/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"username"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"管理"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法【动态数组】</title>
      <link href="2021/05/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E3%80%90%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84%E3%80%91/"/>
      <url>2021/05/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E3%80%90%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p><u>数组,是大多编程语言中的一个最基本也是最基础的一个<code>数据结构</code>,属于<code>线性表</code>,但是数组是不可以动态扩容的,也就是说在初始化数组时就已经决定了他的内存所占大小,那么就有了很大的局限性,不过众多语言都有它的强化版代表.比如Java中的List、Go中的切片等,为了更加深入的理解数组,本章将手写一个java中的切片(Slice)</u></p><p>话不多说直接上代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lxz<span class="token punctuation">.</span></span>动态数组<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/** * Java实现切片(动态数组)(灵感来源:ArrayList) * @author lx Zhang. * @date 2021/5/15 10:22 上午 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Slice</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">/** ------------------------default value-----------------------------------------*/</span>    <span class="token comment">/** 默认初始化长度*/</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_SIZE_VALUE <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment">/** 自动扩容的最大长度*/</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_MAX_VALUE <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token comment">/** ------------------------data Attributes-----------------------------------------*/</span>    <span class="token comment">/** 切片长度*/</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token comment">/** 数据存储数组*/</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> defaultValue<span class="token punctuation">;</span>    <span class="token comment">/** ------------------------construction-----------------------------------------*/</span>    <span class="token comment">/** 指定切片长度构造函数*/</span>    <span class="token keyword">public</span> <span class="token class-name">Slice</span> <span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">/** 指定的长度不能小于默认长度,否则将依然使用默认长度*/</span>        capacity <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> DEFAULT_SIZE_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultValue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/** 不指定长度则使用默认长度*/</span>    <span class="token keyword">public</span> <span class="token class-name">Slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>DEFAULT_SIZE_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/** ------------------------------API-------------------------------------------*/</span>    <span class="token comment">/**     * 获取当前切片扩容的长度     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultValue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取当前切片的数据数量     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 清空切片     * 这里的清空只是重置了存储数组的长度,并没有清空数据,可以多次复用.     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            defaultValue<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 切片是否为空     * @return true: empty     *         false: not empty     */</span>    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 添加数据到尾部     * @param value 泛型数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 添加数据到指定位置     * @param value     * @param index     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> value<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;</span> size<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"index is max error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reSet</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> index<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            defaultValue<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> defaultValue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//后移</span>        <span class="token punctuation">}</span>        defaultValue<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 动态扩容1.5倍     * @param capacity     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">reSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> defaultValue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">&gt;=</span> capacity<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//扩容1.5倍</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>oldCapacity <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span>newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>newCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//将旧数组的数据,迁移到新数组</span>            newValues<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> defaultValue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        defaultValue <span class="token operator">=</span> newValues<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 将新数据和指定的位置的数据替换,并且返回旧数据,     * @param value     * @param index     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">replaceAndGet</span><span class="token punctuation">(</span><span class="token class-name">E</span> value<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">verifyIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">E</span> oldValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> defaultValue<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        defaultValue<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 根据索引获取数据     * @param index     */</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">verifyIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> defaultValue<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 根据索引删除并且返回数据     * @param index     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">E</span>  <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">verifyIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">E</span> oldValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> defaultValue<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            defaultValue<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> defaultValue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        defaultValue<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 查看数据在切片中的索引     * @param element     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">E</span> element<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultValue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 切片中是否包含该元素     * @param element     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">E</span> element<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * index索引 校验     * @Author lx Zhang.     * @Date 2021/5/15 2:30 下午     * @Param [index]     * @return void     **/</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">verifyIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"index is out max size!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Slice{"</span> <span class="token operator">+</span>                <span class="token string">"size="</span> <span class="token operator">+</span> size <span class="token operator">+</span>                <span class="token string">", defaultValue="</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>defaultValue<span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -数组 -数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法【复杂度】</title>
      <link href="2021/05/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E3%80%90%E5%A4%8D%E6%9D%82%E5%BA%A6%E3%80%91/"/>
      <url>2021/05/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E3%80%90%E5%A4%8D%E6%9D%82%E5%BA%A6%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p><u>一种功能的实现可以有n多个算法去解决,但是每一种算法的效率有所不同,如下功能,将用两种同的算法来完成,分别比较下效率,两种效率的差异就是算法的复杂度高低之分</u></p><h5 id="1-求出第n个斐波那契数"><a href="#1-求出第n个斐波那契数" class="headerlink" title="1.求出第n个斐波那契数"></a>1.求出第<code>n</code>个斐波那契数</h5><ul><li><p>什么是斐波那契数?</p><p><u>从第一项数值开始,每相近的两项数进行相加,得出第三项数值,然后由第二项和第三项相加,以此类推,直至获取到第<code>n</code>项数值如:</u></p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">011235813....---------------------原理如下0+1=11+1=22+1=32+3=53+5=85+8=13....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h6 id="第一种算法"><a href="#第一种算法" class="headerlink" title="第一种算法"></a>第一种算法</h6><p><strong>Java实现</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** * 求出第n项斐波那契数值 * @Author lx Zhang. * @Date 2021/5/15 9:07 上午 * @Param [n] * @return int **/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>结果:</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">5 消耗时长:1ms832040消耗时长:7ms102334155消耗时长:369ms未得出结果.....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><u>可以看出来,随着我们参数<code>n</code>的增大,消耗的时间成倍的增长,当<code>n</code>仅仅为60时,竟然无法算出结果,测试电脑为Mac m1 16G配置….</u></p><p><strong>接下来我们换go语言实现试试</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">/**求出第n项斐波那契数值 */</span><span class="token keyword">func</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">int64</span><span class="token punctuation">{</span><span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> n<span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">5       消耗时长 0ms610     消耗时长 0ms832040  消耗时长 0ms102334155   消耗时长 1ms....（n为50时）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><u>可以看出来go语言确实快了不少,但是随着参数的变大还是存在问题,显然是这个算法本身的问题</u></p><h6 id="第二种算法"><a href="#第二种算法" class="headerlink" title="第二种算法"></a>第二种算法</h6><p><strong>Java实现</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> second <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> first <span class="token operator">+</span> second<span class="token punctuation">;</span><span class="token comment">//先求出每两项之和</span>        <span class="token comment">//数值项相加后进行后移</span>        first <span class="token operator">=</span> second<span class="token punctuation">;</span> <span class="token comment">//上一轮的第二项,后移一位,成为下一轮的第一项</span>        second <span class="token operator">=</span> sum<span class="token punctuation">;</span>   <span class="token comment">//将求得的和赋值于本轮的第二项,成为下一轮的第二项</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> second<span class="token punctuation">;</span><span class="token comment">//直至找到第n项</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">5消耗时长:0ms832040消耗时长:0ms102334155消耗时长:0ms1820529360消耗时长:0ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><u>第二种算法明显比第一种算法效率要高得多,这就是不同的算法,不同的复杂度</u></p><h5 id="2-计算从1到-n的和"><a href="#2-计算从1到-n的和" class="headerlink" title="2.计算从1到 n的和"></a>2.计算从1到 n的和</h5><h6 id="第一种算法-1"><a href="#第一种算法-1" class="headerlink" title="第一种算法"></a>第一种算法</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">+=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第二种算法-1"><a href="#第二种算法-1" class="headerlink" title="第二种算法"></a>第二种算法</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">*</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><u>明显第二种使用到了公式,各方面都比第一种优雅、复杂度低</u></p><h5 id="3-如何评判一个算法的好坏"><a href="#3-如何评判一个算法的好坏" class="headerlink" title="3.如何评判一个算法的好坏?"></a>3.如何评判一个算法的好坏?</h5><p><u>一般从下维度来评估一个算法的优劣</u></p><ul><li>正确性、可读性、健壮性(必要条件)</li></ul><p><u>在符合以上三类条件后,再根据以下维度评判</u></p><ul><li>时间复杂度<ul><li>估算程序指令执行的次数(执行时间)</li></ul></li><li>空间复杂度<ul><li>估算所需占用的内存空间</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复杂度 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript学习之旅【二】接口</title>
      <link href="2021/05/10/Typescript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%BA%8C%E3%80%91%E6%8E%A5%E5%8F%A3/"/>
      <url>2021/05/10/Typescript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%BA%8C%E3%80%91%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>TypeScript的核心原则之一是对值所具有的<em>结构</em>进行类型检查。 它有时被称做“鸭式辨型法”或“结构性子类型化”。 在TypeScript里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。</p><h4 id="1-初识接口"><a href="#1-初识接口" class="headerlink" title="1. 初识接口"></a>1. 初识接口</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//定义接口</span><span class="token keyword">interface</span> <span class="token class-name">LabelledVal</span><span class="token punctuation">{</span>    <span class="token comment">//定义接口属性</span>    label<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//定义函数 参数为该接口</span><span class="token keyword">function</span>  <span class="token function">printLabel</span><span class="token punctuation">(</span>labelObj<span class="token operator">:</span> LabelledVal<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>labelObj<span class="token punctuation">.</span>label<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> myObj <span class="token operator">=</span> <span class="token punctuation">{</span>size<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span>label<span class="token operator">:</span> <span class="token string">'Size 10 Object'</span><span class="token punctuation">}</span><span class="token function">printLabel</span><span class="token punctuation">(</span>myObj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><u>在Typescript中,一个接口就好像一个形参,用于函数之间的参数描述</u></p><p><code>LabelledValue</code>接口就好比一个名字，用来描述上面例子里的要求。 它代表了有一个 <code>label</code>属性且类型为<code>string</code>的对象。 需要注意的是，我们在这里并不能像在其它语言里一样，说传给 <code>printLabel</code>的对象实现了这个接口。我们只会去关注值的外形。 只要传入的对象满足上面提到的必要条件，那么它就是被允许的。</p><p>还有一点值得提的是，类型检查器不会去检查属性的顺序，只要相应的属性存在并且类型也是对的就可以。</p><h4 id="2-可选属性定义"><a href="#2-可选属性定义" class="headerlink" title="2.可选属性定义"></a>2.可选属性定义</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">optionsConfig</span><span class="token punctuation">{</span>    <span class="token comment">// 通过? 表示该属性是可选的,不是必填项,不加? 默认都是必填项</span>    color<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>    width<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>config<span class="token operator">:</span> optionsConfig<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//这里什么都不填,依然不会编译出错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个<code>?</code>符号。</p><h4 id="3-只读属性定义"><a href="#3-只读属性定义" class="headerlink" title="3.只读属性定义"></a>3.只读属性定义</h4><p>一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 <code>readonly</code>来指定只读属性:</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//只读属性</span><span class="token keyword">interface</span> <span class="token class-name">Point</span><span class="token punctuation">{</span>    <span class="token keyword">readonly</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>    <span class="token keyword">readonly</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> p1<span class="token operator">:</span> Point <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>y<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token comment">//必须有初始化值,否则编译出错</span>p1<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">99</span> <span class="token comment">//再次赋值也会编译出错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>TypeScript具有<code>ReadonlyArray&lt;T&gt;</code>类型，它与<code>Array&lt;T&gt;</code>相似，只是把所有可变方法去掉了，因此可以确保数组创建后再也不能被修改：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//定义普通数组</span><span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token comment">//定义只读数组</span><span class="token keyword">let</span> onlyReadArr<span class="token operator">:</span> ReadonlyArray<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> aonlyReadArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">//err</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql学习之旅【六】explain</title>
      <link href="2021/05/09/Mysql%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E5%85%AD%E3%80%91explain/"/>
      <url>2021/05/09/Mysql%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E5%85%AD%E3%80%91explain/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>项目开发中，性能往往都是是我们重点关注的问题，其实很多时候一个SQL往往 是整个请求中瓶颈最大的地方，因此我们必须了解SQL语句的执行过程、数据库中是如何扫描表、如何使用索引的、是否命中索弓|等信息来帮助我们做SQL语句的优化。MySQL提供了explain/ desc语询,来显示这条SQL语句的执行计划，执行计划可以帮助我们查看SQL语句的执行情况，我们可以根据反馈的结果来进行SQL的优化。</p><ul><li><p>准备数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>role<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'ID'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'角色名'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8mb4_0900_ai_ci<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'ID'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户名'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>role_id<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'角色ID'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8mb4_0900_ai_ci<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">BEGIN</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>role<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'试用员工'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>role<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'正式员工'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>role<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'内部员工'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>role<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'经理'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>role<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'总经理'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>role<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'老板'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token keyword">BEGIN</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">'小张'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span> <span class="token string">'猪坚强'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1004</span><span class="token punctuation">,</span> <span class="token string">'华为强'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1005</span><span class="token punctuation">,</span> <span class="token string">'满城雪'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1006</span><span class="token punctuation">,</span> <span class="token string">'海问香'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1007</span><span class="token punctuation">,</span> <span class="token string">'蛮小满'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1008</span><span class="token punctuation">,</span> <span class="token string">'远浪'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1009</span><span class="token punctuation">,</span> <span class="token string">'lxz'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="1-Explain"><a href="#1-Explain" class="headerlink" title="1.Explain"></a>1.Explain</h4><p>通过<code>explain</code>可以查看 SQL的执行计划</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> <span class="token keyword">user</span>  <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以使用 <code>desc</code>来查看SQL的执行计划,两者均可</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">desc</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> <span class="token keyword">user</span>  <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Explain各个字段描述"><a href="#2-Explain各个字段描述" class="headerlink" title="2.Explain各个字段描述"></a>2.Explain各个字段描述</h4><h5 id="1-id"><a href="#1-id" class="headerlink" title="1. id"></a>1. id</h5><p>​    <u><code>id</code>字段一致的情况下,依照从上到下的顺序执行,一般多表关联查询时,id会一致</u></p><p>​    <img src="http://qrv86414a.hb-bkt.clouddn.com/FlZwr-AfHTEFGSuooPv0QHLW1wLO"></p><p>​    <u><code>id</code>字段不同一致的情况下,<code>id</code>越大,执行的顺序就越靠前,一般执行子查询时,id才会不一致</u></p><p><img src="http://qrv86414a.hb-bkt.clouddn.com/FqKbtw4_WE9ofjVO7XZvKVEA78fX"></p><p>​    <u><code>id</code>有一致也有不一致的情况下,越大越先执行,在<code>id</code>相同的表中中,按照顺序执行</u></p><h5 id="2-Select-type"><a href="#2-Select-type" class="headerlink" title="2. Select_type"></a>2. Select_type</h5><p>​    <u>查询类型描述</u></p><ul><li><p>SIMPLE <strong>表示简单的select查询语句</strong></p><p><img src="http://qrv86414a.hb-bkt.clouddn.com/FuoRoiZwtuehy_0p4MOdLAG0GGry"></p></li></ul><ul><li><p>PRIMARY <strong>表示查询条件中包含有子查询</strong></p></li><li><p>SUBQUERY  <strong>条件为子查询中的表</strong></p><p><img src="http://qrv86414a.hb-bkt.clouddn.com/FqqFnUuPlvTZq7jJ01ll-Xchjjxc"></p></li></ul><ul><li><p>UNION <strong>使用到<code>union</code>合并关联时,关联的表</strong></p><p><img src="http://qrv86414a.hb-bkt.clouddn.com/FkyQgr0D7PJgu9MZ9-8m3ndmnqIR"></p></li></ul><ul><li>DEPENDENT UNION <strong>在子查询中,使用union关联的第一张表</strong></li><li>DEPENDENT SUBQUERY <strong>在子查询中,使用union使用到的第二张或以上的表</strong></li></ul><h5 id="3-table"><a href="#3-table" class="headerlink" title="3 .table"></a>3 .table</h5><p><u>表示该SQL语句是用作于哪张表,取值为:表名、表别名、衍生表名等</u></p><h5 id="4-partitions"><a href="#4-partitions" class="headerlink" title="4 .partitions"></a>4 .partitions</h5><p><u>涉及到分区的表</u></p><h5 id="5-type"><a href="#5-type" class="headerlink" title="5 .type"></a>5 .type</h5><p><u>SQL性能指标的重要参数,通过<code>type</code>来判断是否使用到了索引,是否全表扫描,是否范围查询等</u></p><ul><li><p>null: <strong>代表没有访问任何表</strong></p></li><li><p>system: <strong>系统表，少量数据，往往不需要进行磁盘IO</strong></p></li><li><p>const: <strong>根据主键或者唯一索引字段查询,一次io就查询到了数据</strong></p></li><li><p>eq_ref: <strong>关联查询并且使用到了主键索引</strong></p></li><li><p>ref : <strong>通过非唯一索引查询到了数据</strong></p></li><li><p>range: <strong>范围查询的条件字段使用了索引</strong></p></li><li><p>index: <strong>使用到了索引,扫描了索引树</strong></p></li><li><p>all: <strong>全表扫描(最差的查询)</strong></p><p><strong>性能由好到低的顺序:</strong></p><p>​    system  &gt;  const  &gt;  eq_ref  &gt;  ref  &gt;  range  &gt;  index  &gt;  ALL</p><p>一般能达到 <code>ref</code>或以上即可</p></li></ul><h5 id="6-possible-keys"><a href="#6-possible-keys" class="headerlink" title="6 .possible_keys"></a>6 .possible_keys</h5><p><u>优化器可能使用到的索引</u></p><h5 id="7-key"><a href="#7-key" class="headerlink" title="7 .key"></a>7 .key</h5><p><u>优化器实际选择的索引,key列显示MySQL实际决定使用的键（索引)</u></p><h5 id="8-key-len"><a href="#8-key-len" class="headerlink" title="8 .key_len"></a>8 .key_len</h5><p>使用的索引的字节长度</p><h5 id="9-ref"><a href="#9-ref" class="headerlink" title="9 .ref"></a>9 .ref</h5><p><u>进行比较的索引列</u></p><h5 id="10-rows"><a href="#10-rows" class="headerlink" title="10 .rows"></a>10 .rows</h5><p><u>优化器预估的记录数量</u></p><h5 id="11-filtered"><a href="#11-filtered" class="headerlink" title="11 .filtered"></a>11 .filtered</h5><p><u>根据条件过滤得到的记录百分比</u></p><h5 id="12-Extra"><a href="#12-Extra" class="headerlink" title="12. Extra"></a>12. Extra</h5><p>额外的显示选型</p>]]></content>
      
      
      <categories>
          
          <category> Mysql系列 </category>
          
          <category> 面试系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBA </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript学习之旅【一】基础类型</title>
      <link href="2021/05/09/TypeScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%B8%80%E3%80%91%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/"/>
      <url>2021/05/09/TypeScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%B8%80%E3%80%91%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>TypeScript是JavaScript的超集,它可以编译成JavaScript</code></p><h3 id="1-Hello-Wrold"><a href="#1-Hello-Wrold" class="headerlink" title="1. Hello Wrold"></a>1. Hello Wrold</h3><h4 id="1-1-安装ts"><a href="#1-1-安装ts" class="headerlink" title="1.1 安装ts"></a>1.1 安装ts</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install -g typescript<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-2-永远的Hello-Word"><a href="#1-2-永远的Hello-Word" class="headerlink" title="1.2 永远的Hello Word"></a>1.2 永远的Hello Word</h4><p>创建Hello.ts文件</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello word!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-3-编译成js"><a href="#1-3-编译成js" class="headerlink" title="1.3 编译成js"></a>1.3 编译成js</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tsc Hello.ts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-4-node-运行js"><a href="#1-4-node-运行js" class="headerlink" title="1.4 node 运行js"></a>1.4 node 运行js</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">node Hello.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-简化执行ts的步骤"><a href="#2-简化执行ts的步骤" class="headerlink" title="2.简化执行ts的步骤"></a>2.简化执行ts的步骤</h3><ul><li><p>安装ts-node包</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm i -g ts-node<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用方式</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ts-node xxx.ts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="3-变量"><a href="#3-变量" class="headerlink" title="3.变量"></a>3.变量</h3><h4 id="3-1-创建变量"><a href="#3-1-创建变量" class="headerlink" title="3.1 创建变量"></a>3.1 创建变量</h4><ul><li><p>语法</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">修饰符 变量名<span class="token operator">:</span> 数据类型<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>声明字符串为例(变量可赋值可不赋值)</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//修饰符  变量名: 数据类型</span><span class="token keyword">let</span> username<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">'lxz'</span><span class="token punctuation">;</span>or<span class="token keyword">let</span> password<span class="token operator">:</span> String<span class="token punctuation">;</span>password <span class="token operator">=</span> <span class="token string">'admin'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>类型推导</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//boolean 类型</span><span class="token keyword">let</span> isDone <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//string 类型</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span><span class="token comment">//数值</span><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4-TypeScript的基本数据类型"><a href="#4-TypeScript的基本数据类型" class="headerlink" title="4.  TypeScript的基本数据类型"></a>4.  TypeScript的基本数据类型</h3><h4 id="4-1-布尔值"><a href="#4-1-布尔值" class="headerlink" title="4.1 布尔值"></a>4.1 布尔值</h4><p>最基本的数据类型就是简单的true/false值，在JavaScript和TypeScript里叫做<code>boolean</code>（其它语言中也一样）。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> isDone<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-2-数值"><a href="#4-2-数值" class="headerlink" title="4.2 数值"></a>4.2 数值</h4><p>和JavaScript一样，TypeScript里的所有数字都是浮点数。 这些浮点数的类型是 <code>number</code>。 除了支持十进制和十六进制字面量，TypeScript还支持ECMAScript 2015中引入的二进制和八进制字面量。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> decLiteral<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">let</span> hexLiteral<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0xf00d</span><span class="token punctuation">;</span><span class="token keyword">let</span> binaryLiteral<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0b1010</span><span class="token punctuation">;</span><span class="token keyword">let</span> octalLiteral<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0o744</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-字符串"><a href="#4-3-字符串" class="headerlink" title="4.3 字符串"></a>4.3 字符串</h4><p>JavaScript程序的另一项基本操作是处理网页或服务器端的文本数据。 像其它语言里一样，我们使用 <code>string</code>表示文本数据类型。 和JavaScript一样，可以使用双引号（ <code>"</code>）或单引号（<code>'</code>）表示字符串。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"bob"</span><span class="token punctuation">;</span>name <span class="token operator">=</span> <span class="token string">"smith"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>你还可以使用<em>模版字符串</em>，它可以定义多行文本和内嵌表达式。 这种字符串是被反引号包围（ ```），并且以<code>${ expr }</code>这种形式嵌入表达式</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> names<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">'lxz'</span><span class="token keyword">let</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token keyword">let</span> content<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">我叫</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>names<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,今年</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">岁!</span><span class="token template-punctuation string">`</span></span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-数组"><a href="#4-4-数组" class="headerlink" title="4.4 数组"></a>4.4 数组</h4><p>TypeScript像JavaScript一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上 <code>[]</code>，表示由此类型元素组成的一个数组：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//定义数组</span><span class="token keyword">let</span> list<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token comment">//定义泛型数组</span><span class="token keyword">let</span> numbers<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-5-元组"><a href="#4-5-元组" class="headerlink" title="4.5 元组"></a>4.5 元组</h4><p>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 <code>string</code>和<code>number</code>类型的元组。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//定义元组类似于map</span><span class="token keyword">let</span> x<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment">//定义集合元组</span><span class="token keyword">let</span> xArr <span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>xArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'小张'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span>xArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'小刘'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span>xArr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'小华'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xArr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-6-枚举"><a href="#4-6-枚举" class="headerlink" title="4.6 枚举"></a>4.6 枚举</h4><p><code>enum</code>类型是对JavaScript标准数据类型的一个补充。 像C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//定义枚举，默认值从0开始,然后依次递增,加入第一个属性设置为1,就从1开始递增</span><span class="token keyword">enum</span> Week<span class="token punctuation">{</span>    周一 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    周二<span class="token punctuation">,</span>    周三<span class="token punctuation">,</span>    周四<span class="token punctuation">,</span>    周五<span class="token punctuation">,</span>    周六<span class="token punctuation">,</span>    周日<span class="token punctuation">}</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Week<span class="token punctuation">.</span>周一<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-7-any"><a href="#4-7-any" class="headerlink" title="4.7 any"></a>4.7 any</h4><p>任意类型,泛型</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> yz<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">any</span><span class="token punctuation">]</span>yz <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'dwa'</span><span class="token punctuation">]</span>yz <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token number">2112</span><span class="token punctuation">]</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>yz<span class="token punctuation">)</span><span class="token comment">//定义一个任意类型的数组</span><span class="token keyword">let</span> list<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'456'</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-8-void"><a href="#4-8-void" class="headerlink" title="4.8 void"></a>4.8 void</h4><p>某种程度上来说，<code>void</code>类型像是与<code>any</code>类型相反，它表示没有任何类型。 当一个函数没有返回值时，你通常会见到其返回值类型是 <code>void</code>:</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">warnUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"This is my warning message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>声明一个<code>void</code>类型的变量没有什么大用，因为你只能为它赋予<code>undefined</code>和<code>null</code>,赋予其他任意类型都会报错</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token keyword">void</span>a <span class="token operator">=</span> <span class="token keyword">undefined</span>a <span class="token operator">=</span> <span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-9-Null-和-Undefined"><a href="#4-9-Null-和-Undefined" class="headerlink" title="4.9 Null 和 Undefined"></a>4.9 Null 和 Undefined</h4><p>默认情况下<code>null</code>和<code>undefined</code>是所有类型的子类型。 就是说你可以把 <code>null</code>和<code>undefined</code>赋值给<code>number</code>类型的变量。</p><h4 id="4-10-Never"><a href="#4-10-Never" class="headerlink" title="4.10 Never"></a>4.10 Never</h4><p><code>never</code>类型表示的是那些永不存在的值的类型。 例如， <code>never</code>类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是 <code>never</code>类型，当它们被永不为真的类型保护所约束时。</p><p><code>never</code>类型是任何类型的子类型，也可以赋值给任何类型；然而，<em>没有</em>类型是<code>never</code>的子类型或可以赋值给<code>never</code>类型（除了<code>never</code>本身之外）。 即使 <code>any</code>也不可以赋值给<code>never</code>。</p><p>下面是一些返回<code>never</code>类型的函数：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 返回never的函数必须存在无法达到的终点</span><span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 推断的返回值类型为never</span><span class="token keyword">function</span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Something failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 返回never的函数必须存在无法达到的终点</span><span class="token keyword">function</span> <span class="token function">infiniteLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-11-Object"><a href="#4-11-Object" class="headerlink" title="4.11 Object"></a>4.11 Object</h4><p><code>object</code>表示非原始类型，也就是除<code>number</code>，<code>string</code>，<code>boolean</code>，<code>symbol</code>，<code>null</code>或<code>undefined</code>之外的类型。</p><p>使用<code>object</code>类型，就可以更好的表示像<code>Object.create</code>这样的API。例如：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span>o<span class="token operator">:</span> object <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> prop<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql学习之旅【五】锁</title>
      <link href="2021/05/08/Mysql%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%BA%94%E3%80%91%E9%94%81/"/>
      <url>2021/05/08/Mysql%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%BA%94%E3%80%91%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h2 id="锁机制和实战"><a href="#锁机制和实战" class="headerlink" title="锁机制和实战"></a>锁机制和实战</h2><h3 id="1-锁分类"><a href="#1-锁分类" class="headerlink" title="1. 锁分类"></a>1. 锁分类</h3><h4 id="按照粒度来分"><a href="#按照粒度来分" class="headerlink" title="按照粒度来分:"></a>按照粒度来分:</h4><ol><li><p>表级锁</p><p><u>每次操作锁住整张表。锁定粒度大,发生锁冲突的概率最高，并发度最低。应用在MyISAM、 InnoDB、 BDB等存储引擎</u></p></li><li><p>行级锁</p><p><u>每次操作锁住一行数据,粒度最小,并发度最高,应用在InnoDB引擎中</u></p></li><li><p>页级锁</p><p><u>每次锁定相邻的一组记录,锁定粒度界于表锁和行锁之间，开销和加锁时间界于表锁和行锁之间，并发度-般。应用在BDB存储引擎中</u></p></li></ol><table><thead><tr><th></th><th>行锁</th><th>表锁</th><th>页锁</th></tr></thead><tbody><tr><td>MyISAM</td><td></td><td>支持</td><td></td></tr><tr><td>BDB</td><td></td><td>支持</td><td>支持</td></tr><tr><td>InnoDB</td><td>支持</td><td>支持</td><td></td></tr></tbody></table><h4 id="按照类型来分"><a href="#按照类型来分" class="headerlink" title="按照类型来分:"></a>按照类型来分:</h4><ol><li><p>读锁(共享锁)</p><p><u>针对同一份数据，多个读操作可以同时进行而不会互相影响。</u></p></li><li><p>写锁(独占锁)</p><p><u>当前写操作没有完成前，它会阻断其他写锁和读锁。</u></p></li></ol><h4 id="按照性能来分"><a href="#按照性能来分" class="headerlink" title="按照性能来分:"></a>按照性能来分:</h4><ol><li><p>乐观锁</p><p><u>通过版本号控制,在数据更新同时比对版本号是否一致,如果不一致则意味着发生了锁冲突,提交失败</u></p></li><li><p>悲观锁</p><p><u>在对一条数据修改的时候,为了避免同时被其他人修改,在修改数据之前先锁定，再修改的控制方式。共享锁和排他锁是悲观锁的不同实现，但都属于悲观锁范畴</u></p></li></ol><h3 id="2-悲观锁"><a href="#2-悲观锁" class="headerlink" title="2.悲观锁"></a>2.悲观锁</h3><ul><li>表级锁</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#给表加上表锁 可选 读锁 or 写锁</span><span class="token keyword">lock</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>tableName<span class="token punctuation">`</span> <span class="token keyword">READ</span><span class="token operator">|</span><span class="token keyword">WRITE</span><span class="token comment">#释放锁</span><span class="token keyword">UNLOCK</span> <span class="token keyword">TABLES</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><u>A会话 对该表设置 表级READ锁后,A会话和其他会话都可以进行读操作,但A会话不允许进行增删改操作,会报错,其他会话进行增删改查将会进入阻塞状态。</u></p><p><u>A会话对该表设置 表级WRITE锁后,A会话可以对其做增删改查操作,其他会话对表的所有操作都将进入阻塞状态。</u></p><p>总结: <strong><u>表级读锁,会阻塞写操作,但不会阻塞读操作,而写锁会阻塞其他连接会话的所有操作</u></strong></p><h4 id="1-行级锁"><a href="#1-行级锁" class="headerlink" title="1.行级锁"></a>1.行级锁</h4><ul><li><p><strong>读锁</strong></p><p>加锁语法:  <strong>select … lock in share mode</strong></p><p>如:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> account <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token keyword">lock</span> <span class="token operator">in</span> <span class="token keyword">SHARE</span> <span class="token keyword">MODE</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example: </p><ol><li><p>给一行数据加上行锁,再起一个会话去修改</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#开启一个事务</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">start</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token comment">#查询 并且加上行锁</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> account <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token keyword">lock</span> <span class="token operator">in</span> <span class="token keyword">SHARE</span> <span class="token keyword">MODE</span>    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+--------+</span><span class="token operator">|</span> name <span class="token operator">|</span> money  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+--------+</span><span class="token operator">|</span> A    <span class="token operator">|</span> <span class="token number">100.00</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+--------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>另起一个会话去修改name为A的数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">update</span> account <span class="token keyword">set</span> money <span class="token operator">=</span> <span class="token number">90</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span> <span class="token comment">#这里将会一直阻塞,直至超时,抛出下面的异常消息</span><span class="token number">1205</span> <span class="token operator">-</span> <span class="token keyword">Lock</span> wait timeout exceeded<span class="token punctuation">;</span> try restarting <span class="token keyword">transaction</span>mysql<span class="token operator">&gt;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>我们试着用查询语句去查这条数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+--------+</span><span class="token operator">|</span> name <span class="token operator">|</span> money  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+--------+</span><span class="token operator">|</span> A    <span class="token operator">|</span> <span class="token number">100.00</span> <span class="token operator">|</span><span class="token operator">|</span> B    <span class="token operator">|</span> <span class="token number">100.00</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+--------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>可以看到查询语句是没有问题的!</p></li><li><p>那么接下来我们将事务提交。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">commit</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>再次使用其他会话去修改。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">update</span> account <span class="token keyword">set</span> money <span class="token operator">=</span> <span class="token number">90</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span> mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+--------+</span><span class="token operator">|</span> name <span class="token operator">|</span> money  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+--------+</span><span class="token operator">|</span> A    <span class="token operator">|</span> <span class="token number">90.00</span>  <span class="token operator">|</span><span class="token operator">|</span> B    <span class="token operator">|</span> <span class="token number">100.00</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+--------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改完成!</p></li></ol><p>总结: <u><strong>行级的读锁,同样不会阻塞其他会话的读操作,但是会阻塞修改操作</strong></u></p></li><li><p><strong>写锁</strong></p><p>加锁语法: 在SQL末尾加上 <code>for update</code></p><p><u>InnoDB 引擎默认会在update、delete语句加上 for update</u>,<u>行级锁的实现,其实是依靠其对应的索引,如果操作没用到索引的查询,会升级为表锁</u></p><p>Example:</p><ol><li><p>开启一个事务,修改某一条数据,默认会加上<strong>行级写锁</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> mysql<span class="token operator">&gt;</span> <span class="token keyword">update</span> account <span class="token keyword">set</span> money<span class="token operator">=</span><span class="token number">200</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启新的会话去读取这条数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+-------+</span><span class="token operator">|</span> name <span class="token operator">|</span> money <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+-------+</span><span class="token operator">|</span> A    <span class="token operator">|</span> <span class="token number">90.00</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到,读取是没有问题的!</p></li><li><p>接下来试试修改</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">update</span> account <span class="token keyword">set</span> money <span class="token operator">=</span> <span class="token number">300</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">1205</span> <span class="token operator">-</span> <span class="token keyword">Lock</span> wait timeout exceeded<span class="token punctuation">;</span> try restarting <span class="token keyword">transaction</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改则会阻塞在这里…,直到释放锁,或者超时</p></li><li><p>把事务提交</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">commit</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>再次修改</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">update</span> account <span class="token keyword">set</span> money <span class="token operator">=</span> <span class="token number">300</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改完成!</p></li></ol><p>总结:<u><strong>行级的写锁,本身是会阻塞其他会话的任何操作,但是上面测试却发现并不会阻塞其他会话的读操作,这是因为Mysql使用了MVCC机制来提高了读写的并发能力,所以Mysql的写锁只会阻塞除了当前会话以外的写操作</strong></u></p></li></ul><h3 id="3-乐观锁"><a href="#3-乐观锁" class="headerlink" title="3.乐观锁"></a>3.乐观锁</h3><p>乐观锁其实并不是数据库提供的机制,而是由开发人员构思出来的一种<code>无锁</code>机制,乐观锁也是<code>CAS</code>的实现,<code>CAS</code>是比较并且替换,</p><p>也就是说,先获取预先值,再比对,如果一致就替换掉,注意这里的<code>比较再替换</code>是原子性的.</p><p><strong>实现</strong>:</p><p>在数据表中添加一个<code>version</code>字段,表示更新的次数,每次更新前都预先获取一次值,在执行Update时,加上where version = <code>预先获取的version值</code>,这样就能实现乐观锁</p>]]></content>
      
      
      <categories>
          
          <category> Mysql系列 </category>
          
          <category> 面试系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBA </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql学习之旅【四】事务</title>
      <link href="2021/05/08/Mysql%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E5%9B%9B%E3%80%91%E4%BA%8B%E5%8A%A1/"/>
      <url>2021/05/08/Mysql%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E5%9B%9B%E3%80%91%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><h4 id="1-什么是事务"><a href="#1-什么是事务" class="headerlink" title="1.什么是事务?"></a>1.什么是事务?</h4><p><u>事务是一组或者多条程序指令 是一些操作的集合.用专业术语来讲,他就是一个程序的执行单元；大部分人都会将事务ACID关联在一起,其实事务本身并不包含这四个特性,我们需要通过<br>某些手段来满足这四个特性,那么就可以称之为一个事务,也就是一个真正的 “事务”</u></p><p><strong>事务四大特性</strong></p><ul><li><p><strong>原子性(Atomicity)</strong></p><p><u>满足原子操作,对数据的操作,要么全部执行,要么全部失败;</u></p></li><li><p><strong>一致性(Consistency)</strong></p><p><u>事务开始和完成,数据都必须保证一致性,或者说是完整性; 例:    如两个账户共100元,无论他们两个来回转账多少次,总金额永远是100</u></p></li><li><p><strong>隔离性(Isolation)</strong></p><p><u>事务执行过程中,是相互隔离,相互不可见的</u></p></li><li><p><strong>持久性(Durability)</strong></p><p><u>对于事务数据的修改,影响是永久性的</u></p></li></ul><h4 id="2-事务隔离级别"><a href="#2-事务隔离级别" class="headerlink" title="2.事务隔离级别"></a>2.事务隔离级别</h4><p> <strong>为什么需要事务隔离级别?</strong></p><p> 因为存在事务并发情况下引发的问题:</p><ul><li><p><strong>脏读</strong></p><p><u>A事务读取到了B事务 已修改但未提交的数据,假如B事务进行了回滚,A读取到的则是脏数据                  (引发了隔离性)</u></p></li><li><p><strong>不可重复读</strong></p><p><u>A事务在本次事务中对同一类数据进行了多次读取,结果出现了数据不一致的问题,可能其他事务在中间做了修改    (破坏了一致性,主要针对于update语句)</u></p></li><li><p><strong>幻读</strong></p><p><u>A事务在本次事务中,获取了两次数据,第一次和第二次的数据量不一致,中间可能其他事务添加或删除了数据     (破坏了一致性,主要针对于insert、delete语句)</u></p></li></ul><p><strong>标准隔离级别,如下四种</strong></p><ul><li><p><strong>读未提交 (Read Uncommitted)</strong></p><p><u>可以读到其他事务未提交的数据,最低级别,只能保证持久性 (会产生脏读、幻读、不可重复读)</u></p></li><li><p><strong>读已提交 (Read Committed)</strong></p><p><u>可以读到其他事务已提交的数据,语句级别（会产生不可重复读、幻读）</u></p></li><li><p><strong>可重复读(Repeatable Read)</strong></p><p><u>事务级别(阻止了脏读、不可重复读的问题,会产生幻读)</u></p><p>通过MVCC机制实现,解决了不可重复读、脏读</p></li><li><p><strong>串行化 (Serializable)</strong></p><p><u>最高级别,所有的事务完全同步执行,没有并发可言,性能极低</u></p></li></ul><p><u>这四个级别只是定义的标准,各大数据库厂商并不是完全按照这个标准</u></p><p><strong>Mysql InnoDB 默认隔离级别为(可重复读)</strong></p><h4 id="3-Mysql-实现事务隔离级别"><a href="#3-Mysql-实现事务隔离级别" class="headerlink" title="3. Mysql 实现事务隔离级别"></a>3. Mysql 实现事务隔离级别</h4><p>​    依靠两种机制: 锁机制、MVCC</p><ul><li><p>锁</p><p>粒度来分：<strong>行锁、表锁</strong><br>类型来分: <strong>读锁、写锁</strong>(读锁可以并发执行,一旦有写锁的加入,就会阻塞)</p><p>锁机制:</p><p><strong>阻止其他事务对数据进行操作,该机制实现各个隔离级别主要体现在 操作数据时进行加锁和锁的释放时机略有不同</strong></p><ol><li><p>读未提交(RU)</p><p><u>事务操作数据时,不会加锁,所以性能极高,数据安全性极低</u></p></li><li><p>读已提交(RC)</p><p><u>事务读取数据时,对数据加行级锁(读取到数据时才加锁),一旦读完数据,立刻释放锁(并不是事务结束后释放) –》因为事务未完成就释放了锁 所以会出现不可重复读和幻读</u></p></li><li><p>可重复读(RR)</p><p><u>事务读取数据时,对数据加行级锁,直到整个事务结束后才会释放锁 –》因为事务结束后才会释放锁,所以保证了数据的一致性,阻止了不可重读情况发生,但是可能会出现幻读,因为加的是行锁,无法阻止其他事务添加新的数据</u></p></li><li><p>串行化(SE)</p><p><u>事务读取数据时,直接加了表锁….简单粗暴,排着队挨个来执行</u></p></li></ol></li><li><p>MVCC</p><p><u>生成一个数据快照,并用这个快照来提供一致性的读取,也成为了多版本数据控制实际就是CAS版本控制 + 读写分离的思想主要用于RC和RR级别。</u></p><p><u>其实就是多版本并发控制。MVCC 是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问。</u></p><p>在多个事务中,对数据进行操作时,会获取一个数据的快照及事务ID(版本号),在本事务中的所有查询语句,查询的都是本事务的数据快照,只有在进行 修改操作时,会先进行事务ID的比较,同步最新的数据快照后再进行数据修改.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql系列 </category>
          
          <category> 面试系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBA </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postgresql学习之旅【五】SpringBootMP整合</title>
      <link href="2021/05/07/Postgresql%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%BA%94%E3%80%91SpringBootMP%E6%95%B4%E5%90%88/"/>
      <url>2021/05/07/Postgresql%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%BA%94%E3%80%91SpringBootMP%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h4 id="1-创建SpringBoot项目"><a href="#1-创建SpringBoot项目" class="headerlink" title="1. 创建SpringBoot项目"></a>1. 创建SpringBoot项目</h4><ul><li><p>POM文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.lxz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pg_example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>pg_example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-boot.version</span><span class="token punctuation">&gt;</span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-boot.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 依赖--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--Web--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--MybatisPlus--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 数据源,SQL输出分析--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>p6spy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>p6spy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.8.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--hutool 工具包--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.4.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--数据库驱动--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.postgresql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>postgresql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--lombok工具--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--测试--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring-boot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">&gt;</span></span>com.lxz.PgExampleApplication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>repackage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>repackage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="2-配置yml文件"><a href="#2-配置yml文件" class="headerlink" title="2. 配置yml文件"></a>2. 配置yml文件</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> springboot<span class="token punctuation">-</span>pgsql  <span class="token comment">#数据源配置,使用p6spy,完成sql记录分析</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.p6spy.engine.spy.P6SpyDriver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>p6spy<span class="token punctuation">:</span>postgresql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>5432/root_db<span class="token punctuation">?</span>currentSchema=dev    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root<span class="token comment">## mybatis plus配置</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token comment">#逻辑删除 1:已删除 0:未删除</span>      <span class="token key atrule">logic-delete-value</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">logic-not-delete-value</span><span class="token punctuation">:</span> <span class="token number">0</span>      <span class="token comment">#ID 雪花算法</span>      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> id_worker  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token comment">#是否开启驼峰命名</span>    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">cache-enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment">#Mapper.xml文件位置</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/mapper/<span class="token important">*Mapper.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-MybatisPlus全局配置"><a href="#3-MybatisPlus全局配置" class="headerlink" title="3.MybatisPlus全局配置"></a>3.MybatisPlus全局配置</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * MP 配置 * @author lx Zhang. * @date 2021/5/7 1:28 下午 */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"com.lxz.mapper"</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//扫描Mapper接口</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">ModelAutoFillHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">//导入自动填充实现类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultMybatisPlusConfig</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 新的分页插件,一缓和二缓遵循mybatis的规则,需要设置 MybatisConfiguration#useDeprecatedExecutor = false 避免缓存出现问题(该属性会在旧插件移除后一同移除)     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//添加分页插件,指定数据库类型</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token class-name">DbType</span><span class="token punctuation">.</span>POSTGRE_SQL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//添加乐观锁插件</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ConfigurationCustomizer</span> <span class="token function">configurationCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> configuration <span class="token operator">-&gt;</span> configuration<span class="token punctuation">.</span><span class="token function">setUseDeprecatedExecutor</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-自动填充配置"><a href="#4-自动填充配置" class="headerlink" title="4.自动填充配置"></a>4.自动填充配置</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Mybatis-Plus 数据自动填充,实现com.baomidou.mybatisplus.core.handlers.MetaObjectHandler接口 * @author lx Zhang. * @date 2021/3/1 8:28 下午 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModelAutoFillHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 自动填充五位字段     * id        : ID     * createTime: 创建时间     * createBy  : 创建者ID     * updateBy  : 最后一次修改者ID     * updateTime: 最后一次修改时间     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> CREATE_TIME <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> UPDATE_TIME <span class="token operator">=</span> <span class="token string">"updateTime"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> CREATE_BY <span class="token operator">=</span> <span class="token string">"createBy"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> UPDATE_BY <span class="token operator">=</span> <span class="token string">"updateBy"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> ID <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 新增填充     * @Author lx Zhang.     * @Date 2021/3/1 8:33 下午     * @Param [metaObject]     * @return void     **/</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Object</span> createBy <span class="token operator">=</span> <span class="token function">getFieldValByName</span><span class="token punctuation">(</span>CREATE_BY<span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> createTime <span class="token operator">=</span> <span class="token function">getFieldValByName</span><span class="token punctuation">(</span>CREATE_TIME<span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> updateBy <span class="token operator">=</span> <span class="token function">getFieldValByName</span><span class="token punctuation">(</span>UPDATE_BY<span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> updateTime <span class="token operator">=</span> <span class="token function">getFieldValByName</span><span class="token punctuation">(</span>UPDATE_TIME<span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> id <span class="token operator">=</span> <span class="token function">getFieldValByName</span><span class="token punctuation">(</span>ID<span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取唯一ID</span>        <span class="token class-name">Long</span> ID_ <span class="token operator">=</span> <span class="token class-name">IdGenerator</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取当前系统时间</span>        <span class="token class-name">LocalDateTime</span> data <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"fill data:{}"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//非空判断并且自动填充</span>        <span class="token comment">//ID主键</span><span class="token comment">//        Optional.ofNullable(id).orElseGet(()-&gt; this.strictInsertFill(metaObject,ID,Long.class,ID_));新版本</span>        <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token function">setFieldValByName</span><span class="token punctuation">(</span>ID<span class="token punctuation">,</span>ID_<span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//旧版本填充ID</span>        <span class="token comment">//创建时间</span>        <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>createTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">strictInsertFill</span><span class="token punctuation">(</span>metaObject<span class="token punctuation">,</span>CREATE_TIME<span class="token punctuation">,</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//修改时间</span>        <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>updateTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">strictInsertFill</span><span class="token punctuation">(</span>metaObject<span class="token punctuation">,</span>UPDATE_TIME<span class="token punctuation">,</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//TODO 创建ID者、修改者ID 目前无法获取,暂时不填充,后续再填充</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 更新填充     * @Author lx Zhang.     * @Date 2021/3/1 9:02 下午     * @Param [metaObject]     * @return void     **/</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//TODO 暂时只填充修改时间</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">strictInsertFill</span><span class="token punctuation">(</span>metaObject<span class="token punctuation">,</span>UPDATE_TIME<span class="token punctuation">,</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-编写公共实体"><a href="#5-编写公共实体" class="headerlink" title="5.编写公共实体"></a>5.编写公共实体</h4><ul><li>所有的pojo都应该继承它</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * MP 基础实体 * @author lx Zhang. * @date 2021/3/1 10:46 下午 */</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SupperModel</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token comment">/**主键 id*/</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span>INPUT<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token comment">/**创建时间 */</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span>    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span> timezone <span class="token operator">=</span> <span class="token string">"GMT+8"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> createTime<span class="token punctuation">;</span>    <span class="token comment">/** 更新时间*/</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span>    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span> timezone <span class="token operator">=</span> <span class="token string">"GMT+8"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> updateTime<span class="token punctuation">;</span>    <span class="token comment">/** 逻辑删除 0:未删除 1:已删除*/</span>    <span class="token annotation punctuation">@TableLogic</span>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> isDeleted<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-编写测试用户实体"><a href="#6-编写测试用户实体" class="headerlink" title="6.编写测试用户实体"></a>6.编写测试用户实体</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 用户实体类 * @author lx Zhang. * @date 2021/5/7 1:46 下午 */</span><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">"sys_user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysUser</span> <span class="token keyword">extends</span> <span class="token class-name">SupperModel</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token comment">/** 用户名*/</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token comment">/** 密码*/</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token comment">/** 乐观锁*/</span>    <span class="token annotation punctuation">@Version</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> version<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-编写Mapper接口"><a href="#7-编写Mapper接口" class="headerlink" title="7.编写Mapper接口"></a>7.编写Mapper接口</h4><ul><li>该接口需要继承与<strong>BaseMapper</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author lx Zhang. * @date 2021/5/7 1:48 下午 */</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-编写Service及Impl"><a href="#8-编写Service及Impl" class="headerlink" title="8.编写Service及Impl"></a>8.编写Service及Impl</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author lx Zhang. * @date 2021/5/7 1:48 下午 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author lx Zhang. * @date 2021/5/7 1:49 下午 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserMapper</span><span class="token punctuation">,</span> <span class="token class-name">SysUser</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">IUserService</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-配置p6spy"><a href="#9-配置p6spy" class="headerlink" title="9.配置p6spy"></a>9.配置p6spy</h4><ul><li>在Resources目录下添加文件,如下配置</li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#3.2.1以上使用</span><span class="token attr-name">modulelist</span><span class="token punctuation">=</span><span class="token attr-value">com.baomidou.mybatisplus.extension.p6spy.MybatisPlusLogFactory,com.p6spy.engine.outage.P6OutageFactory</span><span class="token comment">#3.2.1以下使用或者不配置</span><span class="token comment">#modulelist=com.p6spy.engine.logging.P6LogFactory,com.p6spy.engine.outage.P6OutageFactory</span><span class="token comment"># 自定义日志打印</span><span class="token attr-name">logMessageFormat</span><span class="token punctuation">=</span><span class="token attr-value">com.baomidou.mybatisplus.extension.p6spy.P6SpyLogger</span><span class="token comment">#日志输出到控制台</span><span class="token attr-name">appender</span><span class="token punctuation">=</span><span class="token attr-value">com.baomidou.mybatisplus.extension.p6spy.StdoutLogger</span><span class="token comment"># 使用日志系统记录 sql</span><span class="token comment">#appender=com.p6spy.engine.spy.appender.Slf4JLogger</span><span class="token comment"># 设置 p6spy driver 代理</span><span class="token attr-name">deregisterdrivers</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment"># 取消JDBC URL前缀</span><span class="token attr-name">useprefix</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment"># 配置记录 Log 例外,可去掉的结果集有error,info,batch,debug,statement,commit,rollback,result,resultset.</span><span class="token attr-name">excludecategories</span><span class="token punctuation">=</span><span class="token attr-value">info,debug,result,commit,resultset</span><span class="token comment"># 日期格式</span><span class="token attr-name">dateformat</span><span class="token punctuation">=</span><span class="token attr-value">yyyy-MM-dd HH:mm:ss</span><span class="token comment"># 实际驱动可多个</span><span class="token comment">#driverlist=org.h2.Driver</span><span class="token comment"># 是否开启慢SQL记录</span><span class="token attr-name">outagedetection</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment"># 慢SQL记录标准 2 秒</span><span class="token attr-name">outagedetectioninterval</span><span class="token punctuation">=</span><span class="token attr-value">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-测试功能"><a href="#10-测试功能" class="headerlink" title="10.测试功能"></a>10.测试功能</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">PgExampleApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">IUserService</span> userService<span class="token punctuation">;</span>    <span class="token comment">/** 测试获取数据*/</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/** 测试添加数据*/</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">SysUser</span> sysUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SysUser</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/** 测试乐观锁*/</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">SysUser</span> sysUser <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span><span class="token number">1390546776234164226L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sysUser<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11-扩展-自定义分页查询"><a href="#11-扩展-自定义分页查询" class="headerlink" title="11.扩展-自定义分页查询"></a>11.扩展-自定义分页查询</h4><ul><li><p>controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 分页查询 * @Author lx Zhang. * @Date 2021/5/7 2:30 下午 * @Param [curPage,limit] * @return java.util.List&lt;com.lxz.model.SysUser&gt; **/</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/page"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">&gt;</span></span> <span class="token function">page</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">pageList</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>serviceImpl</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 分页查询 * @Author lx Zhang. * @Date 2021/5/7 2:31 下午 * @Param [params] * @return java.util.List&lt;com.lxz.model.SysUser&gt; **/</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">&gt;</span></span> <span class="token function">pageList</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Integer</span> curPage <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"curPage"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> limit <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"limit"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>curPage<span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">pageSelect</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Mapper接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">&gt;</span></span> <span class="token function">pageSelect</span><span class="token punctuation">(</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">&gt;</span></span> page<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Mapper.Xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageSelect<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lxz.model.SysUser<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    select * from sys_user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Postgresql </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> MybatisPlus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postgresql学习之旅【四】SpringBootJPA整合</title>
      <link href="2021/05/07/Postgresql%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E5%9B%9B%E3%80%91SpringBootJPA%E6%95%B4%E5%90%88/"/>
      <url>2021/05/07/Postgresql%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E5%9B%9B%E3%80%91SpringBootJPA%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li><p>SpringBoot版本为 2.3.4.RELEASE</p></li><li><p>Postgresql版本为120005</p></li></ul><h4 id="1-创建SpringBoot项目"><a href="#1-创建SpringBoot项目" class="headerlink" title="1.创建SpringBoot项目"></a>1.创建SpringBoot项目</h4><p>​    Pom.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.lxz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mp-boot-pgsql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>mp-boot-pgsql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-boot.version</span><span class="token punctuation">&gt;</span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-boot.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.postgresql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>postgresql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring-boot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">&gt;</span></span>com.lxz.MpBootPgsqlApplication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>repackage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>repackage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-配置Application-yml文件"><a href="#2-配置Application-yml文件" class="headerlink" title="2.配置Application.yml文件"></a>2.配置Application.yml文件</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>  <span class="token comment">#服务名</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> mp<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>pgsql  <span class="token comment">#数据源配置,指定db:root_db 模式:dev</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>postgresql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>5432/root_db<span class="token punctuation">?</span>currentSchema=dev    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> roor  <span class="token key atrule">jpa</span><span class="token punctuation">:</span>    <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>      <span class="token key atrule">ddl-auto</span><span class="token punctuation">:</span> update    <span class="token key atrule">properties</span><span class="token punctuation">:</span>      <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>        <span class="token key atrule">dialect</span><span class="token punctuation">:</span> org.hibernate.dialect.PostgreSQLDialect<span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-创建实体对象"><a href="#3-创建实体对象" class="headerlink" title="3. 创建实体对象"></a>3. 创建实体对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author lx Zhang. * @date 2021/5/7 12:35 下午 */</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"sys_user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysUser</span> <span class="token punctuation">{</span>    <span class="token comment">/** 主键自增*/</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> active<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-创建User接口"><a href="#4-创建User接口" class="headerlink" title="4. 创建User接口"></a>4. 创建User接口</h4><ul><li>直接继承 <strong>JpaRepository</strong> 接口,默认提供CRUD方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lxz<span class="token punctuation">.</span>repository</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>lxz<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">SysUser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">JpaRepository</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Repository</span><span class="token punctuation">;</span><span class="token comment">/** * @author lx Zhang. * @date 2021/5/7 12:56 下午 */</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">MpBootPgsqlApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserRepository</span> userRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">SysUser</span> sysUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SysUser</span><span class="token punctuation">(</span><span class="token number">100001L</span><span class="token punctuation">,</span><span class="token string">"roots"</span><span class="token punctuation">,</span><span class="token string">"roots"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SysUser</span> user <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringBoot系列 </category>
          
          <category> Postgresql系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Postgresql </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> SpringDataJpa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebStorm无法识别Vue别名解决方案</title>
      <link href="2021/05/07/WebStorm%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%ABVue%E5%88%AB%E5%90%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>2021/05/07/WebStorm%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%ABVue%E5%88%AB%E5%90%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>Vue3 + Vue-Cli3+WebStorm</p><ol><li><p>首先确保在项目跟目录下的vue.config.js中有如下配置(Vue-cli3似乎自动已经有了该配置)</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">dir</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token comment">//webpack 相关配置</span>    configureWebpack<span class="token operator">:</span> <span class="token punctuation">{</span>        resolve<span class="token operator">:</span><span class="token punctuation">{</span>          <span class="token comment">//配置别名</span>            alias<span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token string">'@'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>然后在WebStrom中选择该配置,并且识别</p></li><li><p>在 <strong>webstorm File</strong> &gt; <strong>Settings</strong> &gt; <strong>Languages &amp; Frameworks</strong> &gt; <strong>JavaScript</strong> &gt; <strong>Webpack</strong> 下选择当前项目下选择 <strong>Manually</strong> 指定该文件,或者直接选择 <strong>AutoMatically</strong></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 问题解决 </category>
          
          <category> BUG </category>
          
          <category> WebStorm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Devtools </tag>
            
            <tag> WebStorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postgresql学习之旅【三】查询语句</title>
      <link href="2021/05/06/Postgresql%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%B8%89%E3%80%91%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
      <url>2021/05/06/Postgresql%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%B8%89%E3%80%91%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="PostgreSQL查询笔记"><a href="#PostgreSQL查询笔记" class="headerlink" title="PostgreSQL查询笔记"></a>PostgreSQL查询笔记</h2><p>定义Sex枚举类型</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">type</span> sex <span class="token keyword">cascade</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">type</span> sex <span class="token keyword">as</span> <span class="token keyword">enum</span><span class="token punctuation">(</span><span class="token string">'male'</span><span class="token punctuation">,</span><span class="token string">'female'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>定义表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token string">"public"</span><span class="token punctuation">.</span><span class="token string">"employee"</span> <span class="token punctuation">(</span>  <span class="token string">"empid"</span> int4 <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token string">"empname"</span> <span class="token keyword">text</span> <span class="token keyword">COLLATE</span> <span class="token string">"pg_catalog"</span><span class="token punctuation">.</span><span class="token string">"default"</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token string">"deptid"</span> int4 <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token string">"sex"</span> <span class="token string">"public"</span><span class="token punctuation">.</span><span class="token string">"sex"</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token comment">--自定义枚举类型</span>  <span class="token string">"cardno"</span> <span class="token keyword">text</span> <span class="token keyword">COLLATE</span> <span class="token string">"pg_catalog"</span><span class="token punctuation">.</span><span class="token string">"default"</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token string">"telephone"</span> <span class="token keyword">text</span> <span class="token keyword">COLLATE</span> <span class="token string">"pg_catalog"</span><span class="token punctuation">.</span><span class="token string">"default"</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token string">"birthdate"</span> <span class="token keyword">date</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token string">"salary"</span> int4 <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token string">"createtime"</span> <span class="token keyword">timestamp</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> <span class="token string">"pk_employee"</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token string">"empid"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token string">"public"</span><span class="token punctuation">.</span><span class="token string">"employee"</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">100001</span><span class="token punctuation">,</span> <span class="token string">'小红'</span><span class="token punctuation">,</span> <span class="token number">1002</span><span class="token punctuation">,</span> <span class="token string">'male'</span><span class="token punctuation">,</span> <span class="token string">'452123198510084651'</span><span class="token punctuation">,</span> <span class="token string">'138515600001'</span><span class="token punctuation">,</span> <span class="token string">'1975-01-01'</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">,</span> <span class="token string">'2000-01-01 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token string">"public"</span><span class="token punctuation">.</span><span class="token string">"employee"</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">100002</span><span class="token punctuation">,</span> <span class="token string">'小梁'</span><span class="token punctuation">,</span> <span class="token number">1002</span><span class="token punctuation">,</span> <span class="token string">'male'</span><span class="token punctuation">,</span> <span class="token string">'452123198510084652'</span><span class="token punctuation">,</span> <span class="token string">'138515600002'</span><span class="token punctuation">,</span> <span class="token string">'1976-01-01'</span><span class="token punctuation">,</span> <span class="token number">80000</span><span class="token punctuation">,</span> <span class="token string">'2001-01-01 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token string">"public"</span><span class="token punctuation">.</span><span class="token string">"employee"</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">100003</span><span class="token punctuation">,</span> <span class="token string">'小兰'</span><span class="token punctuation">,</span> <span class="token number">1002</span><span class="token punctuation">,</span> <span class="token string">'female'</span><span class="token punctuation">,</span> <span class="token string">'452123198510084653'</span><span class="token punctuation">,</span> <span class="token string">'138515600003'</span><span class="token punctuation">,</span> <span class="token string">'1977-01-01'</span><span class="token punctuation">,</span> <span class="token number">70000</span><span class="token punctuation">,</span> <span class="token string">'2002-01-01 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token string">"public"</span><span class="token punctuation">.</span><span class="token string">"employee"</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">100004</span><span class="token punctuation">,</span> <span class="token string">'小猪'</span><span class="token punctuation">,</span> <span class="token number">1002</span><span class="token punctuation">,</span> <span class="token string">'male'</span><span class="token punctuation">,</span> <span class="token string">'452123198510084654'</span><span class="token punctuation">,</span> <span class="token string">'138515600004'</span><span class="token punctuation">,</span> <span class="token string">'1978-01-01'</span><span class="token punctuation">,</span> <span class="token number">80000</span><span class="token punctuation">,</span> <span class="token string">'2003-01-01 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token string">"public"</span><span class="token punctuation">.</span><span class="token string">"employee"</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">100005</span><span class="token punctuation">,</span> <span class="token string">'lxz'</span><span class="token punctuation">,</span> <span class="token number">1003</span><span class="token punctuation">,</span> <span class="token string">'male'</span><span class="token punctuation">,</span> <span class="token string">'452123198510084655'</span><span class="token punctuation">,</span> <span class="token string">'138515600005'</span><span class="token punctuation">,</span> <span class="token string">'1979-01-01'</span><span class="token punctuation">,</span> <span class="token number">60000</span><span class="token punctuation">,</span> <span class="token string">'2004-01-01 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token string">"public"</span><span class="token punctuation">.</span><span class="token string">"employee"</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">100006</span><span class="token punctuation">,</span> <span class="token string">'zlx'</span><span class="token punctuation">,</span> <span class="token number">1005</span><span class="token punctuation">,</span> <span class="token string">'male'</span><span class="token punctuation">,</span> <span class="token string">'452123198510084656'</span><span class="token punctuation">,</span> <span class="token string">'138515600006'</span><span class="token punctuation">,</span> <span class="token string">'1980-01-01'</span><span class="token punctuation">,</span> <span class="token number">50000</span><span class="token punctuation">,</span> <span class="token string">'2005-01-01 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token string">"public"</span><span class="token punctuation">.</span><span class="token string">"employee"</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">100007</span><span class="token punctuation">,</span> <span class="token string">'满城雪'</span><span class="token punctuation">,</span> <span class="token number">1006</span><span class="token punctuation">,</span> <span class="token string">'male'</span><span class="token punctuation">,</span> <span class="token string">'452123198510084657'</span><span class="token punctuation">,</span> <span class="token string">'138515600007'</span><span class="token punctuation">,</span> <span class="token string">'1981-01-01'</span><span class="token punctuation">,</span> <span class="token number">40000</span><span class="token punctuation">,</span> <span class="token string">'2006-01-01 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token string">"public"</span><span class="token punctuation">.</span><span class="token string">"employee"</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">100008</span><span class="token punctuation">,</span> <span class="token string">'海问香«'</span><span class="token punctuation">,</span> <span class="token number">1008</span><span class="token punctuation">,</span> <span class="token string">'male'</span><span class="token punctuation">,</span> <span class="token string">'452123198510084658'</span><span class="token punctuation">,</span> <span class="token string">'138515600008'</span><span class="token punctuation">,</span> <span class="token string">'1982-01-01'</span><span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">,</span> <span class="token string">'2007-01-01 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token string">"public"</span><span class="token punctuation">.</span><span class="token string">"employee"</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">100009</span><span class="token punctuation">,</span> <span class="token string">'摸鱼王'</span><span class="token punctuation">,</span> <span class="token number">1009</span><span class="token punctuation">,</span> <span class="token string">'male'</span><span class="token punctuation">,</span> <span class="token string">'452123198510084659'</span><span class="token punctuation">,</span> <span class="token string">'138515600009'</span><span class="token punctuation">,</span> <span class="token string">'1983-01-01'</span><span class="token punctuation">,</span> <span class="token number">25000</span><span class="token punctuation">,</span> <span class="token string">'2008-01-01 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token string">"public"</span><span class="token punctuation">.</span><span class="token string">"employee"</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">100010</span><span class="token punctuation">,</span> <span class="token string">'阿狸'</span><span class="token punctuation">,</span> <span class="token number">1009</span><span class="token punctuation">,</span> <span class="token string">'male'</span><span class="token punctuation">,</span> <span class="token string">'452123198510084660'</span><span class="token punctuation">,</span> <span class="token string">'138515600010'</span><span class="token punctuation">,</span> <span class="token string">'1984-01-01'</span><span class="token punctuation">,</span> <span class="token number">20000</span><span class="token punctuation">,</span> <span class="token string">'2009-01-01 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token string">"public"</span><span class="token punctuation">.</span><span class="token string">"employee"</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">100011</span><span class="token punctuation">,</span> <span class="token string">'莉莉艾'</span><span class="token punctuation">,</span> <span class="token number">1009</span><span class="token punctuation">,</span> <span class="token string">'female'</span><span class="token punctuation">,</span> <span class="token string">'452123198510084661'</span><span class="token punctuation">,</span> <span class="token string">'138515600011'</span><span class="token punctuation">,</span> <span class="token string">'1985-01-01'</span><span class="token punctuation">,</span> <span class="token number">19000</span><span class="token punctuation">,</span> <span class="token string">'2010-01-01 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token string">"public"</span><span class="token punctuation">.</span><span class="token string">"employee"</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">100012</span><span class="token punctuation">,</span> <span class="token string">'淡漠'</span><span class="token punctuation">,</span> <span class="token number">1009</span><span class="token punctuation">,</span> <span class="token string">'male'</span><span class="token punctuation">,</span> <span class="token string">'452123198510084662'</span><span class="token punctuation">,</span> <span class="token string">'138515600012'</span><span class="token punctuation">,</span> <span class="token string">'1986-01-01'</span><span class="token punctuation">,</span> <span class="token number">18000</span><span class="token punctuation">,</span> <span class="token string">'2011-01-01 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token string">"public"</span><span class="token punctuation">.</span><span class="token string">"employee"</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">100013</span><span class="token punctuation">,</span> <span class="token string">'摸鱼高手'</span><span class="token punctuation">,</span> <span class="token number">1009</span><span class="token punctuation">,</span> <span class="token string">'female'</span><span class="token punctuation">,</span> <span class="token string">'452123198510084663'</span><span class="token punctuation">,</span> <span class="token string">'138515600013'</span><span class="token punctuation">,</span> <span class="token string">'1987-01-01'</span><span class="token punctuation">,</span> <span class="token number">17000</span><span class="token punctuation">,</span> <span class="token string">'2012-01-01 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token string">"public"</span><span class="token punctuation">.</span><span class="token string">"employee"</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">100014</span><span class="token punctuation">,</span> <span class="token string">'游戏高手'</span><span class="token punctuation">,</span> <span class="token number">1009</span><span class="token punctuation">,</span> <span class="token string">'female'</span><span class="token punctuation">,</span> <span class="token string">'452123198510084663'</span><span class="token punctuation">,</span> <span class="token string">'138515600014'</span><span class="token punctuation">,</span> <span class="token string">'1987-08-01'</span><span class="token punctuation">,</span> <span class="token number">17000</span><span class="token punctuation">,</span> <span class="token string">'2012-01-01 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token string">"public"</span><span class="token punctuation">.</span><span class="token string">"employee"</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">100015</span><span class="token punctuation">,</span> <span class="token string">'小张'</span><span class="token punctuation">,</span> <span class="token number">1009</span><span class="token punctuation">,</span> <span class="token string">'male'</span><span class="token punctuation">,</span> <span class="token string">'452123198510084664'</span><span class="token punctuation">,</span> <span class="token string">'138515600015'</span><span class="token punctuation">,</span> <span class="token string">'1988-01-01'</span><span class="token punctuation">,</span> <span class="token number">16000</span><span class="token punctuation">,</span> <span class="token string">'2013-01-01 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表内容</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">root_db=# select * from employee; empid  |   empname    | deptid |  sex   |       cardno       |  telephone   | birthdate  | salary |     createtime      --------+--------------+--------+--------+--------------------+--------------+------------+--------+--------------------- 100001 | 小红       |   1002 | male   | 452123198510084651 | 138515600001 | 1975-01-01 | 100000 | 2000-01-01 00:00:00  100002 | 小梁       |   1002 | male   | 452123198510084652 | 138515600002 | 1976-01-01 |  80000 | 2001-01-01 00:00:00  100003 | 小兰       |   1002 | female | 452123198510084653 | 138515600003 | 1977-01-01 |  70000 | 2002-01-01 00:00:00  100004 | 小猪       |   1002 | male   | 452123198510084654 | 138515600004 | 1978-01-01 |  80000 | 2003-01-01 00:00:00  100005 | lxz          |   1003 | male   | 452123198510084655 | 138515600005 | 1979-01-01 |  60000 | 2004-01-01 00:00:00  100006 | zlx          |   1005 | male   | 452123198510084656 | 138515600006 | 1980-01-01 |  50000 | 2005-01-01 00:00:00  100007 | 满城雪    |   1006 | male   | 452123198510084657 | 138515600007 | 1981-01-01 |  40000 | 2006-01-01 00:00:00  100008 | 海问香«  |   1008 | male   | 452123198510084658 | 138515600008 | 1982-01-01 |  30000 | 2007-01-01 00:00:00  100009 | 摸鱼王    |   1009 | male   | 452123198510084659 | 138515600009 | 1983-01-01 |  25000 | 2008-01-01 00:00:00  100010 | 阿狸       |   1009 | male   | 452123198510084660 | 138515600010 | 1984-01-01 |  20000 | 2009-01-01 00:00:00  100011 | 莉莉艾    |   1009 | female | 452123198510084661 | 138515600011 | 1985-01-01 |  19000 | 2010-01-01 00:00:00  100012 | 淡漠       |   1009 | male   | 452123198510084662 | 138515600012 | 1986-01-01 |  18000 | 2011-01-01 00:00:00  100013 | 摸鱼高手 |   1009 | female | 452123198510084663 | 138515600013 | 1987-01-01 |  17000 | 2012-01-01 00:00:00  100014 | 游戏高手 |   1009 | female | 452123198510084663 | 138515600014 | 1987-08-01 |  17000 | 2012-01-01 00:00:00  100015 | 小张       |   1009 | male   | 452123198510084664 | 138515600015 | 1988-01-01 |  16000 | 2013-01-01 00:00:00 (15 rows)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-基本查询"><a href="#1-基本查询" class="headerlink" title="1.基本查询"></a>1.基本查询</h4><ul><li><p>全表查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询某些字段</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> empid<span class="token punctuation">,</span>empname <span class="token keyword">from</span> employee<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>等值查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> empid <span class="token operator">=</span> <span class="token number">10001</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>时间范围查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> createtime <span class="token operator">between</span> to_date<span class="token punctuation">(</span><span class="token string">'2000-01-01'</span><span class="token punctuation">,</span> <span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span> <span class="token operator">AND</span> to_date<span class="token punctuation">(</span><span class="token string">'2010-01-01'</span><span class="token punctuation">,</span> <span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>去重,根据sex去重,男、女性别各留一个</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> sex <span class="token keyword">from</span> employee<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>排序,DESC降序  ASC升序,默认ASC</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> createtime <span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>分组查询,根据性别分组,并且统计男女数量</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> sex<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span> <span class="token keyword">from</span> employee <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>分组后再次筛选</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> sex<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span> <span class="token keyword">from</span> employee <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex <span class="token keyword">HAVING</span> <span class="token function">count</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>分页查询</p><ul><li><p>limit : 查询页的总数量</p></li><li><p>offset :表示偏移量,跳过多少条数据再获取</p><p>获取前5条数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">LIMIT</span> <span class="token number">5</span> <span class="token keyword">OFFSET</span> <span class="token number">0</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每页3条数据,获取第2页</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">limit</span> <span class="token number">3</span> <span class="token keyword">offset</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每页4条数据,获取第3页</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">limit</span> <span class="token number">4</span> <span class="token keyword">offset</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>由此得出,offset= （页容量 * (页码 - 1))</strong> </p></li></ul></li></ul><h4 id="2-连接查询"><a href="#2-连接查询" class="headerlink" title="2.连接查询"></a>2.连接查询</h4><p>user表和classe表内容</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex"> id |   name    | age | class_id ----+-----------+-----+----------  1 | 小红    |  18 |    10001   2 | 小张    |  17 |    10001   3 | 小米    |  15 |    10001   4 | 哈哈    |  21 |    10003   5 | 小猪    |  12 |    10002   6 | 小肖    |  12 |    10001   7 | 真棒    |   9 |    10002   9 | 你好哇 |   7 |    10003  10 | hhaw      |   5 |    10002 (9 rows)     id   |   name    -------+----------- 10001 | 一年级  10002 | 二年级  10003 | 三年级 (3 rows)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-1-内连接"><a href="#2-1-内连接" class="headerlink" title="2.1 内连接"></a>2.1 内连接</h5><ul><li><p>ON</p><ul><li>ON字句是最常见的连接条件形式,它接收一个布尔值,一旦为ture,则他们就是匹配的行</li></ul></li><li><p>USING</p><ul><li>USING是一种快捷写法,在一种情况下十分方便,就是两个表连接的字段使用相同名称</li></ul></li><li><p>查询一年级的学生</p><p>使用ON连接</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> u<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>name<span class="token keyword">from</span> users u<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> classe e<span class="token keyword">ON</span> u<span class="token punctuation">.</span>class_id <span class="token operator">=</span> e<span class="token punctuation">.</span>id<span class="token keyword">WHERE</span> e<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">10001</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用USING, 注意,classe表的’id’,需要更改为’class_id’,与users的外键字段一致才行</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> u<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>name<span class="token keyword">FROM</span> users u<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> classe e<span class="token keyword">USING</span><span class="token punctuation">(</span>class_id<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong></p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex"> id |  name  | age | class_id |   name    ----+--------+-----+----------+-----------  1 | 小红 |  18 |    10001 | 一年级   2 | 小张 |  17 |    10001 | 一年级   3 | 小米 |  15 |    10001 | 一年级   6 | 小肖 |  12 |    10001 | 一年级 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="2-2-外连接"><a href="#2-2-外连接" class="headerlink" title="2.2  外连接"></a>2.2  外连接</h5><ul><li><p>左外连接</p><ul><li><p>以左表为基准查询,如果有学生不存在班级,右表以空值补充</p><p>左连接查询每个学生信息及年级名称</p></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> u<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>name <span class="token keyword">as</span> class_name<span class="token keyword">from</span> users u <span class="token keyword">left</span> <span class="token keyword">JOIN</span> classe e <span class="token keyword">ON</span> u<span class="token punctuation">.</span>class_id <span class="token operator">=</span> e<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong></p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex"> id |   name    | age | class_id | c_id  | class_name ----+-----------+-----+----------+-------+------------  1 | 小红    |  18 |    10001 | 10001 | 一年级    2 | 小张    |  17 |    10001 | 10001 | 一年级    3 | 小米    |  15 |    10001 | 10001 | 一年级    4 | 哈哈    |  21 |    10003 | 10003 | 三年级    5 | 小猪    |  12 |    10002 | 10002 | 二年级    6 | 小肖    |  12 |    10001 | 10001 | 一年级    7 | 真棒    |   9 |    10002 | 10002 | 二年级    9 | 你好哇 |   7 |    10003 | 10003 | 三年级   10 | hhaw    |   5 |    10002 | 10002 | 二年级   11 | 转学生 |  19 |  1000123 |       |            (10 rows) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>右连接</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> u<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>id <span class="token keyword">as</span> c_id<span class="token punctuation">,</span> e<span class="token punctuation">.</span>name <span class="token keyword">as</span> class_name<span class="token keyword">from</span> users u <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> classe e <span class="token keyword">ON</span> u<span class="token punctuation">.</span>class_id <span class="token operator">=</span> e<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong></p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">  id  |   name    | age  | class_id | c_id  | class_name ------+-----------+------+----------+-------+------------    1 | 小红    |   18 |    10001 | 10001 | 一年级      2 | 小张    |   17 |    10001 | 10001 | 一年级      3 | 小米    |   15 |    10001 | 10001 | 一年级      4 | 哈哈    |   21 |    10003 | 10003 | 三年级      5 | 小猪    |   12 |    10002 | 10002 | 二年级      6 | 小肖    |   12 |    10001 | 10001 | 一年级      7 | 真棒    |    9 |    10002 | 10002 | 二年级      9 | 你好哇 |    7 |    10003 | 10003 | 三年级     10 | hhaw    |    5 |    10002 | 10002 | 二年级        |         |      |          | 10004 | 八年级  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>全外连接</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> u<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>id <span class="token keyword">as</span> c_id<span class="token punctuation">,</span> e<span class="token punctuation">.</span>name <span class="token keyword">as</span> class_name<span class="token keyword">from</span> users u <span class="token keyword">FULL</span> <span class="token keyword">JOIN</span> classe e <span class="token keyword">ON</span> u<span class="token punctuation">.</span>class_id <span class="token operator">=</span> e<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">  id  <span class="token operator">|</span>   name    <span class="token operator">|</span> age  <span class="token operator">|</span> class_id <span class="token operator">|</span> c_id  <span class="token operator">|</span> class_name <span class="token comment">------+-----------+------+----------+-------+------------</span>    <span class="token number">1</span> <span class="token operator">|</span> 小红    <span class="token operator">|</span>   <span class="token number">18</span> <span class="token operator">|</span>    <span class="token number">10001</span> <span class="token operator">|</span> <span class="token number">10001</span> <span class="token operator">|</span> 一年级      <span class="token number">2</span> <span class="token operator">|</span> 小张    <span class="token operator">|</span>   <span class="token number">17</span> <span class="token operator">|</span>    <span class="token number">10001</span> <span class="token operator">|</span> <span class="token number">10001</span> <span class="token operator">|</span> 一年级      <span class="token number">3</span> <span class="token operator">|</span> 小米    <span class="token operator">|</span>   <span class="token number">15</span> <span class="token operator">|</span>    <span class="token number">10001</span> <span class="token operator">|</span> <span class="token number">10001</span> <span class="token operator">|</span> 一年级      <span class="token number">4</span> <span class="token operator">|</span> 哈哈    <span class="token operator">|</span>   <span class="token number">21</span> <span class="token operator">|</span>    <span class="token number">10003</span> <span class="token operator">|</span> <span class="token number">10003</span> <span class="token operator">|</span> 三年级      <span class="token number">5</span> <span class="token operator">|</span> 小猪    <span class="token operator">|</span>   <span class="token number">12</span> <span class="token operator">|</span>    <span class="token number">10002</span> <span class="token operator">|</span> <span class="token number">10002</span> <span class="token operator">|</span> 二年级      <span class="token number">6</span> <span class="token operator">|</span> 小肖    <span class="token operator">|</span>   <span class="token number">12</span> <span class="token operator">|</span>    <span class="token number">10001</span> <span class="token operator">|</span> <span class="token number">10001</span> <span class="token operator">|</span> 一年级      <span class="token number">7</span> <span class="token operator">|</span> 真棒    <span class="token operator">|</span>    <span class="token number">9</span> <span class="token operator">|</span>    <span class="token number">10002</span> <span class="token operator">|</span> <span class="token number">10002</span> <span class="token operator">|</span> 二年级      <span class="token number">9</span> <span class="token operator">|</span> 你好哇 <span class="token operator">|</span>    <span class="token number">7</span> <span class="token operator">|</span>    <span class="token number">10003</span> <span class="token operator">|</span> <span class="token number">10003</span> <span class="token operator">|</span> 三年级     <span class="token number">10</span> <span class="token operator">|</span> hhaw    <span class="token operator">|</span>    <span class="token number">5</span> <span class="token operator">|</span>    <span class="token number">10002</span> <span class="token operator">|</span> <span class="token number">10002</span> <span class="token operator">|</span> 二年级     <span class="token number">11</span> <span class="token operator">|</span> 转学生 <span class="token operator">|</span>   <span class="token number">19</span> <span class="token operator">|</span>  <span class="token number">1000123</span> <span class="token operator">|</span>       <span class="token operator">|</span>                  <span class="token operator">|</span>         <span class="token operator">|</span>      <span class="token operator">|</span>          <span class="token operator">|</span> <span class="token number">10004</span> <span class="token operator">|</span> 八年级  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3-子查询"><a href="#3-子查询" class="headerlink" title="3.子查询"></a>3.子查询</h4><ul><li>IN</li><li>NOT IN</li><li>EXISTS</li><li>NOT EXISTS</li></ul><h4 id="4-模糊查询"><a href="#4-模糊查询" class="headerlink" title="4.模糊查询"></a>4.模糊查询</h4><ul><li><p>LIKE查询</p></li><li><p>ILICK ：会忽略参数大小写</p><ul><li>查询名字以 ‘小’起止的学生</li></ul><pre class="line-numbers language-sqlite" data-language="sqlite"><code class="language-sqlite">select * from users where name like '小%'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查询名字中包含’小’的学生</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%小%'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>以’小’结尾的学生</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%小'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Pgsql提供了like简写</p><ul><li>‘~~’ 等同于 like</li><li>‘~~*’ 等同于 ilike</li><li>‘!~~’ 等同于 not like</li><li>‘!~~*’ 等同于 not  ilike</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Postgresql系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBA </tag>
            
            <tag> SQL </tag>
            
            <tag> Postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postgresql学习之旅【二】内置函数</title>
      <link href="2021/05/05/Postgresql%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%BA%8C%E3%80%91%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
      <url>2021/05/05/Postgresql%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%BA%8C%E3%80%91%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="1-数学函数"><a href="#1-数学函数" class="headerlink" title="1. 数学函数"></a>1. 数学函数</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 获取绝对值</span><span class="token keyword">SELECT</span> abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">17.4</span><span class="token punctuation">)</span> <span class="token comment">--R: 17.4</span><span class="token comment">-- 立方根</span><span class="token keyword">SELECT</span> cbrt<span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span> <span class="token comment">--R: 3</span><span class="token comment">--大于参数的最小整数</span><span class="token keyword">SELECT</span> ceil<span class="token punctuation">(</span><span class="token number">55.8</span><span class="token punctuation">)</span> <span class="token comment">--R: 56</span><span class="token comment">--小于参数的最大整数</span><span class="token keyword">select</span> floor<span class="token punctuation">(</span><span class="token number">45.2</span><span class="token punctuation">)</span> <span class="token comment">--R:45</span><span class="token comment">--求两数相除的商</span><span class="token keyword">select</span> <span class="token operator">div</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">--R: 2</span><span class="token comment">--求两数的余数</span><span class="token keyword">select</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">--R: 1</span><span class="token comment">--四舍五入 保留两位小数</span><span class="token keyword">SELECT</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token number">65.4412</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">--R: 65.44</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-随机函数"><a href="#2-随机函数" class="headerlink" title="2.随机函数"></a>2.随机函数</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 范围为0.0&lt;= x &lt; 1.0之中的随机数</span><span class="token keyword">SELECT</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">--随机获取小于100的整数</span><span class="token keyword">SELECT</span> ceil<span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-字符串函数"><a href="#3-字符串函数" class="headerlink" title="3.字符串函数"></a>3.字符串函数</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--连接字符串</span><span class="token keyword">select</span> <span class="token string">'Hello'</span><span class="token operator">||</span><span class="token string">'Pgsql'</span> <span class="token comment">--R:HelloPgsql</span><span class="token comment">--连接字符串与非字符串</span><span class="token keyword">select</span> <span class="token string">'现在时间是:'</span><span class="token operator">||</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">--R:Hello2021-05-05 21:30:08.473724+08</span><span class="token comment">--字符串包含的比特位数</span><span class="token keyword">select</span> bit_length<span class="token punctuation">(</span><span class="token string">'H'</span><span class="token punctuation">)</span> <span class="token comment">--R: 8</span><span class="token keyword">select</span> bit_length<span class="token punctuation">(</span><span class="token string">'好'</span><span class="token punctuation">)</span> <span class="token comment">--R: 24</span><span class="token keyword">select</span> bit_length<span class="token punctuation">(</span><span class="token string">'H好'</span><span class="token punctuation">)</span> <span class="token comment">--R: 32</span><span class="token comment">--字符串转换小写</span><span class="token keyword">select</span> lower<span class="token punctuation">(</span><span class="token string">'HELLO'</span><span class="token punctuation">)</span> <span class="token comment">--R:hello</span><span class="token comment">--转换大写</span><span class="token keyword">select</span> upper<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span> <span class="token comment">--R:HELLO</span><span class="token comment">--将所有的参数以文本形式连接起来</span><span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">,</span><span class="token number">213</span><span class="token punctuation">,</span><span class="token string">'真棒'</span><span class="token punctuation">)</span> <span class="token comment">--R:abcd213真棒</span><span class="token comment">--字符串格式化,%1$s 表示继续使用第一个占位符</span><span class="token keyword">select</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'Hello %s,is %1$s'</span><span class="token punctuation">,</span> <span class="token string">'World'</span><span class="token punctuation">)</span><span class="token comment">--将每个单词首字母转为大写,剩下字母转为小写,单词之间以空格区分</span><span class="token keyword">SELECT</span> initcap<span class="token punctuation">(</span><span class="token string">'hELLO,WORLD'</span><span class="token punctuation">)</span> <span class="token comment">--R： Hello,World</span><span class="token comment">--获取字符串的前 'n'个字符</span><span class="token keyword">select</span> <span class="token keyword">left</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">--R:He</span><span class="token comment">--计算字符数的md5哈希值</span><span class="token keyword">select</span> md5<span class="token punctuation">(</span><span class="token string">'HELLo wor'</span><span class="token punctuation">)</span> <span class="token comment">--R:ba50ee1efda092b2ae87aac268417c71</span><span class="token comment">--字符串替换</span><span class="token keyword">select</span> <span class="token keyword">replace</span><span class="token punctuation">(</span><span class="token string">'lxz is max'</span><span class="token punctuation">,</span><span class="token string">'lxz'</span><span class="token punctuation">,</span><span class="token string">'zlx'</span><span class="token punctuation">)</span> <span class="token comment">--R:zlx is max</span><span class="token comment">--将字符串重复n次 连接起来</span><span class="token keyword">SELECT</span> <span class="token keyword">repeat</span><span class="token punctuation">(</span><span class="token string">'lxz'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">--R: lxzlxzlxzlxz</span><span class="token comment">--将字符串反转</span><span class="token keyword">select</span> reverse<span class="token punctuation">(</span><span class="token string">'今天天气真不错'</span><span class="token punctuation">)</span> <span class="token comment">--R: 错不真气天天今</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-日期函数和时间函数"><a href="#4-日期函数和时间函数" class="headerlink" title="4.日期函数和时间函数"></a>4.日期函数和时间函数</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 两个日期相减,返回一个n年n月n日的结果</span><span class="token keyword">SELECT</span> age<span class="token punctuation">(</span> <span class="token string">'2020-01-01'</span><span class="token punctuation">,</span>  <span class="token string">'2000-05-01'</span><span class="token punctuation">)</span> <span class="token comment">--R: 19 years 8 mons</span><span class="token comment">--当前日期和时间</span><span class="token keyword">SELECT</span> clock_timestamp<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">--R: 2021-05-05 21:57:38.808704+08</span><span class="token comment">--当前日期</span><span class="token keyword">select</span> <span class="token keyword">CURRENT_DATE</span><span class="token comment">--当前时间</span><span class="token keyword">select</span> <span class="token keyword">CURRENT_TIME</span><span class="token keyword">select</span>  LOCALTIME<span class="token comment">--当前日期和时间</span><span class="token keyword">select</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token keyword">select</span> LOCALTIMESTAMP<span class="token comment">--使用年、月、日创建日期</span><span class="token keyword">select</span> make_date<span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">--R:2020-10-20</span><span class="token comment">--使用时、分、秒创建时间</span><span class="token keyword">select</span> make_time<span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span> <span class="token comment">--R:21:30:28</span><span class="token comment">--使用年、月、日、时、分、秒创建日期时间</span><span class="token keyword">select</span> make_timestamp<span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">)</span> <span class="token comment">--R:2019-06-20 22:30:00</span><span class="token comment">--使用年、月、日、时、分、秒创建日期时间(带有时区,如果不填写时区,则为当前时区)</span><span class="token keyword">select</span> make_timestamptz<span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">)</span> <span class="token comment">--R:2019-06-20 22:30:00+08</span><span class="token comment">--当前事务开始的时间</span><span class="token keyword">select</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">--当前sql语句开始的时间</span><span class="token keyword">SELECT</span> statement_timestamp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pg_sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>statement_timestamp<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">--R:一致</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-聚合函数"><a href="#5-聚合函数" class="headerlink" title="5.聚合函数"></a>5.聚合函数</h4><p>Table:</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">root_db=# select * from func; num  ------   90    21  3421    12    83    23 (6 rows)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--将输入值,连接成一个数组</span><span class="token comment">-- 将表中所有num连接成一个数组</span><span class="token keyword">SELECT</span> array_agg<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">from</span> func <span class="token comment">--R:{90,21,3421,12,83,23}</span><span class="token comment">--获取平均值,并且四舍五入</span><span class="token keyword">select</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token function">avg</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span> func <span class="token comment">--R:608</span><span class="token comment">--统计总结果行数量</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> func <span class="token comment">--R：6</span><span class="token comment">--统计 参数为非空的行数</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">FROM</span> func <span class="token comment">--R:6</span><span class="token comment">--获取字段最大值</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">FROM</span> func <span class="token comment">--R:3421</span><span class="token comment">-- 获取最小值</span><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">FROM</span> func <span class="token comment">--R:12</span><span class="token comment">--求和</span><span class="token keyword">SELECT</span> <span class="token function">sum</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">from</span> func <span class="token comment">--R:3650</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-集合函数"><a href="#6-集合函数" class="headerlink" title="6.集合函数"></a>6.集合函数</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 生成一系列值,从start-stop 步长为1</span><span class="token keyword">SELECT</span> generate_series<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token comment">--R: 1-90</span><span class="token comment">--生成一系列值,从1-90 步长为3</span><span class="token keyword">select</span> generate_series<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-系统信息函数"><a href="#7-系统信息函数" class="headerlink" title="7.系统信息函数"></a>7.系统信息函数</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 获取当前数据库</span><span class="token keyword">select</span> CURRENT_CATALOG<span class="token keyword">SELECT</span> current_database<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">--当前正在执行的sql</span><span class="token keyword">SELECT</span> current_query<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 当前登陆者</span><span class="token keyword">SELECT</span> <span class="token keyword">CURRENT_USER</span><span class="token keyword">select</span> CURRENT_ROLE<span class="token comment">--当前模式</span><span class="token keyword">select</span> <span class="token string">"current_schema"</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">select</span> CURRENT_SCHEMA<span class="token comment">-- 远程的客户端连接地址</span><span class="token keyword">select</span> inet_client_addr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">--远程客户端连接端口</span><span class="token keyword">select</span> inet_client_port<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">--本地服务地址</span><span class="token keyword">select</span> inet_server_addr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">select</span> inet_server_port<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 与当前会话关联的服务器进程id</span><span class="token keyword">SELECT</span> pg_backend_pid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 数据库启动的时间</span><span class="token keyword">select</span> pg_postmaster_start_time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">--数据库版本信息</span><span class="token keyword">select</span> <span class="token string">"version"</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Postgresql系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBA </tag>
            
            <tag> SQL </tag>
            
            <tag> Postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3学习之旅【五】CompositionAPI</title>
      <link href="2021/05/05/vue3%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%BA%94%E3%80%91CompositionAPI/"/>
      <url>2021/05/05/vue3%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%BA%94%E3%80%91CompositionAPI/</url>
      
        <content type="html"><![CDATA[<h4 id="前言：CompositionAPI的出现原因"><a href="#前言：CompositionAPI的出现原因" class="headerlink" title="前言：CompositionAPI的出现原因"></a>前言：CompositionAPI的出现原因</h4><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">Composition API是Vue3中核心逻辑及代码组织方法。Vue核心团队将Composition API描述为：一组基于功能的附加API，可以灵活的组合组件的逻辑。在基于Vue2开发项目时，通过methods、watch、data等组件属性实现页面逻辑的方式称之为Option API。Option API模式不仅导致组件业务分散、产生胶水代码，而且编写的代码也需要Vue编译器将JS代码转换为真正的执行代码。Composition API通过将组件属性作为JS函数暴露出来以解决上述问题，通过Composition API实现的业务代码无需编译器中间处理，同时TypeScript的类型检查机制可以更好的保障代码的健壮。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-原生Vue-与-CompositionAPI开发的区别"><a href="#1-原生Vue-与-CompositionAPI开发的区别" class="headerlink" title="1.原生Vue 与 CompositionAPI开发的区别"></a>1.原生Vue 与 CompositionAPI开发的区别</h4><p>两种方式完成一个案例: 定义一个变量’count’,通过计算属性获取’count’的二倍,并且定义方法使’count’递增</p><ul><li>原生Vue</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>home<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>原生Vue开发案例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>    value: {{count}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    通过计算属性获取Val的二倍: {{getValDouble}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>    通过方法获取Val的二倍并且转成字符串: {{getValStr('Hello')}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count++<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>      count<span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token function">getValDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token function">getValStr</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>getValDouble <span class="token operator">+</span> str    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>CompositionAPI开发</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>about<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>CompositionAPI开发案例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    value:{{data.count}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    计算属性获取:{{getDouble}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>ref<span class="token punctuation">,</span>reactive<span class="token punctuation">,</span>computed<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">/** 定义响应式变量*/</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      count<span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">/** 定义计算属性*/</span>    <span class="token keyword">const</span> getDouble <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> data<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment">/** 定义方法*/</span>    <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      data<span class="token punctuation">.</span>count<span class="token operator">++</span>    <span class="token punctuation">}</span>    <span class="token comment">/** 统一导出,才能使用*/</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>data<span class="token punctuation">,</span>getDouble<span class="token punctuation">,</span>add<span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="2-Setup"><a href="#2-Setup" class="headerlink" title="2. Setup"></a>2. Setup</h4><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">setup()函数是Vue3新增的函数,是CompositionApi的入口,执行周期是在beforeCreate之前。所以setup执行时,组件还未创建,不存在this的概念,所以也就无法访问组件的data数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>setup执行时机</li></ul><p><img src="http://qrv86414a.hb-bkt.clouddn.com/FvvtywHHDM2_ny1wHfKrcRbE4BUS"></p><p><img src="http://qrv86414a.hb-bkt.clouddn.com/FnUbR0nSGp9V5nG3E1g9ajevEa0D"></p><ul><li><p>setup可选参数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span>context</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setup'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>props:  父组件传递的参数</li><li>Context: 上下文对象,包含以下属性<ul><li>context.attrs :获取父组件传递的并且 没有在子组件props定义的数据</li><li>context.slots : 获取插槽信息</li><li>context.parent :获取父组件</li><li>context.root :获取根组件</li><li>context.emit :向父组件派发事件</li><li>context.refs</li></ul></li></ul></li></ul><h4 id="3-CompositionAPI-常用的API"><a href="#3-CompositionAPI-常用的API" class="headerlink" title="3. CompositionAPI 常用的API"></a>3. CompositionAPI 常用的API</h4><h5 id="3-1-ref"><a href="#3-1-ref" class="headerlink" title="3.1  ref"></a>3.1  ref</h5><p> 通过vue提供的 ref 创建响应式变量</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>  <span class="token comment">/** 导入一些可能会用到的API*/</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span>reactive<span class="token punctuation">,</span>ref<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">"ComApi"</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//创建一个响应式对象</span>    <span class="token comment">//定义方法</span>    <span class="token keyword">let</span> <span class="token function-variable function">modify</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>      <span class="token comment">//如果要修改响应式对象,必须通过.value</span>      count<span class="token punctuation">.</span>value <span class="token operator">=</span> val    <span class="token punctuation">}</span>    <span class="token comment">//必须返回抛出去,模板上才能用</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>      count<span class="token punctuation">,</span>modify    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-2-reactive"><a href="#3-2-reactive" class="headerlink" title="3.2 reactive"></a>3.2 reactive</h5><p>通过vue提供的 ref 创建响应式对象</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>  <span class="token comment">/** 导入一些可能会用到的API*/</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span>reactive<span class="token punctuation">,</span>ref<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">"ComApi"</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">//创建一个响应式对象</span>      name<span class="token operator">:</span> <span class="token string">'lxz'</span><span class="token punctuation">,</span>      age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>      sex<span class="token operator">:</span> <span class="token string">'男'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//定义修改响应式对象的方法</span>    <span class="token keyword">let</span> <span class="token function-variable function">modifyObj</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>      obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'www.lxz.zone'</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>      obj<span class="token punctuation">,</span>modifyObj    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-3-toRefs"><a href="#3-3-toRefs" class="headerlink" title="3.3 toRefs"></a>3.3 toRefs</h5><p>将原生对象包装成响应式对象</p><h5 id="3-4-readonly"><a href="#3-4-readonly" class="headerlink" title="3.4 readonly"></a>3.4 readonly</h5><p>将响应式对象还原成原生对象</p><h5 id="3-5-computed-计算属性"><a href="#3-5-computed-计算属性" class="headerlink" title="3.5 computed     计算属性"></a>3.5 computed     计算属性</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>  <span class="token comment">/** 导入一些可能会用到的API*/</span>  <span class="token keyword">import</span> {reactive<span class="token punctuation">,</span>ref<span class="token punctuation">,</span>computed<span class="token punctuation">,</span>toRefs<span class="token punctuation">,</span>readonly} <span class="token keyword">from</span> <span class="token string">'vue'</span>export <span class="token keyword">default</span> {name: <span class="token string">"ComApi"</span><span class="token punctuation">,</span>  setup<span class="token punctuation">(</span><span class="token punctuation">)</span>{  <span class="token comment">/** 定义响应式对象*/</span>  const userInfo <span class="token operator">=</span> reactive<span class="token punctuation">(</span>{      name: <span class="token string">'张三'</span><span class="token punctuation">,</span>      passwd: <span class="token string">'root'</span>    }<span class="token punctuation">)</span>    <span class="token comment">/** 定义计算属性*/</span>    const getUserInfo <span class="token operator">=</span> computed<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&gt;</span>{      <span class="token keyword">return</span> userInfo    }<span class="token punctuation">)</span>    <span class="token keyword">return</span>{      userInfo<span class="token punctuation">,</span>      getUserInfo    }  }}<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-6-watch-监听器"><a href="#3-6-watch-监听器" class="headerlink" title="3.6 watch 监听器"></a>3.6 watch 监听器</h5><p>默认监听 监听器代码块使用的所有对象</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>  <span class="token comment">/** 导入一些可能会用到的API*/</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span>reactive<span class="token punctuation">,</span>ref<span class="token punctuation">,</span>computed<span class="token punctuation">,</span>watch<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">"ComApi"</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">/** 定义响应式对象*/</span>  <span class="token keyword">let</span> userInfo <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      name<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>      passwd<span class="token operator">:</span> <span class="token string">'root'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">/** 定义监听器,监听userInfo的变化  immediate:是否监听执行初始值,启动时是否执行一次*/</span>    <span class="token function">watch</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newUserInfo</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newUserInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'userInfo 发生了变化!'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>immediate<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment">/** 监听多个值*/</span>    <span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span>user1<span class="token punctuation">,</span>user2<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>new1<span class="token punctuation">,</span>new2<span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment">/** 定义方法修改userInfo*/</span>    <span class="token keyword">const</span> <span class="token function-variable function">modify</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">let</span> str <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      userInfo<span class="token punctuation">.</span>name <span class="token operator">=</span> str    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>      userInfo<span class="token punctuation">,</span>      getUserInfo<span class="token punctuation">,</span>      modify    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-CompositionAPI的声明周期"><a href="#4-CompositionAPI的声明周期" class="headerlink" title="4. CompositionAPI的声明周期"></a>4. CompositionAPI的声明周期</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token comment">/** 导入setup的钩子函数*/</span><span class="token keyword">import</span> <span class="token punctuation">{</span>onBeforeMount<span class="token punctuation">,</span> onMounted<span class="token punctuation">,</span> onBeforeUpdate<span class="token punctuation">,</span> onUpdated<span class="token punctuation">,</span>onBeforeUnmount<span class="token punctuation">,</span>onUnmounted<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"SetUpPeriod"</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">onBeforeMount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"1.onBeforeMount 挂载之前..."</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"2.onMounted 挂载后..."</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">onBeforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onBeforeUpdate 修改数据之前...'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">onUpdated</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onUpdated 修改数据后...'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">onBeforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3.onBeforeUnmount 销毁之前...'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">onUnmounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4.onUnmounted 销毁后...'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-非响应式组件通信"><a href="#5-非响应式组件通信" class="headerlink" title="5.非响应式组件通信"></a>5.非响应式组件通信</h4><p><strong>利用provide(父组件)和inject(子组件)的完成通信(此方式非响应式)</strong></p><ul><li><p>父组件定义</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"Root"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      title<span class="token operator">:</span> <span class="token string">'Root组件定义的title'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">/** 这里声明的数据,可以在子组件中获取到*/</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      title<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>子组件定义</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>子组件<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>    子组件获取父组件的数据<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"Child"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  inject<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="6-CompositionAPI-响应式组件通信"><a href="#6-CompositionAPI-响应式组件通信" class="headerlink" title="6.CompositionAPI -响应式组件通信"></a>6.CompositionAPI -响应式组件通信</h4><ol><li>通过Vue3提供的’ref’构建响应式数据</li><li>在父组件中通过Vue3提供的’provide’向子孙组件传递数据</li><li>在子孙组件中通过Vue3提供的“inject”函数,根据父组件传递的数据key 获取值</li></ol><p><strong>父组件定义</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">"./Child"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>ref<span class="token punctuation">,</span>reactive<span class="token punctuation">,</span>provide<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"Root"</span><span class="token punctuation">,</span>  components<span class="token operator">:</span> <span class="token punctuation">{</span>Child<span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">/** 定义响应式数据*/</span>    <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'Root组件定义的message'</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      name<span class="token operator">:</span> <span class="token string">'呵呵'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">/** 向子组件传递数据,格式为: key,value*/</span>    <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span>message<span class="token punctuation">)</span>    <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">"obj"</span><span class="token punctuation">,</span>obj<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>message<span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子组件定义</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>子组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>    子组件获取父组件的message:{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    子组件获取父组件的obj:{{obj}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>inject<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"Child"</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">/** 根据key 获取父组件传递的响应式数据*/</span>    <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'obj'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>      message<span class="token punctuation">,</span>      obj    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-CompositionAPI-整合Router的使用"><a href="#7-CompositionAPI-整合Router的使用" class="headerlink" title="7.CompositionAPI 整合Router的使用"></a>7.CompositionAPI 整合Router的使用</h4><p>​    通过vue-router包提供的’useRoute’,’useRouter’, 在setup中获取Router,并且获取参数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>useRoute<span class="token punctuation">,</span> useRouter<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"RouterApi"</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> id <span class="token operator">=</span> route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">;</span>    <span class="token keyword">let</span> query <span class="token operator">=</span> route<span class="token punctuation">.</span>query<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><u>但是,setup函数只会执行一次,如果是动态传参(resuful)形式,则需要通过监听器来使用(watch)</u></p><p><strong>如下:</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>useRoute<span class="token punctuation">,</span> useRouter<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> <span class="token punctuation">{</span>watch<span class="token punctuation">,</span>ref<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"RouterApi"</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">/** 监听params的变化,一旦更改后,将新值赋予给id(响应式变量)*/</span>    <span class="token function">watch</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>params<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newParams</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newParams<span class="token punctuation">.</span>id<span class="token punctuation">)</span>      id<span class="token punctuation">.</span>value <span class="token operator">=</span> newParams<span class="token punctuation">.</span>id    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-1-组件级的导航守卫"><a href="#7-1-组件级的导航守卫" class="headerlink" title="7.1 组件级的导航守卫"></a>7.1 组件级的导航守卫</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>onBeforeRouteLeave<span class="token punctuation">,</span>onBeforeRouteUpdate<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"RouterApi"</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/** 导航离开该组件的对应路由时调用*/</span>    <span class="token function">onBeforeRouteLeave</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> window<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">你确定要从</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">from</span><span class="token punctuation">.</span>fullPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">离开,到</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>to<span class="token punctuation">.</span>fullPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">吗?</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">/**     * 在当前路由改变，但是该组件被复用时调用     * 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，     * 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。     * 可以访问组件实例 `this`     * */</span>    <span class="token function">onBeforeRouteUpdate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-CompositionAPI-整合Vuex的使用"><a href="#8-CompositionAPI-整合Vuex的使用" class="headerlink" title="8.CompositionAPI 整合Vuex的使用"></a>8.CompositionAPI 整合Vuex的使用</h4><p>​    <strong>通过Vuex提供的 ‘useStore’ 在setup中获取Store</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>useStore<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"StoreApi"</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//获取Store</span>    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">//派发事件</span>      store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'modify'</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>modify<span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3学习之旅【四】Vuex</title>
      <link href="2021/05/04/Vue3%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E5%9B%9B%E3%80%91Vuex/"/>
      <url>2021/05/04/Vue3%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E5%9B%9B%E3%80%91Vuex/</url>
      
        <content type="html"><![CDATA[<h4 id="1-什么是Vuex"><a href="#1-什么是Vuex" class="headerlink" title="1. 什么是Vuex?"></a>1. 什么是Vuex?</h4><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">一个全局的数据管理工具,就是这么简单,主要实现便于组件之间的数据通信！<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-Vuex安装"><a href="#2-Vuex安装" class="headerlink" title="2. Vuex安装"></a>2. Vuex安装</h4><ul><li><p>npm</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install vuex --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>yarn</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yarn add vuex<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="3-概念"><a href="#3-概念" class="headerlink" title="3. 概念"></a>3. 概念</h4><ul><li><p>State</p><p>全局状态(数据)存储区域</p></li><li><p>Getters</p><p>类似于组件中的计算属性</p></li><li><p>Mutations</p><p>操作state数据的函数</p></li><li><p>Actions</p><p>异步操作</p></li><li><p>Modules</p></li></ul><h4 id="4-基本使用"><a href="#4-基本使用" class="headerlink" title="4. 基本使用"></a>4. 基本使用</h4><ul><li>在Vuex中 定义公共数据</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">/** 全局状态(数据)存储区域*/</span>    count<span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">/** 操作state数据的函数*/</span>    <span class="token function">incr</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      state<span class="token punctuation">.</span>count<span class="token operator">++</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">decr</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      state<span class="token punctuation">.</span>count<span class="token operator">--</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">/** 带参数的操作函数*/</span>    <span class="token function">addByNum</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>num</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      state<span class="token punctuation">.</span>count <span class="token operator">+=</span> num    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">/** 带对象参数的操作函数*/</span>    <span class="token function">setObj</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      state<span class="token punctuation">.</span>obj <span class="token operator">=</span> obj    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token comment">//调用后端API</span>    <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>        <span class="token comment">//调用mutations中的方法</span>        context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'getToken'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  modules<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>注册到Vue中</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在任意组件中使用</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span>export default {  name:'About',  methods:{    incr(){      //派发Vuex中 mutations定义的操作函数      this.$store.commit('incr')    },    decr(){      this.$store.commit('decr')    },        /** 派发带有参数的函数*/    addByNum(num){      this.$store.commit('addByNum',num)    },    /** 派发带有对象参数的函数*/    setObj(){      this.$store.commit('setObj',{id : 1001,name: '小张'})    },     dispAsync(){      this.$store.dispatch('getToken')    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="5-Vuex-State模块化"><a href="#5-Vuex-State模块化" class="headerlink" title="5.Vuex State模块化"></a>5.Vuex State模块化</h4><ul><li><p>按业务划分,如User模块数据、Product模块数据</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//定义User模块State</span><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function-variable function">state</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    userInfo<span class="token operator">:</span><span class="token punctuation">{</span>      name<span class="token operator">:</span> <span class="token string">'lxz'</span><span class="token punctuation">,</span>      age<span class="token operator">:</span> <span class="token number">18</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  getters<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token comment">/** 模块化的计算属性,可选三个参数     * 1.本身的state数据     * 2.getters实例     * 3.全局的state数据     * */</span>    <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token parameter">userState<span class="token punctuation">,</span>getters<span class="token punctuation">,</span>rootState</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> userState<span class="token punctuation">.</span>userInfo    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">getCommonData</span><span class="token punctuation">(</span><span class="token parameter">userState<span class="token punctuation">,</span>getters<span class="token punctuation">,</span>rootState</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> rootState<span class="token punctuation">.</span>obj    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">/** 全局状态(数据)存储区域*/</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">/** 操作state数据的函数*/</span>    <span class="token function">getName</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>names<span class="token punctuation">)</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>names    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  getters<span class="token operator">:</span><span class="token punctuation">{</span><span class="token comment">/*Vuex的计算属性*/</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">/** 异步操作区域*/</span>    <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'getName'</span><span class="token punctuation">,</span><span class="token string">'params'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  modules<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">/** 将状态数据进行模块化*/</span>    user <span class="token comment">//将User模块数据 注入到全局模块</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用模块化后的数据</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;h3&gt;Vuex 模块化&lt;/h3&gt;User模块下的数据:{{$store.state.user.userInfo}}&lt;br/&gt;调用User模块下的计算属性:{{$store.getters.getUserInfo}}&lt;br/&gt;调用全局的数据{{$store.getters.getCommonData}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql学习之旅【三】存储引擎</title>
      <link href="2021/05/03/Mysql%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%B8%89%E3%80%91%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/"/>
      <url>2021/05/03/Mysql%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%B8%89%E3%80%91%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h4 id="1-Mysql的体系架构图"><a href="#1-Mysql的体系架构图" class="headerlink" title="1. Mysql的体系架构图"></a>1. Mysql的体系架构图</h4><p><img src="http://qrv86414a.hb-bkt.clouddn.com/FuSKED0vWh8KnEOWCcOUHtHH1uOc"></p><p>整个Mysql有以下几部分组成</p><ul><li>Connection Pool: 客户端连接池组件</li><li>Management Services: 系统管理、控制工具</li><li>SQL Interface: SQL接口组件</li><li>Parser: SQL解析器</li><li>Optimizer: 优化器组件</li><li>Caches &amp; Buffers: 缓冲池组件</li><li>Pluggable Storage Engines: 存储引擎</li><li>File System: 文件系统</li></ul><p>分为三层:</p><ol><li><p><strong>连接层(Connectors)</strong></p><p>最上层是一些客户端和链接服务,包含本地sockct通信和大多数基于客户端/服务端工具实现的类似于TCP/IP的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</p></li><li><p><strong>服务层</strong></p><p>第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询, SQL的分析和优化，部分内置函数的执行。所有跨存储引擎的功能也在这一层实现， 如过程、函数等。在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化如确定表的查询的顺序，是否利用索引等，最后生 成相应的执行操作。如果是select语询,服务器还会查询内部的缓存,如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。</p></li><li><p><strong>存储引擎层</strong></p><p>存储引擎真正的负责了Mysql中的数据的存储与读取,服务器通过API和存储引擎进行通信,不同的存储引擎具有不同的功能,可以根据自己的需求,选择不同的存储引擎。</p></li><li><p><strong>存储层</strong></p><p>数据存储层，主要是将数据存储在文件系统之上,完成与存储弓擎的交互。和其他数据库相比，MySQL有点 与众不同，它的架构可以在多种不同场景中应用并发挥良好作用。主要体现在存储引擎上，插件式的存储引擎架构,将查询处理和其他的系统任务以及数据的存储提取分离。这种架构可以根据业务的需求和实际需要选择合适的存储引擎。</p></li></ol><h4 id="2-存储引擎"><a href="#2-存储引擎" class="headerlink" title="2. 存储引擎"></a>2. 存储引擎</h4><h5 id="2-1概述"><a href="#2-1概述" class="headerlink" title="2.1概述"></a>2.1概述</h5><p>和大多数的数据库不同, MySQL中有一个存储|擎的概念,针对不同的存储需求可以选择最优的存储引擎。存储引擎就是存储数据,建立索引，更新查询数据等等技术的实现方式。存储引擎是基于表的，而不是基于库的。所以存储弓|擎也可被称为表类型。插件是存储引擎是MySQL数据库最重要的特性之一。</p><p>MySQL5.7支持的存储引擎包含: InnoDB 、MyISAM、BDB、 MEMORY、 MERGE、 EXAMPLE、 NDB Cluster. ARCHIVE、 CSV、BLACKHOLE、FEDERATED等, 其中InnoDB和BDB提供事务安全表，其他存储引擎是非事务安全表。Mysql5.5之 前的默认存储引擎是MyISAM，5.5之 后改为InnoDB。</p><h5 id="2-2-查看Mysql支持的存储引擎"><a href="#2-2-查看Mysql支持的存储引擎" class="headerlink" title="2.2 查看Mysql支持的存储引擎"></a>2.2 查看Mysql支持的存储引擎</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> ENGINES<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">mysql&gt; show ENGINES;+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+| Engine             | Support | Comment                                                        | Transactions | XA   | Savepoints |+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+| ARCHIVE            | YES     | Archive storage engine                                         | NO           | NO   | NO         || BLACKHOLE          | YES     | /dev/null storage engine (anything you write to it disappears) | NO           | NO   | NO         || MRG_MYISAM         | YES     | Collection of identical MyISAM tables                          | NO           | NO   | NO         || FEDERATED          | NO      | Federated MySQL storage engine                                 | NULL         | NULL | NULL       || MyISAM             | YES     | MyISAM storage engine                                          | NO           | NO   | NO         || PERFORMANCE_SCHEMA | YES     | Performance Schema                                             | NO           | NO   | NO         || InnoDB             | DEFAULT | Supports transactions, row-level locking, and foreign keys     | YES          | YES  | YES        || MEMORY             | YES     | Hash based, stored in memory, useful for temporary tables      | NO           | NO   | NO         || CSV                | YES     | CSV storage engine                                             | NO           | NO   | NO         |+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+9 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 <strong>InnoDB</strong> 为Default;</p><h5 id="2-3-常用的存储引擎特性对比"><a href="#2-3-常用的存储引擎特性对比" class="headerlink" title="2.3 常用的存储引擎特性对比"></a>2.3 常用的存储引擎特性对比</h5><table><thead><tr><th>特性</th><th>InnoDB</th><th>MyISAM</th><th>MEMORY</th><th>MERGE</th><th>NDB</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td><td>没有</td><td>有</td></tr><tr><td>支持事务安全</td><td>支持</td><td></td><td></td><td></td><td></td></tr><tr><td>支持的锁机制级别</td><td>行锁(高并发)</td><td>表锁</td><td>表锁</td><td>表锁</td><td>行锁</td></tr><tr><td>B树索引</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>哈希索引</td><td></td><td></td><td>支持</td><td></td><td></td></tr><tr><td>全文索引</td><td>支持(5.6以上版本)</td><td>支持</td><td></td><td></td><td></td></tr><tr><td>集群索引</td><td>支持</td><td></td><td></td><td></td><td></td></tr><tr><td>数据索引</td><td>支持</td><td></td><td>支持</td><td></td><td>支持</td></tr><tr><td>索引缓存</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>数据可压缩</td><td></td><td>支持</td><td></td><td></td><td></td></tr><tr><td>空间使用率</td><td>高</td><td>低</td><td>N/A</td><td>低</td><td>低</td></tr><tr><td>内存使用率</td><td>高</td><td>低</td><td>中等</td><td>低</td><td>高</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td><td>高</td><td>高</td></tr><tr><td>物理外键支持</td><td>支持</td><td></td><td></td><td></td><td></td></tr></tbody></table><h4 id="3-存储引擎介绍"><a href="#3-存储引擎介绍" class="headerlink" title="3. 存储引擎介绍"></a>3. 存储引擎介绍</h4><h5 id="3-1-MyISAM"><a href="#3-1-MyISAM" class="headerlink" title="3.1 MyISAM"></a>3.1 MyISAM</h5><p>它是Mysql5.5之前的默认引擎,不支持事务,也不支持外键,每个myisam表在磁盘中存储三个文件,文件名都以表明一致,但用来存储不同的数据</p><ul><li>.frm (表结构元信息 )</li><li>.MYD (表数据信息)</li><li>.MYI (表索引信息)</li><li>.sdi(5.8版本新增的,替代了.frm文件)</li></ul><p>数据文件和索引文件放置不同的目录,平均分布IO,拥有更快的速度</p><p>MyIsam 支持三种存储格式:</p><ul><li>静态表(固定长度)(Default)</li><li>动态表</li><li>压缩表</li></ul><p><strong>适合在读写分离架构中的读库使用</strong></p><h5 id="3-2-Innodb"><a href="#3-2-Innodb" class="headerlink" title="3.2 Innodb"></a>3.2 Innodb</h5><p>InnoDb是MySQL5.5之后的默认存储引擎,提供了具有提交,回滚和崩溃恢复能力的事务安全保障，同时提供了更小的锁粒度和更强的并发能力，拥有自己独立的缓存和日志。但是对比MyISAM的存储弓|擎，InnoDB写的处理效率差一些， 并组会占用便多的磁盘空间以保留数据和索引。</p><p>它会在系统中存储一个扩展名为.idb的文件,此文件包含了所有表信息(索引、数据)</p><ul><li>支持事务</li><li>支持外键约束</li></ul><p><strong>Innodb的主键和索引</strong></p><p>Innodb 的数据文件本身就是以聚簇索引的形式保存,这个聚簇索引也被称为主索引(主键)。Innodb 的每行数据都保存在主索引的叶子节点上,所以innodb表必须存在索引,如果没有定义主键索引,系统会自动创建一个长度为6字节的bitint(long)类型的隐藏字段为索引。除了主键索引外的索引都叫辅助索引或者二级索引,他们都会指向主索引,并且通过主索引获取最终的数据。</p><p><strong>Innodb的存储方式有以下两种</strong></p><ol><li>使用共享表空间存储，这种方式创建的表的表结构保存在.frm文件中，数据和索引|保存在innodb_ data_ <em>home</em> <em>dir 和innodb</em> <em>data file</em> .path定义 的表空间中，可以是多个文件。</li><li>(Default)使用多表空间存储，这种方式创建的表的表结构仍然存在 .frm 文件中，但是每个表的数据和索引单独保存在.ibd中。如果是分区表，则每个分区表对应单独的.ibd文件，文件名是表名+分区名’</li></ol>]]></content>
      
      
      <categories>
          
          <category> Mysql系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBA </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3学习之旅【三】Vue路由</title>
      <link href="2021/04/30/Vue3%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%B8%89%E3%80%91Vue%E8%B7%AF%E7%94%B1/"/>
      <url>2021/04/30/Vue3%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%B8%89%E3%80%91Vue%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h4 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue-Router"></a>Vue-Router</h4><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h4><ul><li><p>npm安装</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install vue-router --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Yarn 安装</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yarn add vur-router<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="2-配置路由规则"><a href="#2-配置路由规则" class="headerlink" title="2.配置路由规则"></a>2.配置路由规则</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** Vue路由配置*/</span><span class="token comment">/** 导出需要的方法*/</span><span class="token keyword">import</span> <span class="token punctuation">{</span>createRouter<span class="token punctuation">,</span>createWebHistory<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token comment">/** 导入需要路由的组件*/</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'@/views/Home'</span><span class="token comment">//创建路由规则</span><span class="token keyword">const</span> routers <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token comment">//触发的path</span>    name<span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>  <span class="token comment">//名称</span>    component<span class="token operator">:</span> Home<span class="token comment">//路由的组件</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token operator">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'About'</span><span class="token punctuation">,</span>    <span class="token comment">//路由组件懒加载模式</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/About'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token operator">:</span> <span class="token string">'/music'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'Music'</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/Music'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token comment">//创建路由器</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment">/*路由模式    vue提供三种模式       Hash: 使用Url的hash值作为路由,url携带#       History: 以HTML5 HistoryAPI和服务器配置       Abstract: 支持所有js运行模式  */</span>  history<span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//指定路由规则</span>  routes<span class="token operator">:</span>routers<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-集成到Vue中"><a href="#3-集成到Vue中" class="headerlink" title="3.集成到Vue中"></a>3.集成到Vue中</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-使用方式"><a href="#4-使用方式" class="headerlink" title="4.使用方式"></a>4.使用方式</h4><p><strong>需要通过两个标签来使用</strong>:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Code: </p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">active-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span> |    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span> |    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/music<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Music<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span> |    <span class="token comment">&lt;!--自定义路由触发--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$router.push(<span class="token punctuation">'</span>/custom<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>custom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span> |    <span class="token comment">&lt;!--获取当前路由的path--&gt;</span>    {{$route.path}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-多个router-view-渲染不同的组件"><a href="#5-多个router-view-渲染不同的组件" class="headerlink" title="5.多个router-view 渲染不同的组件"></a>5.多个router-view 渲染不同的组件</h4><ul><li><p>定义路由规则</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token comment">/*渲染多层组件,默认为Home组件, Name:组件*/</span>  path<span class="token operator">:</span> <span class="token string">'/parent'</span><span class="token punctuation">,</span>  name<span class="token operator">:</span> <span class="token string">'parent'</span><span class="token punctuation">,</span>  components<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token keyword">default</span><span class="token operator">:</span> Home<span class="token punctuation">,</span>    <span class="token function-variable function">Abouts</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/About'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function-variable function">Musics</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/Music'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function-variable function">Customs</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/Custom'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>vue中使用</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!--路由到/parent,该规则下有三个组件,需要通过router-view 的name属性指定对应的子组件名称--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/parent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--通过name属性,指定要渲染的组件--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Abouts<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Musics<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Customs<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="4-子组件"><a href="#4-子组件" class="headerlink" title="4.子组件"></a>4.子组件</h4><ul><li><p>规则定义</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token comment">/*子组件*/</span>  path<span class="token operator">:</span> <span class="token string">'/level'</span><span class="token punctuation">,</span>  <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/components/parent/Level'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  children<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token comment">/* 默认路由*/</span>      path<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/components/parent/salve/One'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token operator">:</span> <span class="token string">'one'</span><span class="token punctuation">,</span>      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/components/parent/salve/One'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token operator">:</span> <span class="token string">'two'</span><span class="token punctuation">,</span>      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/components/parent/salve/Two'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>顶级父组件中使用Level</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/level<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>level<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Level组件中使用子组件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>顶级父组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/level/one<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>one组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span> |    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/level/two<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>two组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="5-路由传递Rest-风格参数"><a href="#5-路由传递Rest-风格参数" class="headerlink" title="5. 路由传递Rest 风格参数"></a>5. 路由传递Rest 风格参数</h4><ul><li><p>规则定义</p><p>指定传递的属性名称为id,可以在路由后的页面通过$route获取到</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>path<span class="token operator">:</span> <span class="token string">'/level'</span><span class="token punctuation">,</span><span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/components/parent/Level'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>children<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>        path<span class="token operator">:</span> <span class="token string">'page/:id'</span><span class="token punctuation">,</span>        <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/components/parent/salve/Page'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>   <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>跳转时携带参数</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in books<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>`/level/page/${item.id}`<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{ item.title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取携带后的参数</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--通过$route获取路由中的参数  --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>路由传递的参数id:{{$route.params.id}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>或者,通过method或计算属性获取<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">'Params'</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="6-路由传递Json对象参数"><a href="#6-路由传递Json对象参数" class="headerlink" title="6.路由传递Json对象参数"></a>6.路由传递Json对象参数</h4><ul><li><p>规则定义</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>path<span class="token operator">:</span> <span class="token string">'/level'</span><span class="token punctuation">,</span><span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/components/parent/Level'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>children<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        path<span class="token operator">:</span> <span class="token string">'book'</span><span class="token punctuation">,</span>        <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/components/parent/salve/Book'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>   <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>路由携带参数,直接将:to绑定为一个对象,带有path、query</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in books<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{path: `/level/book`,query: item}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{ item.title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取携带的json对象</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>Book页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>  传递过来的query对象 {{$route.query}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>title:{{$route.query.title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>id:{{$route.query.id}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="7-全局导航守卫"><a href="#7-全局导航守卫" class="headerlink" title="7.全局导航守卫"></a>7.全局导航守卫</h4><ul><li>导航守卫,主要是在路由前、后，进行拦截,并且处理相关的操作</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** 全局前置守卫,返回True才会进行路由 * to: 要跳转到的路由 * from: 从哪个路由跳转过来的 * */</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>  <span class="token comment">//案例1,给每一种图书展示时修改网页标题</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/level/book'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> to<span class="token punctuation">.</span>query<span class="token punctuation">.</span>title  <span class="token punctuation">}</span>  <span class="token comment">/** 如果是登录,则不需要校验登录信息*/</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/login'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">// 案例2,每次路由前都检查是否持有token,否则就跳转到login页面</span>  <span class="token keyword">const</span> token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>token <span class="token operator">===</span> <span class="token string">''</span> <span class="token operator">||</span> token <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">/** 全局后置守卫 * to: 要跳转到的路由 * from: 从哪个路由跳转过来的 * */</span>router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-keep-alive的使用"><a href="#8-keep-alive的使用" class="headerlink" title="8.keep-alive的使用"></a>8.keep-alive的使用</h4><ul><li><p>实现组件之间的缓存,不会重复销毁创建组件</p><p>Vue3 Router和keep-alive使用方法,可以通过<strong>exclude</strong>属性排除不激活的组件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- router 和 keep-alive 的整合使用 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{Component}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">exclude</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Component<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用keep-alive后,不会触发 <strong>unmounted</strong> 钩子函数,并且只会触发一次<strong>created</strong>钩子函数, 只会不断触发 <strong>activated、deactivated</strong> 钩子函数</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3学习之旅【二】axios封装</title>
      <link href="2021/04/28/Vue3%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%BA%8C%E3%80%91axios%E5%B0%81%E8%A3%85/"/>
      <url>2021/04/28/Vue3%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%BA%8C%E3%80%91axios%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是Axios"><a href="#什么是Axios" class="headerlink" title="什么是Axios?"></a>什么是Axios?</h3><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>  从浏览器中创建 XMLHttpRequests</li><li>  从 node.js 创建 http 请求</li><li>  支持 Promise API</li><li>  拦截请求和响应</li><li>  转换请求数据和响应数据</li><li>  取消请求</li><li>  自动转换 JSON 数据</li><li>  客户端支持防御 XSRF</li></ul><h3 id="npm安装Axios"><a href="#npm安装Axios" class="headerlink" title="npm安装Axios"></a>npm安装Axios</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install axios --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="CDN引入"><a href="#CDN引入" class="headerlink" title="CDN引入"></a>CDN引入</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://unpkg.com/axios/dist/axios.min.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>###实际开发封装Demo</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** 封装的网络请求工具*/</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token comment">/** 设置axios全局配置*/</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">10000</span> <span class="token comment">//超时时间</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'application/json'</span> <span class="token comment">//设置默认提 交 json</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span><span class="token function-variable function">transformRequest</span> <span class="token operator">=</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">//把数据对象 序列化成 json 字符串</span><span class="token comment">/** 初始化自定义的axios实例*/</span><span class="token keyword">const</span> client <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    baseURL<span class="token operator">:</span> <span class="token string">'http://localhost:3000'</span><span class="token punctuation">,</span>    timeout<span class="token operator">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>    headers<span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token string">"Content-Type"</span><span class="token operator">:</span><span class="token string">'application/json'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">transformRequest</span><span class="token operator">:</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">/** 请求拦截器 */</span>client<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token comment">/**     * 从localStorage中 获取token,添加至请求头     * 如果localStorage没有就获取token     */</span>    <span class="token keyword">let</span> token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>token <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'获取token'</span><span class="token punctuation">)</span>        <span class="token function">refreshToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    token <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> token<span class="token punctuation">)</span>    <span class="token keyword">return</span> config<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">/** 响应拦截器*/</span>client<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token comment">/** 如果token 未通过,可能已过期或者已失效,重新刷新token*/</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">10004</span> <span class="token operator">||</span> config<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">10005</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'token过期,刷新token'</span><span class="token punctuation">)</span>        <span class="token function">refreshToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">/** 只需要结果的data属性*/</span>    <span class="token keyword">return</span> config<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">/** Get请求函数*/</span><span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span>params</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span>  client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">{</span>params<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">/** Post请求函数*/</span><span class="token keyword">function</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">/** Put请求函数*/</span><span class="token keyword">function</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">/** Delete请求函数*/</span><span class="token keyword">function</span> <span class="token function">deletes</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">/** 获取或刷新token*/</span><span class="token keyword">function</span> <span class="token function">refreshToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://localhost:3000/api/v1/login"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        <span class="token string">"username"</span><span class="token operator">:</span> <span class="token string">'mcx'</span><span class="token punctuation">,</span>        <span class="token string">"password"</span><span class="token operator">:</span><span class="token string">'mcx'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> token <span class="token operator">=</span><span class="token string">'Bearer '</span> <span class="token operator">+</span> result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>token        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>        localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span>token<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">/** 导出封装的请求函数*/</span><span class="token keyword">export</span> <span class="token punctuation">{</span>get<span class="token punctuation">,</span>post<span class="token punctuation">,</span>put<span class="token punctuation">,</span>deletes<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postgresql学习之旅【一】基础语法篇</title>
      <link href="2021/04/23/Postgresql%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%B8%80%E3%80%91%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E7%AF%87/"/>
      <url>2021/04/23/Postgresql%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%B8%80%E3%80%91%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h3><h4 id="1-1何为PostgreSQL"><a href="#1-1何为PostgreSQL" class="headerlink" title="1.1何为PostgreSQL"></a>1.1何为PostgreSQL</h4><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">PostgreSQL是以加州大学伯克利分校计算机系开发的POSTGRES， 版本 4.2为基础的对象关系型数据库管理系统（ORDBMS）。POSTGRES 领先的许多概念在很久以后才出现在一些商业数据库系统中。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-连接pgsql"><a href="#2-连接pgsql" class="headerlink" title="2.连接pgsql"></a>2.连接pgsql</h3><ul><li><p>使用pgsql连接数据库语法格式如下:</p><p>psql [option…] [dbname] [username]</p><p>其中option是连接相关参数,psql是postgresql提供的终端命令,在安装目录bin文件下,例:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">psql -h101.37.79.47 -p5432 -Uroot -d postgres<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-h: 数据库的IP地址</li><li>-p:数据库端口</li><li>-U: 登录的用户名</li><li>-d: 数据库名</li></ul></li></ul><h3 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3.常用命令"></a>3.常用命令</h3><ul><li><p>“\d”   查看当前数据库中所有表、视图、序列</p></li><li><p>“\d [table_name]”   在”\d”后面指定表名,则可以查看该表的定义结构</p></li><li><p>“\db”  查看表空间信息</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">postgres=&gt; \db      List of tablespaces    Name    | Owner | Location ------------+-------+---------- pg_default | l     |  pg_global  | l     | <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>“\dn”  查看所有模式信息</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">postgres=&gt; \dnList of schemas  Name  | Owner --------+------- public | l(1 row)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>“\du” 或者 “\dg” 查看数据库中所有角色和用户</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">postgres=&gt; \dg                                   List of roles Role name |                         Attributes                         | Member of -----------+------------------------------------------------------------+----------- l         | Superuser, Create role, Create DB, Replication, Bypass RLS | {} root      |                                                            | {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>“?“ 查看Postgresql提供的所有命令</p></li><li><p>“\timing”  打开or关闭sql执行时间的开关</p></li></ul><h3 id="4-表空间"><a href="#4-表空间" class="headerlink" title="4.表空间"></a>4.表空间</h3><p>​    如果需要把不同的表放在不同的存储介质或不同的文件系统下,则要用到 ‘表空间’ 的概念,在pgsql中,表空间为表等对象指定一个存储的目录</p><ul><li><p>创建表空间</p><ul><li><p>简单创建表空间</p><p>  空间名称: tbs_root</p><p>  对应物理文件路径: /usr/local/pgsql/pgdata/root_table_space(该文件夹要事先创建好)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLESPACE</span> tbs_root LOCATION <span class="token string">'/usr/local/pgsql/pgdata/root_table_space'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意: pgsql不推荐将表空间建立在 数据目录,单独抽离最好</p></li></ul><ul><li><p>创建表空间(space01)并且赋予权限给指定用户(root)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">tablespace</span> space01 owner root location <span class="token string">'/usr/local/pgsql/tables_space/root/space01'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>修改表空间</p><ul><li><p>修改原有表空间(space01)名称 为 space02</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLESPACE</span> space01 <span class="token keyword">RENAME</span> <span class="token keyword">TO</span> space02<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改表空间所属用户为 ‘root’</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">tablespace</span> space01 owner <span class="token keyword">to</span> root<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>删除表空间</p><p>空间名称: tbs_root</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLESPACE</span> <span class="token keyword">IF</span> <span class="token keyword">exists</span> tbs_root<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除表空间必须保证该空间的所有数据已经清除,否则命令执行失败</p></li></ul><h3 id="5-数据库操作"><a href="#5-数据库操作" class="headerlink" title="5. 数据库操作"></a>5. 数据库操作</h3><h4 id="5-1-创建数据库"><a href="#5-1-创建数据库" class="headerlink" title="5.1 创建数据库"></a>5.1 创建数据库</h4><p>语法格式如下</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">CREATE DATABASE _name  [[WITH][OWNER[=]_user_name]  [TEMPLATE [=]_template]  [ENCODING[=]_encoding]  [LC_COLLATE[=]_lc_collate]  [LC_CTYPE[=]_lc_ctype]  [TABLESPACE[=]_table_space]  [ALLWCONN[=]_allwconn]  [CONNECTION LIMIT[=]_connlimit]  [IS_TEMPLATE[=]_istemplate]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>_name : 数据库名</li><li>_user_name: 该数据库所属者用户名</li><li>_template: 使用的模板库,默认的模板库是template1</li><li>_encoding: 字符集,默认使用模板库的字符集</li><li>_lc_collate: 该数据库使用的排序规则,这会影响Order by 语法中字符串类型的顺序,也会影响text类型的索引顺序,默认跟模板库一致</li><li>_lc_ctype: 该数据库的字符分类,会影响字符的分类</li><li>_table_space: 关联的表空间</li><li>_allwconn: 是否可以连接数据库</li><li>_connlimit: 允许并发连接的数据库个数,默认为-1 表示没有限制</li><li>_istemplate: 是否是模板库,默认为false</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 创建root_db数据库,所属者是root,关联space01表空间</span><span class="token keyword">create</span> <span class="token keyword">database</span> root_db owner root<span class="token keyword">tablespace</span> space01表空间<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-修改数据库"><a href="#5-2-修改数据库" class="headerlink" title="5.2 修改数据库"></a>5.2 修改数据库</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#修改数据库名</span><span class="token keyword">alter</span> <span class="token keyword">database</span> db_test <span class="token keyword">rename</span> <span class="token keyword">to</span> db_test03<span class="token comment">#修改最大连接数</span><span class="token keyword">alter</span> <span class="token keyword">database</span> db_test connection <span class="token keyword">limit</span> <span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3-删除数据库"><a href="#5-3-删除数据库" class="headerlink" title="5.3 删除数据库"></a>5.3 删除数据库</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">database</span> <span class="token keyword">if</span> existe db_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-表结构操作"><a href="#6-表结构操作" class="headerlink" title="6. 表结构操作"></a>6. 表结构操作</h3><h4 id="6-1-创建表"><a href="#6-1-创建表" class="headerlink" title="6.1 创建表"></a>6.1 创建表</h4><ul><li><p>创建一个名为dept的表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> dept<span class="token punctuation">(</span>dept_id <span class="token keyword">int</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>dept_name <span class="token keyword">varchar</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>create_time <span class="token keyword">TIMESTAMP</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Check约束 create_time必须大于指定的日期</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> dept<span class="token punctuation">(</span>dept_id <span class="token keyword">int</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>dept_name <span class="token keyword">varchar</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>create_time <span class="token keyword">TIMESTAMP</span>  <span class="token keyword">CONSTRAINT</span> create_time_check <span class="token keyword">CHECK</span><span class="token punctuation">(</span>create_time <span class="token operator">&gt;</span> <span class="token string">'2020-01-01 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>表级的Check约束,字段与字段之间的约束</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#create_time必须晚于parent_create_time</span><span class="token keyword">create</span> <span class="token keyword">table</span> dept<span class="token punctuation">(</span>dept_id <span class="token keyword">int</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>dept_name <span class="token keyword">varchar</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>create_time <span class="token keyword">TIMESTAMP</span><span class="token punctuation">,</span>parent_id <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>parent_create_time <span class="token keyword">TIMESTAMP</span><span class="token punctuation">,</span><span class="token keyword">CHECK</span><span class="token punctuation">(</span>create_time <span class="token operator">&gt;</span> parent_create_time<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>唯一约束 [UNIQUE]</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#表示 dept_id 是唯一的,不存在相同的情况</span><span class="token keyword">create</span> <span class="token keyword">table</span> dept<span class="token punctuation">(</span>dept_id <span class="token keyword">int</span>  <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>dept_name <span class="token keyword">varchar</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>create_time <span class="token keyword">TIMESTAMP</span><span class="token punctuation">)</span><span class="token comment">#或</span><span class="token keyword">create</span> <span class="token keyword">table</span> dept<span class="token punctuation">(</span>dept_id <span class="token keyword">int</span>  <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>dept_name <span class="token keyword">varchar</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>create_time <span class="token keyword">TIMESTAMP</span><span class="token punctuation">,</span>  <span class="token keyword">unique</span><span class="token punctuation">(</span>dept_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>主键约束 [PRIMARY KEY]</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> dept<span class="token punctuation">(</span>dept_id <span class="token keyword">int</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>dept_name <span class="token keyword">varchar</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>create_time <span class="token keyword">TIMESTAMP</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>联合主键约束</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> dept<span class="token punctuation">(</span>dept_id <span class="token keyword">int</span>  <span class="token operator">not</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>dept_no <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">NULL</span>dept_name <span class="token keyword">varchar</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>create_time <span class="token keyword">TIMESTAMP</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>dept_id<span class="token punctuation">,</span>dept_no<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>默认值约束[DEFAULT]</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> dept<span class="token punctuation">(</span>dept_id <span class="token keyword">int</span>  <span class="token operator">not</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>dept_name <span class="token keyword">varchar</span> <span class="token keyword">DEFAULT</span> <span class="token string">'暂无'</span><span class="token punctuation">,</span>create_time <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>外键约束</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#创建emp表,其中dept_id为物理外键, REFERENCES 指定父表</span><span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>emp_id <span class="token keyword">int</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>emp_name <span class="token keyword">VARCHAR</span> <span class="token operator">not</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>dept_id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">NULL</span> <span class="token keyword">REFERENCES</span> dept<span class="token punctuation">,</span>create_time <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="6-2-修改表"><a href="#6-2-修改表" class="headerlink" title="6.2 修改表"></a>6.2 修改表</h4><ul><li><p>修改表名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> emp <span class="token keyword">rename</span> <span class="token keyword">to</span> emp_02<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改字段名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> emp <span class="token keyword">RENAME</span> <span class="token keyword">COLUMN</span> <span class="token punctuation">`</span>username<span class="token punctuation">`</span> <span class="token keyword">to</span> <span class="token punctuation">`</span>nikename<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>添加字段</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> emp <span class="token keyword">ADD</span> <span class="token keyword">COLUMN</span> <span class="token punctuation">`</span>_create_time<span class="token punctuation">`</span> <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除字段</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> emp <span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span> <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="6-3-删除表"><a href="#6-3-删除表" class="headerlink" title="6.3 删除表"></a>6.3 删除表</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#删除单表</span><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> emp<span class="token punctuation">;</span><span class="token comment">#删除多表</span><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> emp<span class="token punctuation">,</span>dept<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-CRUD"><a href="#7-CRUD" class="headerlink" title="7.CRUD"></a>7.CRUD</h3><h4 id="7-1-插入数据-Insert"><a href="#7-1-插入数据-Insert" class="headerlink" title="7.1 插入数据(Insert)"></a>7.1 插入数据(Insert)</h4><ul><li><p>指定字段插入数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> dept<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>create_time<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">'人事部'</span><span class="token punctuation">,</span><span class="token string">'2020-05-19 12:30:00'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>不指定字段插入数据,需要按字段顺序添加,必须填写全部字段</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> dept <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token string">'技术部'</span><span class="token punctuation">,</span><span class="token string">'2021-04-10'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果一张表所有字段都可以为空时,可以执行以下语句,表示所有字段都取默认值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> dept <span class="token keyword">DEFAULT</span> <span class="token keyword">VALUES</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>批量插入数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> dept <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>create_time<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span><span class="token string">'业务部'</span><span class="token punctuation">,</span><span class="token string">'2021-04-10'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1004</span><span class="token punctuation">,</span><span class="token string">'市场部'</span><span class="token punctuation">,</span><span class="token string">'2021-04-10'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1005</span><span class="token punctuation">,</span><span class="token string">'管理部'</span><span class="token punctuation">,</span><span class="token string">'2021-04-10'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="7-2-其余懒得写了…"><a href="#7-2-其余懒得写了…" class="headerlink" title="7.2 其余懒得写了…"></a>7.2 其余懒得写了…</h4><h3 id="8-数据类型"><a href="#8-数据类型" class="headerlink" title="8. 数据类型"></a>8. 数据类型</h3><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">Postgresql 的数据类型非常丰富,除数据库常见的数据类型(如数值、字符串)还有一些高级类型,如JSON、几何类型等.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="8-1-数值类型"><a href="#8-1-数值类型" class="headerlink" title="8.1 数值类型"></a>8.1 数值类型</h4><ul><li><p>整数类型</p><table><thead><tr><th align="left">类型名称</th><th>存储容量</th><th>说明</th><th>取值范围</th></tr></thead><tbody><tr><td align="left">smallint</td><td>2字节</td><td>小范围整数</td><td>-32768~32767</td></tr><tr><td align="left">integer</td><td>4字节</td><td>整数的常见选择</td><td>-2147483648~2147483647</td></tr><tr><td align="left">bigint</td><td>8字节</td><td>大范围整数</td><td>-9223372036854775808~9223372036854775807</td></tr></tbody></table></li><li><p>任意精度数值类型</p><table><thead><tr><th>类型名称</th><th>存储容量</th><th>说明</th><th>取值范围</th></tr></thead><tbody><tr><td>numeric</td><td>可变</td><td>用户指定精度,精确</td><td>最高小数点前131072位,以及小数点后16383位</td></tr><tr><td>decimal</td><td>同上</td><td>同上</td><td>同上</td></tr></tbody></table></li><li><p>浮点类型</p><table><thead><tr><th>类型名称</th><th>存储容量</th><th>说明</th><th>取值范围</th></tr></thead><tbody><tr><td>real</td><td>4字节</td><td>可变精度,不精确</td><td>6位十进制精度</td></tr><tr><td>Double precision</td><td>8字节</td><td>同上</td><td>15位十进制精度</td></tr></tbody></table></li><li><p>序列类型</p><p><em><u><strong>序列类型并不是真正的数据类型,通常我们需要使用自增主键的时候可以直接使用以下三种类型</strong></u></em></p><table><thead><tr><th>类型名称</th><th>存储容量</th><th>说明</th><th>取值范围</th></tr></thead><tbody><tr><td>smallserial</td><td>2字节</td><td>自动增加的小整数</td><td>1~32767</td></tr><tr><td>serial</td><td>4字节</td><td>自动递增的整数</td><td>1~2147483647</td></tr><tr><td>bigserial</td><td>8字节</td><td>自动递增的大整数</td><td>1~9223372036854775807</td></tr></tbody></table></li><li><p>货币类型</p><table><thead><tr><th>类型名称</th><th>存储容量</th><th>说明</th><th>取值范围</th></tr></thead><tbody><tr><td>Money</td><td>8字节</td><td>货币、金钱类型</td><td>-92233720368547758.08~92233720368547758.07</td></tr></tbody></table><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">lc_monetary默认为美元,需要将其设置为 'zh_CN.utf8'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="8-2-字符串类型"><a href="#8-2-字符串类型" class="headerlink" title="8.2 字符串类型"></a>8.2 字符串类型</h4><table><thead><tr><th>类型名称</th><th>说明</th></tr></thead><tbody><tr><td>char</td><td>固定长度字符串,长度不足时以空格填充字节</td></tr><tr><td>varchar</td><td>有长度限制的变长字符串</td></tr><tr><td>text</td><td>无长度限制的变长字符串</td></tr></tbody></table><ul><li><p>连接运算符</p><table><thead><tr><th>运算符</th><th>返回类型</th><th>说明</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>string||string</td><td>text</td><td>拼接</td><td>‘post’||’greSql’</td><td>‘postgreSql’</td></tr><tr><td>string|| not-string</td><td>text</td><td>使用非字符串进行拼接</td><td>‘Val’||98</td><td>‘Val98’</td></tr></tbody></table></li><li><p>匹配运算符</p><ul><li><p>LIKE模糊匹配</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token string">'今天天气真好'</span> <span class="token operator">like</span> <span class="token string">'%天气%'</span> <span class="token comment">#R: t</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>SIMILAR TO</p></li><li><p>POSIX正则表达式</p></li></ul></li></ul><h4 id="8-3-日期类型和时间类型"><a href="#8-3-日期类型和时间类型" class="headerlink" title="8.3 日期类型和时间类型"></a>8.3 日期类型和时间类型</h4><table><thead><tr><th>类型名称</th><th>存储容量</th><th>说明</th><th>Min_val</th><th>Max_val</th><th>分辨率</th></tr></thead><tbody><tr><td>timestamp</td><td>8字节</td><td>包括日期和时间(无时区)</td><td>4713BC</td><td>294276AD</td><td>1毫秒/14位</td></tr><tr><td>timestamp</td><td>8字节</td><td>包含日期和时间(有时区)</td><td>同上</td><td>同上</td><td>同上</td></tr><tr><td>date</td><td>4字节</td><td>只包含日期</td><td>同上</td><td>5874897AD</td><td>一天</td></tr><tr><td>time</td><td>8字节</td><td>只包含时间</td><td>0:00:00</td><td>24:00:00</td><td>1毫秒/14位</td></tr><tr><td>time</td><td>12字节</td><td>只包含时间(带时区)</td><td>0:00:00+1459</td><td>24:00:00-1459</td><td>同上</td></tr><tr><td>interval</td><td>16字节</td><td>时间间隔</td><td>-178000000年</td><td>178000000年</td><td>1毫秒/14位</td></tr></tbody></table><h4 id="8-4-布尔类型"><a href="#8-4-布尔类型" class="headerlink" title="8.4 布尔类型"></a>8.4 布尔类型</h4><ul><li><p>PostgreSQL 布尔类型有三种状态</p><ul><li>true 真</li><li>false 假</li><li>unknown 位置</li></ul></li><li><p>所占字节为 ‘1’字节</p></li><li><p>代表“真” 和 “假”可以使用的值</p><table><thead><tr><th>真</th><th>假</th></tr></thead><tbody><tr><td>‘t’</td><td>‘f’</td></tr><tr><td>‘true’</td><td>‘false’</td></tr><tr><td>‘y’</td><td>‘n’</td></tr><tr><td>‘yes’</td><td>‘no’</td></tr><tr><td>‘on’</td><td>‘off’</td></tr><tr><td>‘1’</td><td>‘0’</td></tr></tbody></table></li><li><p>比较谓词运算符</p><table><thead><tr><th>举例</th><th>说明</th></tr></thead><tbody><tr><td>‘a’ BETWEEN  ‘x’  AND  ‘y’</td><td>a 在  x和y之间</td></tr><tr><td>‘a’ NOT  BETWEEN  ‘x’  AND  ‘y’</td><td>a不在 x和y之间</td></tr><tr><td>‘a’ BETWEEN SYMMETRIC  ‘x’  AND  ‘y’</td><td>在对比较值排序后,位于 x和y之间</td></tr><tr><td>‘a’ NOT BETWEEN SYMMETRIC  ‘x’  AND  ‘y’</td><td>在对比较值排序后,不位于 x和y之间</td></tr><tr><td>‘a’ IS DISTINCT from ‘b’</td><td>a不等于b</td></tr><tr><td>‘a’ IS NOT DISTINCT from ‘b’</td><td>a 等于 b</td></tr><tr><td>‘a’ IS NULL</td><td>a是空值</td></tr><tr><td>‘a’ IS NOT NULL</td><td>a不是空值</td></tr><tr><td>‘a’ is true</td><td>a为真</td></tr><tr><td>‘a’ is not  true</td><td>a为假 或 未知</td></tr><tr><td>‘a’ is false</td><td>a为假</td></tr><tr><td>‘a’ is not false</td><td>a为真 或 未知</td></tr><tr><td>‘a’ is unknown</td><td>a 为 未知</td></tr><tr><td>‘a’ is not unknown</td><td>a 为真 或 假</td></tr></tbody></table></li></ul><h4 id="8-5-位串类型"><a href="#8-5-位串类型" class="headerlink" title="8.5 位串类型"></a>8.5 位串类型</h4><h4 id="8-6枚举类型"><a href="#8-6枚举类型" class="headerlink" title="8.6枚举类型"></a>8.6枚举类型</h4><ul><li><p>创建枚举</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TYPE</span> week <span class="token keyword">AS</span> <span class="token keyword">ENUM</span> <span class="token punctuation">(</span><span class="token string">'周一'</span><span class="token punctuation">,</span><span class="token string">'周二'</span><span class="token punctuation">,</span><span class="token string">'周三'</span><span class="token punctuation">,</span><span class="token string">'周四'</span><span class="token punctuation">,</span><span class="token string">'周五'</span><span class="token punctuation">,</span><span class="token string">'周六'</span><span class="token punctuation">,</span><span class="token string">'周日'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建表,使用该枚举作为字段类型</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> course<span class="token punctuation">(</span>name <span class="token keyword">VARCHAR</span><span class="token punctuation">,</span>c_week week<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>表DDL</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token string">"public"</span><span class="token punctuation">.</span><span class="token string">"course"</span> <span class="token punctuation">(</span>  <span class="token string">"name"</span> <span class="token keyword">varchar</span> <span class="token keyword">COLLATE</span> <span class="token string">"pg_catalog"</span><span class="token punctuation">.</span><span class="token string">"default"</span><span class="token punctuation">,</span>  <span class="token string">"c_week"</span> <span class="token string">"public"</span><span class="token punctuation">.</span><span class="token string">"week"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>插入类型为枚举的数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> course <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'数学课'</span><span class="token punctuation">,</span><span class="token string">'周一'</span><span class="token punctuation">)</span><span class="token keyword">insert</span> <span class="token keyword">into</span> course <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'英语'</span><span class="token punctuation">,</span><span class="token string">'周二'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>c-week 字段必须插入定义的枚举才可以,否则无法插入数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> course <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'未知课'</span><span class="token punctuation">,</span><span class="token string">'周八'</span><span class="token punctuation">)</span><span class="token comment">#ERROR:  invalid input value for enum week: "周八"</span><span class="token comment">#LINE 1: insert into course VALUES ('未知课','周八')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>根据枚举作为顺序条件查询</p><ul><li>枚举的大小之分是该枚举创建时所列出的值顺序而定</li><li>每一种枚举都是独立的,无法和其他枚举类型进行比较</li></ul><p><strong>查询周三以后的课程</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> course <span class="token keyword">where</span> c_week <span class="token operator">&gt;</span> <span class="token string">'周三'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>**查询一周内最早一天和最晚一天的课程 **</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> course <span class="token keyword">where</span> c_week <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">MIN</span><span class="token punctuation">(</span>c_week<span class="token punctuation">)</span> <span class="token keyword">FROM</span> course<span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> course <span class="token keyword">where</span> c_week <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">Max</span><span class="token punctuation">(</span>c_week<span class="token punctuation">)</span> <span class="token keyword">FROM</span> course<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>**根据枚举进行排序 **</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> course <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> c_week <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="8-7-几何类型"><a href="#8-7-几何类型" class="headerlink" title="8.7  几何类型"></a>8.7  几何类型</h4><h4 id="8-8-JSON类型"><a href="#8-8-JSON类型" class="headerlink" title="8.8 JSON类型"></a>8.8 JSON类型</h4><table><thead><tr><th>类型名称</th><th>说明</th></tr></thead><tbody><tr><td>json</td><td></td></tr><tr><td>jsonb</td><td>支持索引,效率较快</td></tr></tbody></table><h4 id="8-9-数组类型"><a href="#8-9-数组类型" class="headerlink" title="8.9 数组类型"></a>8.9 数组类型</h4><ul><li><p>创建带有数组类型的表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> users<span class="token punctuation">(</span>name <span class="token keyword">VARCHAR</span><span class="token punctuation">,</span>hobby <span class="token keyword">VARCHAR</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>插入数据:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> users <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'小张'</span><span class="token punctuation">,</span><span class="token string">'{"乒乓球","篮球"}'</span><span class="token punctuation">)</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> users <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'小红'</span><span class="token punctuation">,</span>ARRAY<span class="token punctuation">[</span><span class="token string">'做饭'</span><span class="token punctuation">,</span><span class="token string">'炒菜'</span><span class="token punctuation">,</span><span class="token string">'追星'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>获取数组长度</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> array_dims<span class="token punctuation">(</span>hobby<span class="token punctuation">)</span> <span class="token keyword">from</span> users <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Postgresql系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBA </tag>
            
            <tag> SQL </tag>
            
            <tag> Postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql学习之旅【二】dump指令</title>
      <link href="2021/04/20/Mysql%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%BA%8C%E3%80%91dump%E6%8C%87%E4%BB%A4/"/>
      <url>2021/04/20/Mysql%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%BA%8C%E3%80%91dump%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="使用mysql-bin-目录下提供的mysqldump命令"><a href="#使用mysql-bin-目录下提供的mysqldump命令" class="headerlink" title="使用mysql bin/目录下提供的mysqldump命令"></a>使用mysql bin/目录下提供的mysqldump命令</h3><h4 id="1-导出数据表的结构信息和表数据"><a href="#1-导出数据表的结构信息和表数据" class="headerlink" title="1.导出数据表的结构信息和表数据"></a>1.导出数据表的结构信息和表数据</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysqldump -h[host] -P[Port] -u[用户名] -p[用户密码]  数据库名 表名 &gt; 导出的sql文件mysqldump -h127.0.0.1 -P3306 -uroot -proot gerry_db tb_salary&gt; /usr/local/tb_salary.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-导出多张表"><a href="#2-导出多张表" class="headerlink" title="2. 导出多张表"></a>2. 导出多张表</h4><p>通过 –tables 指定多表,以空格分隔</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysqldump -h127.0.0.1 -P3306 -uroot -proot gerry_db --tables users tb_salary&gt; /usr/local/users_salary.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-只导出表结构"><a href="#3-只导出表结构" class="headerlink" title="3. 只导出表结构"></a>3. 只导出表结构</h4><p>通过 ‘-d’ 指令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysqldump -h127.0.0.1 -P3306 -uroot -proot -d gerry_db tb_salary&gt; /usr/local/tb_salary.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-只导出表数据"><a href="#4-只导出表数据" class="headerlink" title="4. 只导出表数据"></a>4. 只导出表数据</h4><p>通过 ‘-t’ 指令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysqldump -h127.0.0.1 -P3306 -uroot -proot -t gerry_db tb_salary&gt; /usr/local/tb_salary.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-导出指定的数据库中所有表结构及数据"><a href="#5-导出指定的数据库中所有表结构及数据" class="headerlink" title="5.导出指定的数据库中所有表结构及数据"></a>5.导出指定的数据库中所有表结构及数据</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysqldump -h101.37.79.47 -P3306 -uroot -proot --databases gblog &gt; /usr/local/gblog.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6-导出多个的数据库中所有表结构及数据"><a href="#6-导出多个的数据库中所有表结构及数据" class="headerlink" title="6.导出多个的数据库中所有表结构及数据"></a>6.导出多个的数据库中所有表结构及数据</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysqldump -h101.37.79.47 -P3306 -uroot -proot --databases gblog zero &gt; /usr/local/gblog_zero.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-导出所有数据库的所有表结构信息及数据"><a href="#7-导出所有数据库的所有表结构信息及数据" class="headerlink" title="7.导出所有数据库的所有表结构信息及数据"></a>7.导出所有数据库的所有表结构信息及数据</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysqldump -h127.0.0.1 -P3306 -uroot -proot --all-databases &gt; /usr/local/all.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Mysql系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBA </tag>
            
            <tag> SQL </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3学习之旅【一】基础语法</title>
      <link href="2021/04/12/Vue3%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%B8%80%E3%80%91%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>2021/04/12/Vue3%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%B8%80%E3%80%91%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">Vue3的学习日常笔记<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-基础插值语法"><a href="#1-基础插值语法" class="headerlink" title="1.基础插值语法"></a>1.基础插值语法</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html">{{message}}<span class="token comment">&lt;!--插值表达式--&gt;</span><span class="token comment">&lt;!--表示不解析Vue的{{}}插值表达式,直接以string形式渲染--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-pre</span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--只会渲染初始值,不会受双向绑定的影响,如果值进行改变,该标签不会再次渲染    --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-once</span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--以普通文本形式渲染--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--会解析成html形式渲染--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-属性绑定-v-bind"><a href="#2-属性绑定-v-bind" class="headerlink" title="2.属性绑定 v-bind:"></a>2.属性绑定 v-bind:</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html">    <span class="token comment">&lt;!--{{}}的插值方式,无法在html标签的属性中使用,这样无法进行解析,表示'{{message}}'就是个字符串 如:--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{{message}}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--通过v-bind来进行标签属性绑定--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title.message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--v-bind: 简写语法糖如下    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title.message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img.url<span class="token punctuation">"</span></span> <span class="token attr-name">:alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img.message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--#################################################################################--&gt;</span>        <span class="token comment">&lt;!--style行内样式的绑定 绑定数组的形式--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>font-size:10px<span class="token punctuation">'</span>,<span class="token punctuation">'</span>background: red<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>style bind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 直接用对象绑定style--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[style.font,style.background]<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>哈哈哈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    style: {        font: 'font-size:10px',        background: 'background: red'    }<span class="token comment">&lt;!--#################################################################################--&gt;</span>    <span class="token comment">&lt;!--绑定class属性--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>customFont<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>class<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--最基础的方式,基本不会用--&gt;</span>    <span class="token comment">&lt;!--绑定class 使用对象方式    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classes<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>class2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    classes: 'customFont'    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">.customFont</span><span class="token punctuation">{</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--动态绑定class--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classes<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>绑定对象,对象关联style<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    data(){        return{            classes: ['customFont','customBackcolor'] //要绑定的class名称    }}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">.customFont</span><span class="token punctuation">{</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.customBackcolor</span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #42b983<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>class绑定Example<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--动态绑定 class属性 Example--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 绑定的对象都为boolean类型,并且名称和定义的style名称一致,如果为true,就会在该标签加上定义的style样式--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{activeSty,isShowInfo}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            真不错        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--修改IsShowInfo的值--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isShowInfo = !isShowInfo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            按钮        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token string">"App"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">{</span>                activeSty<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//定义一个boolean值,名称与定义的class样式名称一样</span>                isShowInfo<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">//隐藏属性</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token comment">/* 定义一个样式 */</span>    <span class="token selector">.activeSty</span><span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> #42b983<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.isShowInfo</span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-计算属性-computed"><a href="#3-计算属性-computed" class="headerlink" title="3.计算属性 - computed"></a>3.计算属性 - computed</h4>computed 与 method的区别</li><li>computed 具有缓存效果,相同的业务多次运算,具有优势</li><li>computed 不是一个函数,无法带入参数,只有返回值<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{getInfo}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"Example4"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>      author<span class="token operator">:</span> <span class="token string">'lx Zhang'</span><span class="token punctuation">,</span>      message<span class="token operator">:</span> <span class="token string">'Vue3初学者!'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">//计算属性,业务计算</span>  computed<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token comment">//将 author 与 message连接</span>    <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>author <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="4-事件监听-v-on"><a href="#4-事件监听-v-on" class="headerlink" title="4.事件监听 v-on"></a>4.事件监听 v-on</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--Vue 事件监听--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- v-on绑定事件 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnStyle<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>click<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>点击事件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--语法糖 @--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnStyle<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>click($event)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>点击事件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token string">"App"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">{</span>                btnStyle<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'ui inverted blue button'</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"点击事件触发"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-事件修饰符"><a href="#5-事件修饰符" class="headerlink" title="5.事件修饰符"></a>5.事件修饰符</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--stop 阻止冒泡 自己触发事件后,不会触发子元素的事件--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnStyle<span class="token punctuation">"</span></span> <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>click<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>stop阻止冒泡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--self 点击该元素本身才会触发事件,如果本身处于第二级元素,点击第一级元素不会触发该事件--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnStyle<span class="token punctuation">"</span></span> <span class="token attr-name">@click.self</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>click<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>self<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--capture 在冒泡中拥有更高的优先级 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.capture</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>click<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>capture<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--阻止元素本身的事件  只执行自己定义的事件  --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://101.37.79.47/<span class="token punctuation">"</span></span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>click<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>lxz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--once 只会触发一次事件    --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.once</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>click<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-双向绑定-v-model"><a href="#6-双向绑定-v-model" class="headerlink" title="6.双向绑定 v-model"></a>6.双向绑定 v-model</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--通过表单元素的修改,同时也能修改data数据区域,就是双向绑定    --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- v-model修饰符 懒加载  lazy:不会实时监听该数据,只有按enter键或者该输入框失焦后会进行再次绑定   --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model.lazy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--指定为数值类型    --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--自动去除两端字符串    --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model.trim</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-V-model-实现表单绑定"><a href="#7-V-model-实现表单绑定" class="headerlink" title="7. V-model 实现表单绑定"></a>7. V-model 实现表单绑定</h4><ul><li><p>单选框</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--模拟表单双向绑定 单选框--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex_nan<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex_nan<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>0</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>男    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex_nv<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex_nv<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>1</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>女    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>  data(){    return{      sex : 0    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>多选框</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tags<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>java  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>go<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tags<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>go  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vue<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tags<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>vue  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>python<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tags<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>python  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>  {{tags}}  data(){  return{    tags: []  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>下拉框</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--下拉框(单选)--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tag<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Java<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>go<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>go<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>php<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>php<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    {{tag}}  data(){    return{      tag: "Java"    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="8-父子组件通信"><a href="#8-父子组件通信" class="headerlink" title="8.父子组件通信"></a>8.父子组件通信</h4><ul><li><p>父组件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    父组件    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    子组件推送的数据:{{childData}}    <span class="token comment">&lt;!--通过 ':属性名' 向子组件传递参数,会传递到子组件的props属性中--&gt;</span>    <span class="token comment">&lt;!--定义@childPushEvent 事件,接收子组件推送的事件--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Slave</span> <span class="token attr-name">:names</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>names<span class="token punctuation">"</span></span> <span class="token attr-name">@childPushEvent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>listenerChild<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Slave</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> Slave <span class="token keyword">from</span> <span class="token string">"@/components/父子组件通信/Slave"</span><span class="token punctuation">;</span><span class="token comment">//父组件</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"Parent"</span><span class="token punctuation">,</span>  components<span class="token operator">:</span> <span class="token punctuation">{</span>Slave<span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>      names<span class="token operator">:</span> <span class="token string">'lxz.vue'</span><span class="token punctuation">,</span>      childData<span class="token operator">:</span> <span class="token string">'暂无'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token function">listenerChild</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"接收到子组件推送的事件"</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>childData <span class="token operator">=</span> msg    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">.parent</span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 2000px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> antiquewhite<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>子组件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slave<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    子组件    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    父组件传递的数据:{{names}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>push(<span class="token punctuation">'</span>这是子组件的数据<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>推送数据到父组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>callParent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>直接获取父组件数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token comment">//子组件</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"slave"</span><span class="token punctuation">,</span>  props<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token comment">//父组件传递的数据</span>    names<span class="token operator">:</span><span class="token punctuation">{</span>      type<span class="token operator">:</span>String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">"暂无"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">//通过$emit('事件名',参数) 向父组件推送事件,childPushEvent事件必须在父组件声明</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'childPushEvent'</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">callParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">//通过$parent 获取父组件</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span><span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'-------------'</span><span class="token punctuation">)</span>      <span class="token comment">//通过$root 获取最上层父组件</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$root<span class="token punctuation">.</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$root<span class="token punctuation">.</span><span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span>  <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">.slave</span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 1000px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #42b983<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="9-Vue生命周期函数"><a href="#9-Vue生命周期函数" class="headerlink" title="9. Vue生命周期函数"></a>9. Vue生命周期函数</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    {{msg}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateData(<span class="token punctuation">'</span>new data1<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>修改数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateData(<span class="token punctuation">'</span>new data2<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>修改数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"App"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>      msg<span class="token operator">:</span> <span class="token string">"message"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token function">updateData</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> data    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1-beforeCreate-组件实例刚刚初始化之后'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2-created-组件实例已经创建完成'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3-beforeMount-组件挂载DOM之前'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4-mounted-组件挂载DOM完成'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5-beforeUpdate-数据更新之前'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'6-updated-数据更新'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">activated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'被 keep-alive 缓存的组件激活时调用'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">deactivated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'被 keep-alive 缓存的组件停用时调用。'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'7-beforeUnmount-卸载组件实例之前'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">unmounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'8-unmounted-卸载组件实例后'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">errorCaptured</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>instance<span class="token punctuation">,</span>info</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'捕获到子组件的错误'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">renderTracked</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'跟踪虚拟DOM首次或重新渲染时调用,优先级高于mounted 或者 updated'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">renderTriggered</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'此事件告诉你是什么操作触发了重新渲染，以及该操作的目标对象和键,此函数优先级比beforeUpdate要高'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeRouteLeave</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'从该组件路由到其他组件时触发的钩子函数'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="9-1-beforeCreate"><a href="#9-1-beforeCreate" class="headerlink" title="9.1 beforeCreate"></a>9.1 beforeCreate</h5><ul><li>Type:  Function</li><li>详细<ul><li>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</li></ul></li></ul><h5 id="9-2-created"><a href="#9-2-created" class="headerlink" title="9.2 created"></a>9.2 created</h5><ul><li>Type: Function</li><li>详细<ul><li>在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，property 和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，<code>$el</code> property 目前尚不可用。</li></ul></li></ul><h5 id="9-3-beforeMount"><a href="#9-3-beforeMount" class="headerlink" title="9.3 beforeMount"></a>9.3 beforeMount</h5><ul><li>Type: Function</li><li>详细<ul><li>在挂载开始之前被调用：相关的 <code>render</code> 函数首次被调用。<strong>该钩子在服务器端渲染期间不被调用。</strong></li></ul></li></ul><h5 id="9-4-mounted"><a href="#9-4-mounted" class="headerlink" title="9.4 mounted"></a>9.4 mounted</h5><ul><li><p>Type: Function</p></li><li><p>详细</p><ul><li>实例被挂载后调用，这时 <code>Vue.createApp({}).mount()</code> 被新创建的 <code>vm.$el</code> 替换了。如果根实例挂载到了一个文档内的元素上，当 mounted 被调用时 <code>vm.$el</code> 也在文档内。</li><li>注意 <code>mounted</code> 不会保证所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以在 <code>mounted</code> 内部使用 <a href="https://vue3js.cn/docs/zh/api/instance-methods.html#nexttick">vm。$nextTick</a>：</li></ul></li><li><p>使用:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 仅在渲染整个视图之后运行的代码</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="9-5-beforeUpdate"><a href="#9-5-beforeUpdate" class="headerlink" title="9.5 beforeUpdate"></a>9.5 beforeUpdate</h5><ul><li>Type: Function</li><li>详细<ul><li>数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。</li><li><strong>该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行。</strong></li></ul></li></ul><h5 id="9-6-updated"><a href="#9-6-updated" class="headerlink" title="9.6 updated"></a>9.6 updated</h5><ul><li><p>Type: Function</p></li><li><p>详细</p><ul><li><p>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p></li><li><p>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用<a href="https://vue3js.cn/docs/zh/api/options-data.html#computed">计算属性</a>或<a href="https://vue3js.cn/docs/zh/api/options-data.html#watch">侦听器</a>取而代之。</p></li><li><p>使用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 仅在渲染整个视图之后运行的代码</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h5 id="9-7-activated"><a href="#9-7-activated" class="headerlink" title="9.7 activated"></a>9.7 activated</h5><ul><li>Type: Function</li><li>详细<ul><li>被 keep-alive 缓存的组件激活时调用。</li><li><strong>该钩子在服务器端渲染期间不被调用。</strong></li></ul></li></ul><h5 id="9-8-deactivated"><a href="#9-8-deactivated" class="headerlink" title="9.8 deactivated"></a>9.8 deactivated</h5><ul><li>Type: Function</li><li>详细<ul><li>被 keep-alive 缓存的组件停用时调用。</li><li><strong>该钩子在服务器端渲染期间不被调用。</strong></li></ul></li></ul><h5 id="9-9-beforeUnmount"><a href="#9-9-beforeUnmount" class="headerlink" title="9.9 beforeUnmount"></a>9.9 beforeUnmount</h5><ul><li>Type: Function</li><li>详细<ul><li>在卸载组件实例之前调用。在这个阶段，实例仍然是完全正常的。</li><li><strong>该钩子在服务器端渲染期间不被调用。</strong></li></ul></li></ul><h5 id="9-10-unmounted"><a href="#9-10-unmounted" class="headerlink" title="9.10 unmounted"></a>9.10 unmounted</h5><ul><li>Type: Function</li><li>详细<ul><li>卸载组件实例后调用。调用此钩子时，组件实例的所有指令都被解除绑定，所有事件侦听器都被移除，所有子组件实例被卸载。</li><li><strong>该钩子在服务器端渲染期间不被调用。</strong></li></ul></li></ul><h5 id="9-11-errorCaptured"><a href="#9-11-errorCaptured" class="headerlink" title="9.11 errorCaptured"></a>9.11 errorCaptured</h5><ul><li>Type: (err: Error, instance: Component, info: string) =&gt; ?boolean</li><li>详细<ul><li>当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 <code>false</code> 以阻止该错误继续向上传播。</li></ul></li><li>错误传播规则<ul><li>默认情况下，如果全局的 <code>config.errorHandler</code> 被定义，所有的错误仍会发送它，因此这些错误仍然会向单一的分析服务的地方进行汇报。</li><li>如果一个组件的继承或父级从属链路中存在多个 <code>errorCaptured</code> 钩子，则它们将会被相同的错误逐个唤起。</li><li>如果此 <code>errorCaptured</code> 钩子自身抛出了一个错误，则这个新错误和原本被捕获的错误都会发送给全局的 <code>config.errorHandler</code>。</li><li></li><li>一个 <code>errorCaptured</code> 钩子能够返回 <code>false</code> 以阻止错误继续向上传播。本质上是说“这个错误已经被搞定了且应该被忽略”。它会阻止其它任何会被这个错误唤起的 <code>errorCaptured</code> 钩子和全局的 <code>config.errorHandler</code>。</li></ul></li></ul><h5 id="9-12-renderTracked"><a href="#9-12-renderTracked" class="headerlink" title="9.12 renderTracked"></a>9.12 renderTracked</h5><ul><li><p>Type: (e: DebuggerEvent) =&gt; void</p></li><li><p>详细</p><ul><li>跟踪虚拟 DOM 重新渲染时调用。钩子接收 <code>debugger event</code> 作为参数。此事件告诉你哪个操作跟踪了组件以及该操作的目标对象和键。</li></ul></li><li><p>用法</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addToCart<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Add to cart<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Cart({{ cart }})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      cart<span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">renderTracked</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> key<span class="token punctuation">,</span> target<span class="token punctuation">,</span> type <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> key<span class="token punctuation">,</span> target<span class="token punctuation">,</span> type <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">/* 当组件第一次渲染时，这将被记录下来:    {      key: "cart",      target: {        cart: 0      },      type: "get"    }    */</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">addToCart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>cart <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="9-13-renderTriggered"><a href="#9-13-renderTriggered" class="headerlink" title="9.13 renderTriggered"></a>9.13 renderTriggered</h5><ul><li><p>Type: (e: DebuggerEvent) =&gt; void</p></li><li><p>详细</p><ul><li>当虚拟 DOM 重新渲染为 triggered.Similarly 为<a href="https://vue3js.cn/docs/zh/api/options-lifecycle-hooks.html#rendertracked"><code>renderTracked</code></a>，接收 <code>debugger event</code> 作为参数。此事件告诉你是什么操作触发了重新渲染，以及该操作的目标对象和键。</li></ul></li><li><p>用法</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addToCart<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Add to cart<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Cart({{ cart }})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      cart<span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">renderTriggered</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> key<span class="token punctuation">,</span> target<span class="token punctuation">,</span> type <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> key<span class="token punctuation">,</span> target<span class="token punctuation">,</span> type <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">addToCart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>cart <span class="token operator">+=</span> <span class="token number">1</span>      <span class="token comment">/* 这将导致renderTriggered调用        {          key: "cart",          target: {            cart: 1          },          type: "set"        }      */</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql学习之旅【一】内置函数</title>
      <link href="2021/04/11/Mysql%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%B8%80%E3%80%91%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
      <url>2021/04/11/Mysql%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%B8%80%E3%80%91%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="Mysql内置函数"><a href="#Mysql内置函数" class="headerlink" title="Mysql内置函数"></a>Mysql内置函数</h3><h4 id="1-数学函数"><a href="#1-数学函数" class="headerlink" title="1. 数学函数"></a>1. 数学函数</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">获取绝对值<span class="token keyword">select</span> ABS<span class="token punctuation">(</span><span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ABS<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.8</span><span class="token punctuation">)</span> <span class="token comment">#返回绝对值 8,8</span>向上取整<span class="token keyword">SELECT</span> CEILING<span class="token punctuation">(</span><span class="token number">4.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CEIL<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.1</span><span class="token punctuation">)</span> <span class="token comment">#返回大于该值的最小整数 5,-2</span>向下取整<span class="token keyword">SELECT</span> FLOOR<span class="token punctuation">(</span><span class="token number">4.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>FLOOR<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5.1</span><span class="token punctuation">)</span> <span class="token comment">#返回小于或等于该值的最大整数 4,-6</span>取余数的三种方式<span class="token keyword">SELECT</span> <span class="token function">MOD</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span> MOD <span class="token number">3</span> <span class="token comment">#取余数,返回10除以3后的余数</span>四舍五入 不设置精度<span class="token punctuation">,</span>则为整数<span class="token keyword">SELECT</span> <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">1.7823</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">#将数值四舍五入,并且保留2位小数</span>截取数值<span class="token punctuation">,</span>保留指定的精度<span class="token keyword">select</span> <span class="token keyword">TRUNCATE</span><span class="token punctuation">(</span><span class="token number">1.999</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#保留一位小数,其他直接舍弃</span><span class="token keyword">select</span> <span class="token keyword">TRUNCATE</span><span class="token punctuation">(</span><span class="token number">1.999</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#舍弃掉小数</span>获取随机小数<span class="token punctuation">,</span>小于<span class="token number">1</span><span class="token keyword">select</span> RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span>example：随机获取一个<span class="token number">100</span>以内的整数  <span class="token comment">#三种实现</span><span class="token keyword">select</span> <span class="token function">ROUND</span><span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">as</span> num1<span class="token punctuation">,</span><span class="token keyword">TRUNCATE</span><span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">as</span> num2<span class="token punctuation">,</span>CEIL<span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">as</span> num3example: 随机获取一个指定的范围内的整数 获取 R<span class="token punctuation">,</span> 条件: <span class="token number">15</span> <span class="token operator">&lt;=</span> R <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token keyword">SELECT</span> FLOOR<span class="token punctuation">(</span><span class="token number">15</span> <span class="token operator">+</span> RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">50</span> <span class="token operator">-</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-聚合函数"><a href="#2-聚合函数" class="headerlink" title="2.聚合函数"></a>2.聚合函数</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#count 统计表中数据数量,通常会根据表中的 主键统计</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>user_id<span class="token punctuation">)</span> <span class="token keyword">from</span> tb_salary<span class="token comment">#sum 统计某一列数据总和</span><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> tb_salary<span class="token comment">#avg 统计某一列数据的平均值</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">from</span> tb_salary<span class="token comment">#max min 统计最高薪资和最低薪资</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">as</span> max_salary<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">as</span> min_salary <span class="token keyword">from</span> tb_salary<span class="token comment">#DISTINCT 去重统计,将数值一致的数据抹除掉,只保留一条</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> salary<span class="token punctuation">)</span> <span class="token keyword">from</span> tb_salary<span class="token comment">###example</span><span class="token comment">#GROUP_CONCAT的使用 将uint相同的数据列, 将某个字段连接为一个字段,并且以uint分组</span><span class="token comment">#Tables:</span><span class="token operator">+</span><span class="token comment">------+------------+</span><span class="token operator">|</span> uint <span class="token operator">|</span> <span class="token keyword">date</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------------+</span><span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">11</span> <span class="token operator">|</span><span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">11</span> <span class="token operator">|</span><span class="token operator">|</span> b    <span class="token operator">|</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">09</span> <span class="token operator">|</span><span class="token operator">|</span> b    <span class="token operator">|</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">06</span> <span class="token operator">|</span><span class="token operator">|</span> c    <span class="token operator">|</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">11</span> <span class="token operator">|</span><span class="token operator">|</span> c    <span class="token operator">|</span> <span class="token number">2013</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">11</span> <span class="token operator">|</span><span class="token operator">|</span> d    <span class="token operator">|</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">11</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------------+</span><span class="token comment">#Sql:</span><span class="token keyword">select</span> uint<span class="token punctuation">,</span>GROUP_CONCAT<span class="token punctuation">(</span><span class="token punctuation">`</span><span class="token keyword">date</span><span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">from</span> test_count <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> uint<span class="token comment">#Result:</span><span class="token operator">+</span><span class="token comment">------+-----------------------+</span><span class="token operator">|</span> uint <span class="token operator">|</span> GROUP_CONCAT<span class="token punctuation">(</span><span class="token punctuation">`</span><span class="token keyword">date</span><span class="token punctuation">`</span><span class="token punctuation">)</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+-----------------------+</span><span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">11</span> <span class="token operator">|</span><span class="token operator">|</span> b    <span class="token operator">|</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">09</span><span class="token punctuation">,</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">06</span> <span class="token operator">|</span><span class="token operator">|</span> c    <span class="token operator">|</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">2013</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">11</span> <span class="token operator">|</span><span class="token operator">|</span> d    <span class="token operator">|</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">11</span>            <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+-----------------------+</span><span class="token number">4</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token comment"># HAVING的使用 在分组之后,再次进行条件筛选</span><span class="token keyword">select</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>user_id<span class="token punctuation">)</span><span class="token punctuation">,</span>salary <span class="token keyword">from</span> tb_salary <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> salary <span class="token keyword">HAVING</span> salary <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注: <em>聚合函数无法嵌套使用,如:</em></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="example-按照年份、日统计-并且以unit分组"><a href="#example-按照年份、日统计-并且以unit分组" class="headerlink" title="example: 按照年份、日统计,并且以unit分组"></a>example: 按照年份、日统计,并且以unit分组</h5><p><img src="/img/02.png"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    uint <span class="token keyword">as</span> <span class="token string">'单位'</span><span class="token punctuation">,</span>    <span class="token function">count</span><span class="token punctuation">(</span>TO_DAYS<span class="token punctuation">(</span><span class="token punctuation">`</span><span class="token keyword">date</span><span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token operator">=</span> TO_DAYS<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'今日统计'</span><span class="token punctuation">,</span>    <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">YEAR</span><span class="token punctuation">(</span><span class="token punctuation">`</span><span class="token keyword">date</span><span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">YEAR</span><span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token boolean">null</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'今年统计'</span><span class="token keyword">from</span> test_count<span class="token keyword">group</span> <span class="token keyword">by</span> uint<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <em>Result:</em><br><img src="/img/03.png"></p><h4 id="3-字符串函数"><a href="#3-字符串函数" class="headerlink" title="3.字符串函数"></a>3.字符串函数</h4><ul><li>字符串大小写转换  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 转换小写</span><span class="token keyword">select</span> LOWER<span class="token punctuation">(</span><span class="token string">'MYSQL'</span><span class="token punctuation">)</span> <span class="token comment">#Result: mysql</span><span class="token comment"># 转换大写</span><span class="token keyword">select</span> UPPER<span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span> <span class="token comment">#Result: MYSQL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>多个字符串连接  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> CONCAT<span class="token punctuation">(</span><span class="token string">'M'</span><span class="token punctuation">,</span><span class="token string">'Y'</span><span class="token punctuation">,</span><span class="token string">'SQL'</span><span class="token punctuation">)</span> <span class="token comment">#Result: MYSQL</span>如果有任何一个参数为<span class="token boolean">null</span><span class="token punctuation">,</span>则结果为<span class="token boolean">null</span><span class="token keyword">select</span> CONCAT<span class="token punctuation">(</span><span class="token string">'M'</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'SQL'</span><span class="token punctuation">)</span> <span class="token comment">#Result: null</span>如果是数字<span class="token punctuation">,</span>则自动转换为字符串<span class="token keyword">select</span> CONCAT<span class="token punctuation">(</span><span class="token string">'M'</span><span class="token punctuation">,</span><span class="token string">'Y'</span><span class="token punctuation">,</span><span class="token string">'SQL'</span><span class="token punctuation">,</span><span class="token number">5.8</span><span class="token punctuation">)</span> <span class="token comment">#Result: MYSQL5.8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>根据指定的连接符,进行字符串拼接  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> CONCAT_WS<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span><span class="token string">'Python'</span><span class="token punctuation">,</span><span class="token string">'Java'</span><span class="token punctuation">,</span><span class="token string">'Golang'</span><span class="token punctuation">)</span> <span class="token comment">#Result: Python-Java-Golang</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>字符串截取  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 字符串截取,从下标为5的字符开始截取 mysql 字符下标从1开始</span><span class="token keyword">select</span> substring<span class="token punctuation">(</span><span class="token string">'hello,word'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">#Result: o,word</span><span class="token comment"># 字符串截取,从下标为5开始截取3位</span><span class="token keyword">select</span> substring<span class="token punctuation">(</span><span class="token string">'hello,word'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">#Result: o,w</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>字符串统计  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 获取字符串的所占字节 utf8:一个中文占3字节 gbk:一个中文占2个字节</span><span class="token keyword">select</span> LENGTH<span class="token punctuation">(</span><span class="token string">'hello,word'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>LENGTH<span class="token punctuation">(</span><span class="token string">'你好啊'</span><span class="token punctuation">)</span> <span class="token comment">#Result: 10, 9</span><span class="token comment"># 获取字符串的字符数量</span><span class="token keyword">select</span> char_length<span class="token punctuation">(</span><span class="token string">'Java'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CHAR_LENGTH<span class="token punctuation">(</span><span class="token string">'你好啊'</span><span class="token punctuation">)</span> <span class="token comment">#Result: 4,3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>在一个字符串中查找 某个字符串第一次出现的位置  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> INSTR<span class="token punctuation">(</span><span class="token string">'foobaerbak'</span><span class="token punctuation">,</span><span class="token string">'ba'</span><span class="token punctuation">)</span> <span class="token comment">#Result: 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>字符填充  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 字符串填充,在源字符串的基础上,如果未到达指定的字节上限,将用 ‘*’ 从字符头部补充字节 </span><span class="token keyword">select</span> LPAD<span class="token punctuation">(</span><span class="token string">'source'</span><span class="token punctuation">,</span><span class="token string">'10'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token comment">#Result: ****source</span><span class="token comment">#从字符串尾部填充</span><span class="token keyword">select</span> rpad<span class="token punctuation">(</span><span class="token string">'source'</span><span class="token punctuation">,</span><span class="token string">'10'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token comment">#Result: source****</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>字符串剔除  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#去除两端空格 默认是去除空格</span><span class="token keyword">select</span> TRIM<span class="token punctuation">(</span><span class="token string">'  hello  '</span><span class="token punctuation">)</span> <span class="token comment">#Result:hello</span><span class="token comment"># 去除头部 指定的字符</span><span class="token keyword">select</span> TRIM<span class="token punctuation">(</span>leading <span class="token string">';'</span> <span class="token keyword">FROM</span> <span class="token string">';;;hello;;;'</span><span class="token punctuation">)</span> <span class="token comment">#Result: hello;;;</span><span class="token comment"># 去除尾部 指定的字符</span><span class="token keyword">select</span> TRIM<span class="token punctuation">(</span>TRAILING <span class="token string">';'</span> <span class="token keyword">FROM</span> <span class="token string">';;;hello;;;'</span><span class="token punctuation">)</span> <span class="token comment">#Result: ;;;hello</span><span class="token comment">#去除头部、尾部 指定的字符</span><span class="token keyword">select</span> TRIM<span class="token punctuation">(</span>both <span class="token string">';'</span> <span class="token keyword">FROM</span> <span class="token string">';;;hello;;;'</span><span class="token punctuation">)</span> <span class="token comment">#Result: hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>字符串替换  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 字符串替换</span><span class="token keyword">select</span> <span class="token keyword">REPLACE</span><span class="token punctuation">(</span><span class="token string">'www.mysql.com.com'</span><span class="token punctuation">,</span><span class="token string">'com'</span><span class="token punctuation">,</span><span class="token string">'cn'</span><span class="token punctuation">)</span> <span class="token comment">#Result: www.mysql.cn.cn</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>字符串反转  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> REVERSE<span class="token punctuation">(</span><span class="token string">'ABCDEFG'</span><span class="token punctuation">)</span> <span class="token comment">#Result: GFEDCBA</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="4-日期时间函数"><a href="#4-日期时间函数" class="headerlink" title="4. 日期时间函数"></a>4. 日期时间函数</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#获取当前日期(不包含时间)</span><span class="token keyword">SELECT</span> CURDATE<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#Result: 2021-04-14</span><span class="token comment">#获取当前时间(不包含日期)</span><span class="token keyword">select</span> CURTIME<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#Result: 17:54:27</span><span class="token comment">#获取时间戳 (秒级时间戳)</span><span class="token keyword">select</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#Result: 1618394363</span><span class="token comment">#获取当前日期和时间</span><span class="token keyword">select</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#Result: 2021-04-14 17:57:17</span><span class="token comment">#类似now()的还有</span><span class="token keyword">select</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>LOCALTIMESTAMP<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>LOCALTIME<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#注意: </span><span class="token comment">#systemdate() 返回的是执行到该函数的时间,多次调用该函数之前的间隔时间较大的话,获取的时间将会不一致</span><span class="token comment">#now() 返回的是该Sql语句执行的时间,无论一条sql中调用几次now(),返回的时间都是一致的</span><span class="token comment">#例：</span><span class="token keyword">select</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>SLEEP<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#Result: 2021-04-14 18:05:2102021-04-14 18:05:21</span><span class="token keyword">select</span> SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>SLEEP<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#Result: 2021-04-14 18:06:0302021-04-14 18:06:05</span><span class="token comment"># 在以上情况下使用sysdate()会处在一定的问题,所以请使用now()</span><span class="token comment"># 获取两个时间的差值 expr1 - expr2</span><span class="token keyword">select</span> TIMEDIFF<span class="token punctuation">(</span><span class="token string">'12:30:00'</span><span class="token punctuation">,</span><span class="token string">'8:00:00'</span><span class="token punctuation">)</span> <span class="token comment">#Result: 04:30:00</span><span class="token comment"># 获取两个日期相差的天数</span><span class="token keyword">select</span> DATEDIFF<span class="token punctuation">(</span><span class="token string">'2020-01-01'</span><span class="token punctuation">,</span><span class="token string">'2000-01-01'</span><span class="token punctuation">)</span> <span class="token comment">#Result 7305</span><span class="token comment"># 日期添加 在指定的日期上添加一天</span><span class="token keyword">select</span> DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">INTERVAL</span> <span class="token number">1</span> <span class="token keyword">DAY</span><span class="token punctuation">)</span><span class="token comment">#减一天</span><span class="token keyword">select</span> DATE_SUB<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">INTERVAL</span> <span class="token number">1</span> <span class="token keyword">day</span><span class="token punctuation">)</span><span class="token comment">#在指定的日期时间上 减去 1天2两小时30分钟</span><span class="token keyword">select</span> date_sub<span class="token punctuation">(</span><span class="token string">'2020-01-05 12:30:00'</span><span class="token punctuation">,</span><span class="token keyword">INTERVAL</span> <span class="token string">'1 2:30:00'</span> DAY_SECOND<span class="token punctuation">)</span><span class="token comment">#获取当前星期几、几月份</span><span class="token keyword">set</span> lc_time_names<span class="token operator">=</span><span class="token string">'zh_CN'</span> <span class="token comment">#设置中文</span><span class="token keyword">select</span> DAYNAME<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>MONTHNAME<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#Result: 星期三 ,四月</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-加密函数"><a href="#5-加密函数" class="headerlink" title="5.加密函数"></a>5.加密函数</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#MD5加密(不可逆)</span><span class="token keyword">select</span> MD5<span class="token punctuation">(</span><span class="token string">'lxz'</span><span class="token punctuation">)</span> <span class="token comment">#Result: 5d52a67facac487d8aa43f29de250510</span><span class="token keyword">select</span> sha<span class="token punctuation">(</span><span class="token string">'lxz'</span><span class="token punctuation">)</span> <span class="token comment">#Result: 3f8306b511c633d761f5e0fc9386b791bb028fbb</span><span class="token keyword">select</span> SHA1<span class="token punctuation">(</span><span class="token string">'lxz'</span><span class="token punctuation">)</span><span class="token comment">#Result: 3f8306b511c633d761f5e0fc9386b791bb028fbb</span><span class="token comment">#AES对称加密 AES_ENCRYPT(要加密的数据,加密的秘钥值), to_base64()进行base64编码</span><span class="token keyword">select</span> to_base64<span class="token punctuation">(</span>AES_ENCRYPT<span class="token punctuation">(</span><span class="token string">'lxz'</span><span class="token punctuation">,</span><span class="token string">'keys'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#Result: eT8ZPEfQwax8t/W5gY4yfA==</span><span class="token comment">#AES对称解密 AES_DECRYPT(要解密的数据,加密时的秘钥值) from_base64()进行base64解码</span><span class="token keyword">select</span> AES_DECRYPT<span class="token punctuation">(</span>from_base64<span class="token punctuation">(</span><span class="token string">'eT8ZPEfQwax8t/W5gY4yfA=='</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'keys'</span><span class="token punctuation">)</span> <span class="token comment">#Result: lxz</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-流程控制"><a href="#6-流程控制" class="headerlink" title="6.流程控制"></a>6.流程控制</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 多条流程控制sql case: 选择的流程分支,如果是1,则会执行 when1 分支, 如果是2,则会执行 when2 分支,其他情况都会走else分支</span><span class="token keyword">select</span> <span class="token keyword">case</span> <span class="token number">1</span><span class="token keyword">when</span> <span class="token number">1</span> <span class="token keyword">then</span> <span class="token string">'one'</span><span class="token keyword">when</span> <span class="token number">2</span> <span class="token keyword">then</span> <span class="token string">'two'</span><span class="token keyword">else</span> <span class="token string">'more'</span> <span class="token keyword">end</span><span class="token punctuation">;</span><span class="token comment">#查询用户状态</span><span class="token keyword">select</span> <span class="token keyword">case</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span> <span class="token keyword">when</span> <span class="token number">1</span><span class="token keyword">then</span> <span class="token string">'已删除'</span><span class="token keyword">when</span> <span class="token number">2</span><span class="token keyword">then</span> <span class="token string">'已冻结'</span><span class="token keyword">else</span> <span class="token string">'正常'</span> <span class="token keyword">end</span><span class="token keyword">from</span> <span class="token keyword">user</span><span class="token comment">#IF 语句,expr1=true,会执行expr2,反之执行expr3</span><span class="token comment">#IF(expr1,expr2,expr3)</span><span class="token keyword">select</span> <span class="token keyword">IF</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'Result_true'</span><span class="token punctuation">,</span><span class="token string">'Result_false'</span><span class="token punctuation">)</span> <span class="token comment">#Result: Result_true</span><span class="token keyword">select</span> <span class="token keyword">IF</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'Result_true'</span><span class="token punctuation">,</span><span class="token string">'Result_false'</span><span class="token punctuation">)</span> <span class="token comment">#Result: Result_false</span><span class="token comment">#IFNULL 语句,expr1如果不为NULL,就返回expr1,反之返回expr2</span><span class="token comment">#IFNULL(expr1,expr2)</span><span class="token keyword">select</span> IFNULL<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token comment">#Result: 1</span><span class="token keyword">select</span> IFNULL<span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token comment">#Result: 123</span><span class="token keyword">select</span> IFNULL<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token comment">#Result: 0</span><span class="token comment">#NULLIF 语句,如果expr1==expr2,则返回NULL,反之返回expr1</span><span class="token comment">#NULLIF(expr1,expr2)</span><span class="token keyword">select</span> <span class="token keyword">NULLIF</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#Result: NULL</span><span class="token keyword">select</span> <span class="token keyword">NULLIF</span><span class="token punctuation">(</span><span class="token string">'first'</span><span class="token punctuation">,</span><span class="token string">'last'</span><span class="token punctuation">)</span> <span class="token comment">#Result: first</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-格式化函数"><a href="#7-格式化函数" class="headerlink" title="7.格式化函数"></a>7.格式化函数</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 日期时间格式化</span><span class="token comment"># 日期时间格式化</span><span class="token keyword">select</span> date_format<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%Y %r'</span><span class="token punctuation">)</span> <span class="token comment">#Result: 2021 07:11:10 PM</span><span class="token keyword">select</span> date_format<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span> <span class="token comment">#Result: 2021-04-19</span><span class="token keyword">select</span> date_format<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%Y-%m-%d %H:%i:%s'</span><span class="token punctuation">)</span> <span class="token comment">#Result: 2021-04-19 19:14:13</span><span class="token comment">#反格式化 日期</span><span class="token keyword">select</span> date_format<span class="token punctuation">(</span><span class="token number">19990306</span><span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span> <span class="token comment">#Result: 1999-03-06</span><span class="token keyword">select</span> date_format<span class="token punctuation">(</span><span class="token number">19990306122530</span><span class="token punctuation">,</span><span class="token string">'%Y-%m-%d %H:%i:%s'</span><span class="token punctuation">)</span> <span class="token comment">#Result: 1999-03-06 12:25:30</span><span class="token comment">#获取当前是AM(上午)还是下午(PM)</span><span class="token keyword">select</span> DATE_FORMAT<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%p'</span><span class="token punctuation">)</span> <span class="token comment">#结合case使用</span><span class="token keyword">select</span> <span class="token keyword">case</span> DATE_FORMAT<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%p'</span><span class="token punctuation">)</span><span class="token keyword">WHEN</span> <span class="token string">'AM'</span><span class="token keyword">THEN</span> <span class="token string">'现在是上午'</span><span class="token keyword">WHEN</span> <span class="token string">'PM'</span><span class="token keyword">THEN</span> <span class="token string">'现在是下午'</span><span class="token keyword">ELSE</span> <span class="token string">'未知'</span> <span class="token keyword">END</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-转换函数"><a href="#8-转换函数" class="headerlink" title="8.转换函数"></a>8.转换函数</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 转换函数</span><span class="token comment"># 字符串转换整数</span><span class="token keyword">select</span> <span class="token keyword">convert</span><span class="token punctuation">(</span><span class="token string">'360'</span><span class="token punctuation">,</span>signed<span class="token punctuation">)</span> <span class="token comment">#Result: 360</span><span class="token keyword">select</span> CAST<span class="token punctuation">(</span><span class="token string">'3098'</span> <span class="token keyword">AS</span> signed<span class="token punctuation">)</span> <span class="token comment">#Result: 3098</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-系统函数"><a href="#9-系统函数" class="headerlink" title="9.系统函数"></a>9.系统函数</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">##  查看版本号</span><span class="token keyword">select</span> VERSION<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#查看客户端连接数</span><span class="token keyword">select</span> CONNECTION_ID<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#查看用户连接信息</span><span class="token keyword">show</span> PROCESSLIST<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Mysql系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBA </tag>
            
            <tag> SQL </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx学习之旅【一】限流配置</title>
      <link href="2021/04/11/Nginx%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%B8%80%E3%80%91%E9%99%90%E6%B5%81%E9%85%8D%E7%BD%AE/"/>
      <url>2021/04/11/Nginx%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E3%80%90%E4%B8%80%E3%80%91%E9%99%90%E6%B5%81%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="Nginx两种限流方式"><a href="#Nginx两种限流方式" class="headerlink" title="Nginx两种限流方式"></a>Nginx两种限流方式</h2><ul><li>速率限流</li><li>并发限流</li></ul><h3 id="1-速率限流"><a href="#1-速率限流" class="headerlink" title="1.速率限流"></a>1.速率限流</h3><ul><li><p>漏桶算法实现控制速率限流</p><p>漏桶(Leaky Bucket)算法思路很简单,水(请求)先进入到漏桶里,漏桶以一定的速度出水(接口有响应速率),当水流入速度过大会直接溢出(访问频率超过接口响应速率),然后就拒绝请求,可以看出漏桶算法能强行限制数据的传输速率</p></li><li><p>Nginx配置限流</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"># 设置限流配置     # binary_remote_addr<span class="token operator">:</span>表示根据Ip限流    # contentRateLimit 缓存空间名称 10m大小    # rate 速率 每秒最多接受同一个Ip两个请求 limit_req_zone$binary_remote_addrzone=myRateLimit<span class="token operator">:</span>10mrate=2r/s;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><p>解释:<br>binary_remote_addr 是一种key，表示基于 remote_addr(客户端IP) 来做限流，binary_ 的目的是压缩内存占用量。<br>zone：定义共享内存区来存储访问信息， myRateLimit:10m 表示一个大小为10M，名字为myRateLimit的内存区域。1M能存储16000 IP地址的访问信息，10M可以存储16W IP地址访问信息。<br>rate 用于设置最大访问速率，rate=10r/s 表示每秒最多处理10个请求。Nginx 实际上以毫秒为粒度来跟踪请求信息，因此 10r/s 实际上是限制：每100毫秒处理一个请求。这意味着，自上一个请求处理完后，若后续100毫秒内又有请求到达，将拒绝处理该请求.我们这里设置成2 方便测试。</p><p>限流效果如下：<br><a href="http://www.zlxblog.com/"><img src="http://114.55.103.12/group1/M00/00/00/rBB9G14bB4KAV9YHAAAxLL6LN5Y185.jpg"></a></p><h4 id="处理突发流量"><a href="#处理突发流量" class="headerlink" title="处理突发流量"></a>处理突发流量</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json">limit_req_zone$binary_remote_addrzone=myRateLimit<span class="token operator">:</span>10mrate=2r/s burst=<span class="token number">20</span> nodelay;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p>解释:<br>burst 译为突发、爆发，表示在超过设定的处理速率后能额外处理的请求数,当 rate=10r/s 时，将1s拆成10份，即每100ms可处理1个请求。</p><p>此处，**burst=20 **，若同时有21个请求到达，Nginx 会处理第一个请求，剩余20个请求将放入队列，然后每隔100ms从队列中获取一个请求进行处理。若请求数大于21，将拒绝处理多余的请求，直接返回503.</p><p>不过，单独使用 burst 参数并不实用。假设 burst=50 ，rate依然为10r/s，排队中的50个请求虽然每100ms会处理一个，但第50个请求却需要等待 50 * 100ms即 5s，这么长的处理时间自然难以接受。</p><p>因此，burst 往往结合 nodelay 一起使用<br>nodelay 指并行处理请求。</p><h3 id="2-总并发量-限流"><a href="#2-总并发量-限流" class="headerlink" title="2.总并发量 限流"></a>2.总并发量 限流</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json">#配置总限流limit_conn_zone $binary_remote_addr zone=addr<span class="token operator">:</span>1m;#使用该限流方式 最大并发量<span class="token number">10</span>limit_conn addr <span class="token number">10</span>;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加入单个IP限流控制</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">#存储单个IP的限流容量limit_conn_zone $binary_remote_addr zone=perip<span class="token operator">:</span>10m;#整个location对应的并发容量配置limit_conn_zone $server_name zone=perserver<span class="token operator">:</span>10m;使用location /<span class="token punctuation">{</span>#每个IP限流limit_conn perip <span class="token number">10</span>;#当前location总限流limit_conn perserver <span class="token number">100</span>;<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 架构搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git初始化仓库</title>
      <link href="2020/05/06/git%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BB%93%E5%BA%93/"/>
      <url>2020/05/06/git%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h4 id="Git-全局设置"><a href="#Git-全局设置" class="headerlink" title="Git 全局设置:"></a>Git 全局设置:</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config --global user.name "lx zhang"git config --global user.email "****@163.com"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="创建-git-仓库"><a href="#创建-git-仓库" class="headerlink" title="创建 git 仓库:"></a>创建 git 仓库:</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkdir test001cd test001git inittouch README.mdgit add README.mdgit commit -m "first commit"git remote add origin https://gitee.com/***/test001.gitgit push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="已有仓库"><a href="#已有仓库" class="headerlink" title="已有仓库?"></a>已有仓库?</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd existing_git_repogit remote add origin https://gitee.com/mcxVk/test001.gitgit push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">字节补充<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
